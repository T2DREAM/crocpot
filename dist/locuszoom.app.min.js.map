{"version":3,"sources":["webpack://[name]/webpack/bootstrap","webpack://[name]/external \"d3\"","webpack://[name]/./esm/helpers/layouts.js","webpack://[name]/./esm/data/adapters.js","webpack://[name]/./esm/registry/base.js","webpack://[name]/./esm/registry/adapters.js","webpack://[name]/./esm/components/constants.js","webpack://[name]/./esm/helpers/transforms.js","webpack://[name]/./esm/registry/transforms.js","webpack://[name]/./esm/data/field.js","webpack://[name]/./esm/data/requester.js","webpack://[name]/./esm/helpers/common.js","webpack://[name]/./esm/components/toolbar/widgets.js","webpack://[name]/./esm/registry/widgets.js","webpack://[name]/./esm/components/toolbar/index.js","webpack://[name]/./esm/components/legend.js","webpack://[name]/./esm/components/panel.js","webpack://[name]/./esm/helpers/display.js","webpack://[name]/./esm/components/plot.js","webpack://[name]/./esm/helpers/scalable.js","webpack://[name]/./esm/registry/scalable.js","webpack://[name]/./esm/components/data_layer/base.js","webpack://[name]/./esm/components/data_layer/annotation_track.js","webpack://[name]/./esm/components/data_layer/arcs.js","webpack://[name]/./esm/components/data_layer/forest.js","webpack://[name]/./esm/components/data_layer/genes.js","webpack://[name]/./esm/components/data_layer/line.js","webpack://[name]/./esm/components/data_layer/scatter.js","webpack://[name]/./esm/registry/data_layers.js","webpack://[name]/./esm/layouts/index.js","webpack://[name]/./esm/registry/layouts.js","webpack://[name]/./esm/data/sources.js","webpack://[name]/./esm/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","d3","applyNamespaces","element","namespace","default_namespace","default","match","base","resolved_namespace","re","replace","exec","length","push","namespaced_element","namespaced_property","merge","custom_layout","default_layout","Error","custom_type","default_type","Array","isArray","deepCopy","item","JSON","parse","stringify","nameToSymbol","shape","factory_name","charAt","toUpperCase","slice","validateBuildSource","class_name","build","source","includes","BaseAdapter","config","this","_enableCache","_cachedKey","__dependentSource","parseInit","params","state","chain","fields","getURL","url","fetch","then","response","ok","statusText","text","req","cacheKey","getCacheKey","Promise","resolve","_cachedResponse","fetchRequest","data","keys","N","every","constructor","records","record","j","outnames","trans","fieldFound","k","map","output_record","val","forEach","v","resp","source_id","discrete","json","normalizeResponse","standardized","annotateData","extractFields","one_source_body","combineChainBody","new_body","header","body","preGetData","pre","getRequest","parseResponse","RemoteAdapter","AssociationLZ","id_field","x","unshift","analysis","chr","start","end","sort","a","b","LDServer","join","arr","dataFields","id","position","position_field","pvalue","pvalue_field","_names_","names","nameMatch","regexes","arguments","regex","filter","id_match","RegExp","obj","isrefvarin","isrefvarout","ldin","ldout","refVar","findRequestedFields","ldrefvar","findMergeFields","columns","pval_field","cmp","test","extremeVal","extremeIdx","findExtremeValue","genome_build","ld_source","population","ld_pop","method","getRefvar","encodeURIComponent","reqFields","corrField","rsquare","left","right","lfield","rfield","position2","leftJoin","refvar","idfield","outrefname","outldname","tagRefVariant","combined","chainRequests","payload","concat","next","GwasCatalogLZ","build_option","default_source","posMatch","find","decider_out","indexOf","n_matches","fn","outn","chainNames","catNames","pos","GeneLZ","GeneConstraintLZ","unique_gene_names","reduce","acc","gene","gene_name","query","alias","headers","constraint","toString","parseFloat","toFixed","RecombLZ","SOURCE_NAME","StaticSource","_data","PheWASLZ","variant","ConnectorSource","sources","_source_name_mapping","specified_ids","_getRequiredSources","chain_source_id","RegistryBase","_items","Map","has","override","set","from","ClassRegistry","args","registry","entries","adapters","type","add","STATUSES","verbs","adjectives","neglog10","isNaN","Math","log","LN10","logtoscinotation","exp","ceil","diff","pow","scinotation","abs","floor","toExponential","htmlescape","urlencode","template_string","funcs","substring","func","_collectTransforms","transforms","Field","field","parts","full_name","transformations","split","transform","extra","_applyTransformations","Requester","_sources","requests","raw","TRANSFORMS","__split_requests","request_handles","getData","ret","generateCurtain","showing","selector","content_selector","hide_delay","show","content","css","curtain","parent_plot","svg","node","parentNode","insert","attr","append","html","on","hide","update","clearTimeout","applyStyles","page_origin","_getPageOrigin","style","y","layout","width","height","delay","setTimeout","remove","generateLoader","progress_selector","cancel_selector","loader","percent","loader_boundrect","getBoundingClientRect","min","max","animate","classed","setPercentCompleted","selection","styles","prop","BaseWidget","parent","color","parent_panel","parent_svg","button","persist","group_position","initialize","status","menu","shouldPersist","force","destroy","Button","parent_toolbar","tag","title","permanent","outer_selector","inner_selector","scroll_position","hidden","getBaseId","scrollTop","populate","top","page_scroll_top","document","documentElement","container_offset","getContainerOffset","toolbar_client_rect","button_client_rect","menu_client_rect","total_content_height","scrollHeight","bottom","base_max_width","container_max_width","content_max_width","base_max_height","setPopulate","menu_populate_function","setOnclick","highlight","bool","Boolean","setStatus","onmouseover","onmouseout","onclick","getClass","preUpdate","postUpdate","Title","div_selector","title_selector","subtitle","Dimensions","display_width","display_height","RegionScale","positionIntToString","DownloadSVG","_filename","filename","_button_html","button_html","_button_title","button_title","setColor","setHtml","setTitle","setOnMouseover","_getBlobUrl","old","URL","revokeObjectURL","setOnMouseout","root","ancestor_pattern","extractedCSSText","styleSheets","cssRules","e","rule","selectorText","cssText","styleElement","createElement","setAttribute","innerHTML","refNode","hasChildNodes","children","insertBefore","rescale","copy","cloneNode","selectAll","each","dy","serializer","XMLSerializer","_getDimensions","_appendCSS","_getCSS","serializeToString","_generateSVG","markup","blob","Blob","createObjectURL","DownloadPNG","svg_url","canvas","context","getContext","reject","image","Image","onload","drawImage","toBlob","png","src","RemovePanel","suppress_confirm","confirm","panel","toolbar","removePanel","MovePanelUp","is_at_top","y_index","disable","moveUp","MovePanelDown","is_at_bottom","panel_ids_by_y_index","moveDown","ShiftRegion","step","applyState","ZoomRegion","can_zoom","current_region_scale","max_region_scale","min_region_scale","new_region_scale","delta","Menu","menu_html","ResizeToData","scaleHeightToData","ToggleLegend","legend","render","DisplayOptions","allowed_fields","fields_whitelist","dataLayer","data_layers","layer_name","dataLayerLayout","defaultConfig","configSlot","undefined","_selected_item","uniqueID","random","table","menuLayout","renderRow","display_name","display_options","row_id","row","radioId","field_name","defaultName","default_config_display_name","options","index","display","SetState","state_field","show_selected","new_state","widgets","Toolbar","hide_timeout","dashboard","components","widget","console","warn","error","panel_boundaries","dragging","interaction","orientation","origin","padding","label_size","Legend","background_rect","elements","elements_group","group","line_height","data_layer_ids_by_z_index","reverse","label_x","label_y","shape_factory","path_y","size","radius","sqrt","PI","label","bcr","right_x","pad_from_bottom","pad_from_right","min_width","min_height","proportional_width","proportional_height","proportional_origin","margin","background_click","cliparea","axes","y1","y2","drag_background_to_pan","drag_x_ticks_to_scale","drag_y1_ticks_to_scale","drag_y2_ticks_to_scale","scroll_to_zoom","x_linked","y1_linked","y2_linked","Panel","panels","generateID","initialized","layout_idx","state_id","data_promises","x_scale","y1_scale","y2_scale","x_extent","y1_extent","y2_extent","x_ticks","y1_ticks","y2_ticks","zoom_timeout","event_hooks","initializeLayout","event","hook","theseHooks","hookMatch","splice","eventData","bubble","sourceID","eventContext","hookToRun","emit","y_axis","axis","data_layer","z_index","dlid","idx","data_layer_layout","destroyAllTooltips","container","applyDataLayerZIndexesToDataLayerLayouts","setAllElementStatus","clipRect","inner_border","generateExtents","constrain","limit_exponent","neg_min","neg_max","pos_min","pos_max","Infinity","ranges","base_x_range","range","x_shifted","base_y1_range","y1_shifted","base_y2_range","y2_shifted","panel_id","linked_panel_ids","anchor","scalar","zooming","current_extent_size","current_scaled_extent_size","round","invert","zoom_factor","scale","potential_extent_size","new_extent_size","offset_ratio","center","new_x_extent_start","dragged_x","shiftKey","start_x","y_shifted","dragged_y","start_y","domain","renderAxis","zoom_handler","preventDefault","_canInteract","coords","wheelDelta","detail","deltaY","getLinkedPanelIds","data_layer_id","draw","show_immediately","plot_origin","panel_count","setDimensions","setOrigin","setMargin","x_range","y1_range","y2_range","label_function","addDataLayer","base_id","clipPath","clearSelections","x_axis","x_axis_label","y1_axis","y1_axis_label","y2_axis","y2_axis_label","mousedown","startDrag","select","applyPanelYIndexesToPanelLayouts","positionPanels","reMap","message","all","decoupled","getAxisExtent","extent","ticks","baseTickConfig","self","nextLayer","getTicks","itemConfig","clip_range","target_tick_count","parseInt","min_n","base_toFixed","unit","pop","prettyTicks","canRender","axis_params","label_offset","label_rotate","generateTicks","axis_factory","ticksAreAllNumbers","tickPadding","tickValues","tick_format","tickFormat","substr","tick_selector","parseFields","tick_mouseover","focus","cursor","target_height","dh","getAbsoluteDataHeight","toggle","filters","exclusive","setElementStatusByFilters","verb","adjective","antiverb","responsive_resize","mouse_guide","Plot","datasource","remap_promises","_base_layout","lzd","_external_listeners","panel_layout","panelId","pid","layer","layer_state","_setDefaultState","clearPanelData","success_callback","opts","error_callback","onerror","err","listener","new_data","state_changes","mods","validated_region","attempted_scale","attempted_midpoint","temp","_updateStatePosition","loading_data","applyAllElementStatus","some","target","event_name","tracker","removeEventListener","lastElementChild","removeChild","outerHTML","bounding_client_rect","x_offset","scrollLeft","y_offset","offset","offsetParent","offsetTop","offsetLeft","dimension","total","clientRect","resize_listener","rescaleSVG","window","addEventListener","trackExternalListener","load_listener","addPanel","panel_width","panel_height","x_linked_margins","total_proportional_height","sumProportional","proportional_adjustment","calculated_plot_height","mouse_guide_svg","mouse_guide_vertical_svg","mouse_guide_horizontal_svg","vertical","horizontal","selectors","corner_selector","panel_idx","panel_resize_drag","this_panel","original_panel_height","panel_height_change","new_calculated_plot_height","loop_panel_id","loop_panel_idx","loop_panel","corner_drag","dx","plot_page_origin","panel_page_origin","mouseout_mouse_guide","mouseup","stopDrag","mousemove","body_node","to_send","active","lz_match_value","client_rect","overrideAxisLayout","axis_number","axis_layout","ceiling","lower_buffer","upper_buffer","min_extent","y_axis_number","suffix","exp_symbols","0","3","6","9","places_exp","min_exp","places","positionStringToInt","suffixre","mult","Number","tokens","condition","variable","close","astify","token","shift","ast","cache","render_node","if_value","parameters","input","field_value","numerical_bin","breaks","values","null_value","threshold","prev","curr","categorical_bin","categories","ordinal_cycle","interpolate","nullval","upper_idx","brk","normalized_input","isFinite","scalable","tooltip_positioning","BaseDataLayer","tooltip","tooltips","global_statuses","fieldName","fieldString","resortDataLayers","getElementId","extra_fields","axis_config","element_id","empty","field_to_match","receive","broadcast_value","lz_highlight_match","toHTML","getDataLayer","getPanel","getPlot","deselect","unselectElement","applyCustomDataMethods","element_data","data_index","resolveScalableParameter","scale_function","f","axis_name","data_extent","original_extent_span","_getDataExtent","range_min","range_max","y_scale","y_extent","x_min","x_max","y_min","y_max","tooltip_top","tooltip_left","arrow_type","arrow_top","arrow_left","layer_layout","tooltip_box","data_layer_height","data_layer_width","x_center","y_center","placement","arrow_size","offset_right","offset_left","arrow","return_type","matches","operators","status_flags","updateTooltip","positionTooltip","closable","destroyTooltip","element_or_id","temporary","label_mark_position","_getTooltipPosition","_drawTooltip","first_time","resolveStatus","statuses","directive","operator","previousValue","currentValue","sub_status","sub_operator","show_directive","and","hide_directive","antistatus","show_resolved","hide_resolved","has_tooltip","createTooltip","get_element_id_error","element_status_node_id","getElementStatusNodeId","element_status_idx","added_status","showOrHideTooltip","is_selected","value_to_broadcast","send","filterElements","setElementStatus","getElementById","behaviors","event_match","executeBehaviors","requiredKeyStates","ctrlKey","behavior","current_status_boolean","action","href","open","location","panel_origin","positionAllTooltips","promise","applyDataMethods","hitarea_width","AnnotationTrack","trackData","visible_lines_group","enter","exit","hit_areas_group","hit_areas_selection","_getX","x_left","left_node","left_node_x_center","crds","applyBehaviors","fill","Arcs","_make_line","x1","field1","x2","field2","xmid","curve","line","hitareas","point_size","point_shape","fill_opacity","confidence_intervals","start_field","end_field","show_no_significance_line","Forest","ci_selection","points_selection","initial_y","CategoryForest","ci_config","axis_num","category_field","field_to_add","stroke","label_font_size","label_exon_spacing","exon_height","bounding_box_padding","track_vertical_spacing","Genes","transcript_idx","tracks","gene_track_index","1","gene_id","gene_version","transcript_id","transcripts","display_range","label_width","font_size","temp_text","getBBox","_getLabelWidth","text_anchor","centered_margin","display_domain","track","potential_track","collision_on_potential_track","placed_gene","min_start","exons","assignTracks","bboxes","getTrackHeight","boundaries","labels","strand","exon_id","clickareas","gene_bbox_id","gene_bbox","Line","x_field","y_field","path","y0","path_class","global_status","default_orthogonal_layout","OrthogonalLine","default_y","Scatter","spacing","handle_lines","lines","min_x","max_x","flip","dn","dnl","dnlx2","line_swing","dnx","text_swing","label_texts","da","dal","label_lines","nodes","abound","bbound","seperate_iterations","again","db","adjust","new_a_y","new_b_y","min_y","max_y","label_elements","separate_labels","filtered_data","label_groups","groups_enter","flip_labels","ref","CategoryScatter","_categories","xField","sourceData","ak","bk","av","toLowerCase","bv","uniqueCategories","category","bounds","categoryNames","_setDynamicColorScheme","from_source","color_params","colors","colorParams","_getColorScale","baseParams","parameters_categories_hash","categoryBounds","knownCategories","knownColors","xPos","_prepareData","_generateCategoryBounds","layers","region_nav_plot_toolbar","standard_association_tooltip","or","standard_association_tooltip_with_label","standard_genes_tooltip","catalog_variant_tooltip","coaccessibility_tooltip","significance_layer","recomb_rate_layer","association_pvalues_layer","else","class","onshiftclick","coaccessibility_layer","association_pvalues_catalog_layer","catalog","phewas_pvalues_layer","genes_layer","annotation_catalog_layer","ldlz2_pop_selector_menu","standard_panel_toolbar","standard_plot_toolbar","version","association_panel","coaccessibility_panel","association_catalog_panel","genes_panel","phewas_panel","annotation_catalog_panel","standard_association_plot","association_catalog_plot","standard_phewas_plot","coaccessibility_plot","assign","color_config","standard_association","standard_association_with_label","standard_genes","catalog_variant","coaccessibility","toolbar_widgets","ldlz2_pop_selector","standard_panel","standard_plot","region_nav_plot","significance","recomb_rate","association_pvalues","association_pvalues_catalog","phewas_pvalues","genes","annotation_catalog","association","association_catalog","phewas","plot","standard_phewas","overrides","unnamespaced","result","contents","list","layouts","DataSources","_registry","ADAPTERS","LocusZoom","iterator","dataset","region","parsed_state","parsePositionQuery","refresh","Adapters","DataLayers","Layouts","ScaleFunctions","TransformationFunctions","Widgets","INSTALLED_PLUGINS","use","plugin","install","apply"],"mappings":"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","file":"locuszoom.app.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n","module.exports = d3;","/**\n * Utilities for modifying or working with layout objects\n *  @module\n */\nimport * as d3 from 'd3';\n\n\n/**\n * Apply namespaces to layout, recursively\n * @private\n  */\nfunction applyNamespaces(element, namespace, default_namespace) {\n    if (namespace) {\n        if (typeof namespace == 'string') {\n            namespace = { default: namespace };\n        }\n    } else {\n        namespace = { default: '' };\n    }\n    if (typeof element == 'string') {\n        const re = /\\{\\{namespace(\\[[A-Za-z_0-9]+\\]|)\\}\\}/g;\n        let match, base, key, resolved_namespace;\n        const replace = [];\n        while ((match = re.exec(element)) !== null) {\n            base = match[0];\n            key = match[1].length ? match[1].replace(/(\\[|\\])/g, '') : null;\n            resolved_namespace = default_namespace;\n            if (namespace != null && typeof namespace == 'object' && typeof namespace[key] != 'undefined') {\n                resolved_namespace = namespace[key] + (namespace[key].length ? ':' : '');\n            }\n            replace.push({ base: base, namespace: resolved_namespace });\n        }\n        for (let r in replace) {\n            element = element.replace(replace[r].base, replace[r].namespace);\n        }\n    } else if (typeof element == 'object' && element != null) {\n        if (typeof element.namespace != 'undefined') {\n            const merge_namespace = (typeof element.namespace == 'string') ? { default: element.namespace } : element.namespace;\n            namespace = merge(namespace, merge_namespace);\n        }\n        let namespaced_element, namespaced_property;\n        for (let property in element) {\n            if (property === 'namespace') {\n                continue;\n            }\n            namespaced_element = applyNamespaces(element[property], namespace, default_namespace);\n            namespaced_property = applyNamespaces(property, namespace, default_namespace);\n            if (property !== namespaced_property) {\n                delete element[property];\n            }\n            element[namespaced_property] = namespaced_element;\n        }\n    }\n    return element;\n}\n\n/**\n * A helper method used for merging two objects. If a key is present in both, takes the value from the first object\n *   Values from `default_layout` will be cleanly copied over, ensuring no references or shared state.\n *\n * Frequently used for preparing custom layouts. Both objects should be JSON-serializable.\n *\n * @param {object} custom_layout An object containing configuration parameters that override or add to defaults\n * @param {object} default_layout An object containing default settings.\n * @returns {object} The custom layout is modified in place and also returned from this method.\n */\nfunction merge(custom_layout, default_layout) {\n    if (typeof custom_layout !== 'object' || typeof default_layout !== 'object') {\n        throw new Error(`LocusZoom.Layouts.merge only accepts two layout objects; ${typeof custom_layout}, ${typeof default_layout} given`);\n    }\n    for (let property in default_layout) {\n        if (!Object.prototype.hasOwnProperty.call(default_layout, property)) {\n            continue;\n        }\n        // Get types for comparison. Treat nulls in the custom layout as undefined for simplicity.\n        // (javascript treats nulls as \"object\" when we just want to overwrite them as if they're undefined)\n        // Also separate arrays from objects as a discrete type.\n        let custom_type = custom_layout[property] === null ? 'undefined' : typeof custom_layout[property];\n        let default_type = typeof default_layout[property];\n        if (custom_type === 'object' && Array.isArray(custom_layout[property])) {\n            custom_type = 'array';\n        }\n        if (default_type === 'object' && Array.isArray(default_layout[property])) {\n            default_type = 'array';\n        }\n        // Unsupported property types: throw an exception\n        if (custom_type === 'function' || default_type === 'function') {\n            throw new Error('LocusZoom.Layouts.merge encountered an unsupported property type');\n        }\n        // Undefined custom value: pull the default value\n        if (custom_type === 'undefined') {\n            custom_layout[property] = deepCopy(default_layout[property]);\n            continue;\n        }\n        // Both values are objects: merge recursively\n        if (custom_type === 'object' && default_type === 'object') {\n            custom_layout[property] = merge(custom_layout[property], default_layout[property]);\n            continue;\n        }\n    }\n    return custom_layout;\n}\n\nfunction deepCopy(item) {\n    return JSON.parse(JSON.stringify(item));\n}\n\n/**\n * Convert name to symbol\n * Layout objects accept symbol names as strings (circle, triangle, etc). Convert to symbol objects.\n * @return {d3.symbol|null}\n */\nfunction nameToSymbol(shape) {\n    // Legend shape names are strings; need to connect this to factory. Eg circle --> d3.symbolCircle\n    if (!shape) {\n        return null;\n    }\n    const factory_name = `symbol${shape.charAt(0).toUpperCase() + shape.slice(1)}`;\n    return d3[factory_name] || null;\n}\n\nexport { applyNamespaces, deepCopy, merge, nameToSymbol };\n","/**\n * Define standard data adapters used to retrieve data (usually from REST APIs)\n * @module\n */\n\nfunction validateBuildSource(class_name, build, source) {\n    // Build OR Source, not both\n    if ((build && source) || !(build || source)) {\n        throw new Error(`${class_name} must provide a parameter specifying either \"build\" or \"source\". It should not specify both.`);\n    }\n    // If the build isn't recognized, our APIs can't transparently select a source to match\n    if (build && !['GRCh37', 'GRCh38'].includes(build)) {\n        throw new Error(`${class_name} must specify a valid genome build number`);\n    }\n}\n\n\n/**\n * Base class for LocusZoom data sources (any). See also: RemoteAdapter\n * @public\n */\nclass BaseAdapter {\n    constructor(config) {\n        /**\n         * Whether this source should enable caching\n         * @member {Boolean}\n         */\n        this._enableCache = true;\n        this._cachedKey = null;\n\n        /**\n         * Whether this data source type is dependent on previous requests- for example, the LD source cannot annotate\n         *  association data if no data was found for that region.\n         * @member {boolean}\n         */\n        this.__dependentSource = false;\n\n        // Parse configuration options\n        this.parseInit(config);\n    }\n\n    /**\n     * Parse configuration used to create the data source. Many custom sources will override this method to suit their\n     *  needs (eg specific config options, or for sources that do not retrieve data from a URL)\n     * @protected\n     * @param {String|Object} config Basic configuration- either a url, or a config object\n     * @param {String} [config.url] The datasource URL\n     * @param {String} [config.params] Initial config params for the datasource\n     */\n    parseInit(config) {\n        /** @member {Object} */\n        this.params = config.params || {};\n    }\n\n    /**\n     * A unique identifier that indicates whether cached data is valid for this request. For most sources using GET\n     *  requests to a REST API, this is usually the URL.\n     * @protected\n     * @param {Object} state Information available in plot.state (chr, start, end). Sometimes used to inject globally\n     *  available information that influences the request being made.\n     * @param {Object} chain The data chain from previous requests made in a sequence.\n     * @param fields\n     * @returns {String|undefined}\n     */\n    getCacheKey(state, chain, fields) {\n        return this.getURL(state, chain, fields);\n    }\n\n    /**\n     * Stub: build the URL for any requests made by this source.\n     * @protected\n     */\n    getURL(state, chain, fields) {\n        return this.url;\n    }\n\n    /**\n     * Perform a network request to fetch data for this source. This is usually the method that is used to override\n     *  when defining how to retrieve data.\n     * @protected\n     * @param {Object} state The state of the parent plot\n     * @param chain\n     * @param fields\n     * @returns {Promise}\n     */\n    fetchRequest(state, chain, fields) {\n        const url = this.getURL(state, chain, fields);\n        return fetch(url).then((response) => {\n            if (!response.ok) {\n                throw new Error(response.statusText);\n            }\n            return response.text();\n        });\n    }\n\n    /**\n     * Gets the data for just this source, typically via a network request (but using cache where possible)\n     *\n     * For most use cases, it is better to override `fetchRequest` instead, to avoid bypassing the cache mechanism\n     * by accident.\n     * @protected\n     */\n    getRequest(state, chain, fields) {\n        let req;\n        const cacheKey = this.getCacheKey(state, chain, fields);\n        if (this._enableCache && typeof(cacheKey) !== 'undefined' && cacheKey === this._cachedKey) {\n            req = Promise.resolve(this._cachedResponse);  // Resolve to the value of the current promise\n        } else {\n            req = this.fetchRequest(state, chain, fields);\n            if (this._enableCache) {\n                this._cachedKey = cacheKey;\n                this._cachedResponse = req;\n            }\n        }\n        return req;\n    }\n\n    /**\n     * Ensure the server response is in a canonical form, an array of one object per record. [ {field: oneval} ].\n     * If the server response contains columns, reformats the response from {column1: [], column2: []} to the above.\n     *\n     * Does not apply namespacing, transformations, or field extraction.\n     *\n     * May be overridden by data sources that inherently return more complex payloads, or that exist to annotate other\n     *  sources (eg, if the payload provides extra data rather than a series of records).\n     * @protected\n     * @param {Object[]|Object} data The original parsed server response\n     */\n    normalizeResponse(data) {\n        if (Array.isArray(data)) {\n            // Already in the desired form\n            return data;\n        }\n        // Otherwise, assume the server response is an object representing columns of data.\n        // Each array should have the same length (verify), and a given array index corresponds to a single row.\n        const keys = Object.keys(data);\n        const N = data[keys[0]].length;\n        const sameLength = keys.every(function (key) {\n            const item = data[key];\n            return item.length === N;\n        });\n        if (!sameLength) {\n            throw new Error(`${this.constructor.name} expects a response in which all arrays of data are the same length`);\n        }\n\n        // Go down the rows, and create an object for each record\n        const records = [];\n        const fields = Object.keys(data);\n        for (let i = 0; i < N; i++) {\n            const record = {};\n            for (let j = 0; j < fields.length; j++) {\n                record[fields[j]] = data[fields[j]][i];\n            }\n            records.push(record);\n        }\n        return records;\n    }\n\n    /**\n     * Hook to post-process the data returned by this source with new, additional behavior.\n     *   (eg cleaning up API values or performing complex calculations on the returned data)\n     *\n     * @protected\n     * @param {Object[]} records The parsed data from the source (eg standardized api response)\n     * @param {Object} chain The data chain object. For example, chain.headers may provide useful annotation metadata\n     * @returns {Object[]|Promise} The modified set of records\n     */\n    annotateData(records, chain) {\n        // Default behavior: no transformations\n        return records;\n    }\n\n    /**\n     * Clean up the server records for use by datalayers: extract only certain fields, with the specified names.\n     *   Apply per-field transformations as appropriate.\n     *\n     * This hook can be overridden, eg to create a source that always returns all records and ignores the \"fields\" array.\n     *  This is particularly common for sources at the end of a chain- many \"dependent\" sources do not allow\n     *  cherry-picking individual fields, in which case by **convention** the fields array specifies \"last_source_name:all\"\n     *\n     * @protected\n     * @param {Object[]} data One record object per element\n     * @param {String[]} fields The names of fields to extract (as named in the source data). Eg \"afield\"\n     * @param {String[]} outnames How to represent the source fields in the output. Eg \"namespace:afield|atransform\"\n     * @param {function[]} trans An array of transformation functions (if any). One function per data element, or null.\n     * @protected\n     */\n    extractFields (data, fields, outnames, trans) {\n        //intended for an array of objects\n        //  [ {\"id\":1, \"val\":5}, {\"id\":2, \"val\":10}]\n        // Since a number of sources exist that do not obey this format, we will provide a convenient pass-through\n        if (!Array.isArray(data)) {\n            return data;\n        }\n\n        if (!data.length) {\n            // Sometimes there are regions that just don't have data- this should not trigger a missing field error message!\n            return data;\n        }\n\n        const fieldFound = [];\n        for (let k = 0; k < fields.length; k++) {\n            fieldFound[k] = 0;\n        }\n\n        const records = data.map(function (item) {\n            const output_record = {};\n            for (let j = 0; j < fields.length; j++) {\n                let val = item[fields[j]];\n                if (typeof val != 'undefined') {\n                    fieldFound[j] = 1;\n                }\n                if (trans && trans[j]) {\n                    val = trans[j](val);\n                }\n                output_record[outnames[j]] = val;\n            }\n            return output_record;\n        });\n        fieldFound.forEach(function(v, i) {\n            if (!v) {\n                throw new Error(`field ${fields[i]} not found in response for ${outnames[i]}`);\n            }\n        });\n        return records;\n    }\n\n    /**\n     * Combine records from this source with others in the chain to yield final chain body.\n     *   Handles merging this data with other sources (if applicable).\n     *\n     * @protected\n     * @param {Object[]} data The data That would be returned from this source alone\n     * @param {Object} chain The data chain built up during previous requests\n     * @param {String[]} fields\n     * @param {String[]} outnames\n     * @param {String[]} trans\n     * @return {Promise|Object[]} The new chain body\n     */\n    combineChainBody(data, chain, fields, outnames, trans) {\n        return data;\n    }\n\n    /**\n     * Coordinates the work of parsing a response and returning records. This is broken into 4 steps, which may be\n     *  overridden separately for fine-grained control. Each step can return either raw data or a promise.\n     *\n     * @protected\n     *\n     * @param {String|Object} resp The raw data associated with the response\n     * @param {Object} chain The combined parsed response data from this and all other requests made in the chain\n     * @param {String[]} fields Array of requested field names (as they would appear in the response payload)\n     * @param {String[]} outnames  Array of field names as they will be represented in the data returned by this source,\n     *  including the namespace. This must be an array with the same length as `fields`\n     * @param {Function[]} trans The collection of transformation functions to be run on selected fields.\n     *     This must be an array with the same length as `fields`\n     * @returns {Promise} A promise that resolves to an object containing\n     *   request metadata (`headers: {}`), the consolidated data for plotting (`body: []`), and the individual responses that would be\n     *   returned by each source in the chain in isolation (`discrete: {}`)\n     */\n    parseResponse (resp, chain, fields, outnames, trans) {\n        const source_id = this.source_id || this.constructor.name;\n        if (!chain.discrete) {\n            chain.discrete = {};\n        }\n\n        const json = typeof resp == 'string' ? JSON.parse(resp) : resp;\n\n        // Perform the 4 steps of parsing the payload and return a combined chain object\n        return Promise.resolve(this.normalizeResponse(json.data || json))\n            .then((standardized) => {\n                // Perform calculations on the data from just this source\n                return Promise.resolve(this.annotateData(standardized, chain));\n            }).then((data) => {\n                return Promise.resolve(this.extractFields(data, fields, outnames, trans));\n            }).then((one_source_body) => {\n                // Store a copy of the data that would be returned by parsing this source in isolation (and taking the\n                //   fields array into account). This is useful when we want to re-use the source output in many ways.\n                chain.discrete[source_id] = one_source_body;\n                return Promise.resolve(this.combineChainBody(one_source_body, chain, fields, outnames, trans));\n            }).then((new_body) => {\n                return { header: chain.header || {}, discrete: chain.discrete, body: new_body };\n            });\n    }\n\n    /**\n     * Fetch the data from the specified data source, and apply transformations requested by an external consumer.\n     * This is the public-facing datasource method that will most be called by the plot, but custom data sources will\n     *  almost never want to override this method directly- more specific hooks are provided to control individual pieces\n     *  of the request lifecycle.\n     *\n     * @private\n     * @param {Object} state The current \"state\" of the plot, such as chromosome and start/end positions\n     * @param {String[]} fields Array of field names that the plot has requested from this data source. (without the \"namespace\" prefix)\n     * @param {String[]} outnames  Array describing how the output data should refer to this field. This represents the\n     *     originally requested field name, including the namespace. This must be an array with the same length as `fields`\n     * @param {Function[]} trans The collection of transformation functions to be run on selected fields.\n     *     This must be an array with the same length as `fields`\n     * @returns {function} A callable operation that can be used as part of the data chain\n     */\n    getData(state, fields, outnames, trans) {\n        if (this.preGetData) { // TODO try to remove this method if at all possible\n            const pre = this.preGetData(state, fields, outnames, trans);\n            if (this.pre) {\n                state = pre.state || state;\n                fields = pre.fields || fields;\n                outnames = pre.outnames || outnames;\n                trans = pre.trans || trans;\n            }\n        }\n\n        return (chain) => {\n            if (this.__dependentSource && chain && chain.body && !chain.body.length) {\n                // A \"dependent\" source should not attempt to fire a request if there is no data for it to act on.\n                // Therefore, it should simply return the previous data chain.\n                return Promise.resolve(chain);\n            }\n\n            return this.getRequest(state, chain, fields).then((resp) => {\n                return this.parseResponse(resp, chain, fields, outnames, trans);\n            });\n        };\n    }\n}\n\n/**\n * Base source for LocusZoom data sources that receive their data over the web. Adds default config parameters\n *  (and potentially other behavior) that are relevant to URL-based requests.\n */\nclass RemoteAdapter extends BaseAdapter {\n    parseInit(config) {\n        super.parseInit(config);\n\n        /** @member {String} */\n        this.url = config.url;\n        if (!this.url) {\n            throw new Error('Source not initialized with required URL');\n        }\n    }\n}\n\n/**\n * Data Source for Association Data from the LocusZoom/ Portaldev API (or compatible). Defines how to make a requesr\n * @public\n */\nclass AssociationLZ extends RemoteAdapter {\n    preGetData (state, fields, outnames, trans) {\n        // TODO: Modify internals to see if we can go without this method\n        const id_field = this.params.id_field || 'id';\n        [id_field, 'position'].forEach(function(x) {\n            if (!fields.includes(x)) {\n                fields.unshift(x);\n                outnames.unshift(x);\n                trans.unshift(null);\n            }\n        });\n        return {fields: fields, outnames:outnames, trans:trans};\n    }\n\n    getURL (state, chain, fields) {\n        const analysis = chain.header.analysis || this.params.source || this.params.analysis;  // Old usages called this param \"analysis\"\n        if (typeof analysis == 'undefined') {\n            throw new Error('Association source must specify an analysis ID to plot');\n        }\n        return `${this.url}results/?filter=analysis in ${analysis} and chromosome in  '${state.chr}' and position ge ${state.start} and position le ${state.end}`;\n    }\n\n    normalizeResponse (data) {\n        // Some association sources do not sort their data in a predictable order, which makes it hard to reliably\n        //  align with other sources (such as LD). For performance reasons, sorting is an opt-in argument.\n        // TODO: Consider more fine grained sorting control in the future. This was added as a very specific\n        //   workaround for the original T2D portal.\n        data = super.normalizeResponse(data);\n        if (this.params && this.params.sort && data.length && data[0]['position']) {\n            data.sort(function (a, b) {\n                return a['position'] - b['position'];\n            });\n        }\n        return data;\n    }\n}\n\n/**\n * Fetch linkage disequilibrium information from a UMich LDServer-compatible API\n *\n * This source is designed to connect its results to association data, and therefore depends on association data having\n *  been loaded by a previous request in the data chain.\n *\n * In older versions of LocusZoom, this was known as \"LDServer\". A prior source (targeted at older APIs) has been removed.\n */\nclass LDServer extends RemoteAdapter {\n    constructor(config) {\n        super(config);\n        this.__dependentSource = true;\n    }\n\n    preGetData(state, fields) {\n        if (fields.length > 1) {\n            if (fields.length !== 2 || !fields.includes('isrefvar')) {\n                throw new Error(`LD does not know how to get all fields: ${fields.join(', ')}`);\n            }\n        }\n    }\n\n    findMergeFields(chain) {\n        // Find the fields (as provided by a previous step in the chain, like an association source) that will be needed to\n        //  combine LD data with existing information\n\n        // Since LD information may be shared across multiple assoc sources with different namespaces,\n        //   we use regex to find columns to join on, rather than requiring exact matches\n        const exactMatch = function (arr) {\n            return function () {\n                const regexes = arguments;\n                for (let i = 0; i < regexes.length; i++) {\n                    const regex = regexes[i];\n                    const m = arr.filter(function (x) {\n                        return x.match(regex);\n                    });\n                    if (m.length) {\n                        return m[0];\n                    }\n                }\n                return null;\n            };\n        };\n        let dataFields = {\n            id: this.params.id_field,\n            position: this.params.position_field,\n            pvalue: this.params.pvalue_field,\n            _names_:null,\n        };\n        if (chain && chain.body && chain.body.length > 0) {\n            const names = Object.keys(chain.body[0]);\n            const nameMatch = exactMatch(names);\n            // Internally, fields are generally prefixed with the name of the source they come from.\n            // If the user provides an id_field (like `variant`), it should work across data sources( `assoc1:variant`,\n            //  assoc2:variant), but not match fragments of other field names (assoc1:variant_thing)\n            // Note: these lookups hard-code a couple of common fields that will work based on known APIs in the wild\n            const id_match = dataFields.id && nameMatch(new RegExp(`${dataFields.id}\\\\b`));\n            dataFields.id = id_match || nameMatch(/\\bvariant\\b/) || nameMatch(/\\bid\\b/);\n            dataFields.position = dataFields.position || nameMatch(/\\bposition\\b/i, /\\bpos\\b/i);\n            dataFields.pvalue = dataFields.pvalue || nameMatch(/\\bpvalue\\b/i, /\\blog_pvalue\\b/i);\n            dataFields._names_ = names;\n        }\n        return dataFields;\n    }\n\n    findRequestedFields (fields, outnames) {\n        // Assumption: all usages of this source will only ever ask for \"isrefvar\" or \"state\". This maps to output names.\n        let obj = {};\n        for (let i = 0; i < fields.length; i++) {\n            if (fields[i] === 'isrefvar') {\n                obj.isrefvarin = fields[i];\n                obj.isrefvarout = outnames && outnames[i];\n            } else {\n                obj.ldin = fields[i];\n                obj.ldout = outnames && outnames[i];\n            }\n        }\n        return obj;\n    }\n\n    normalizeResponse (data) {\n        // The LD API payload does not obey standard format conventions; do not try to transform it.\n        return data;\n    }\n\n    /**\n     * Get the LD reference variant, which by default will be the most significant hit in the assoc results\n     *   This will be used in making the original query to the LD server for pairwise LD information\n     * @returns {*|string} The marker id (expected to be in `chr:pos_ref/alt` format) of the reference variant\n     */\n    getRefvar(state, chain, fields) {\n        let findExtremeValue = function(records, pval_field) {\n            // Finds the most significant hit (smallest pvalue, or largest -log10p). Will try to auto-detect the appropriate comparison.\n            pval_field = pval_field || 'log_pvalue';  // The official LZ API returns log_pvalue\n            const is_log = /log/.test(pval_field);\n            let cmp;\n            if (is_log) {\n                cmp = function(a, b) {\n                    return a > b;\n                };\n            } else {\n                cmp = function(a, b) {\n                    return a < b;\n                };\n            }\n            let extremeVal = records[0][pval_field], extremeIdx = 0;\n            for (let i = 1; i < records.length; i++) {\n                if (cmp(records[i][pval_field], extremeVal)) {\n                    extremeVal = records[i][pval_field];\n                    extremeIdx = i;\n                }\n            }\n            return extremeIdx;\n        };\n\n        let reqFields = this.findRequestedFields(fields);\n        let refVar = reqFields.ldin;\n        if (refVar === 'state') {\n            refVar = state.ldrefvar || chain.header.ldrefvar || 'best';\n        }\n        if (refVar === 'best') {\n            if (!chain.body) {\n                throw new Error('No association data found to find best pvalue');\n            }\n            let keys = this.findMergeFields(chain);\n            if (!keys.pvalue || !keys.id) {\n                let columns = '';\n                if (!keys.id) {\n                    columns += `${columns.length ? ', ' : ''}id`;\n                }\n                if (!keys.pvalue) {\n                    columns += `${columns.length ? ', ' : ''}pvalue`;\n                }\n                throw new Error(`Unable to find necessary column(s) for merge: ${columns} (available: ${keys._names_})`);\n            }\n            refVar = chain.body[findExtremeValue(chain.body, keys.pvalue)][keys.id];\n        }\n        return refVar;\n    }\n\n    getURL(state, chain, fields) {\n        // Accept the following params in this.params:\n        // - method (r, rsquare, cov)\n        // - source (aka panel)\n        // - population (ALL, AFR, EUR, etc)\n        // - build\n        // The LD source/pop can be overridden from plot.state for dynamic layouts\n        const build = state.genome_build || this.params.build || 'GRCh37';\n        const source = state.ld_source || this.params.source || '1000G';\n        const population = state.ld_pop || this.params.population || 'ALL';  // LDServer panels will always have an ALL\n        const method = this.params.method || 'rsquare';\n\n        validateBuildSource(this.constructor.name, build, null);  // LD doesn't need to validate `source` option\n\n        let refVar = this.getRefvar(state, chain, fields);\n        // Some datasets, notably the Portal, use a different marker format.\n        //  Coerce it into one that will work with the LDServer API. (CHROM:POS_REF/ALT)\n        const REGEX_MARKER = /^(?:chr)?([a-zA-Z0-9]+?)[_:-](\\d+)[_:|-]?(\\w+)?[/_:|-]?([^_]+)?_?(.*)?/;\n        const match = refVar && refVar.match(REGEX_MARKER);\n\n        if (!match) {\n            throw new Error('Could not request LD for a missing or incomplete marker format');\n        }\n        refVar = [match[1], ':', match[2], '_', match[3], '/', match[4]].join('');\n        chain.header.ldrefvar = refVar;\n\n        return  [\n            this.url, 'genome_builds/', build, '/references/', source, '/populations/', population, '/variants',\n            '?correlation=', method,\n            '&variant=', encodeURIComponent(refVar),\n            '&chrom=', encodeURIComponent(state.chr),\n            '&start=', encodeURIComponent(state.start),\n            '&stop=', encodeURIComponent(state.end),\n        ].join('');\n    }\n\n    combineChainBody(data, chain, fields, outnames, trans) {\n        let keys = this.findMergeFields(chain);\n        let reqFields = this.findRequestedFields(fields, outnames);\n        if (!keys.position) {\n            throw new Error(`Unable to find position field for merge: ${keys._names_}`);\n        }\n        const leftJoin = function (left, right, lfield, rfield) {\n            let i = 0, j = 0;\n            while (i < left.length && j < right.position2.length) {\n                if (left[i][keys.position] === right.position2[j]) {\n                    left[i][lfield] = right[rfield][j];\n                    i++;\n                    j++;\n                } else if (left[i][keys.position] < right.position2[j]) {\n                    i++;\n                } else {\n                    j++;\n                }\n            }\n        };\n        const tagRefVariant = function (data, refvar, idfield, outrefname, outldname) {\n            for (let i = 0; i < data.length; i++) {\n                if (data[i][idfield] && data[i][idfield] === refvar) {\n                    data[i][outrefname] = 1;\n                    data[i][outldname] = 1; // For label/filter purposes, implicitly mark the ref var as LD=1 to itself\n                } else {\n                    data[i][outrefname] = 0;\n                }\n            }\n        };\n\n        // LD servers vary slightly. Some report corr as \"rsquare\", others as \"correlation\"\n        let corrField = data.rsquare ? 'rsquare' : 'correlation';\n        leftJoin(chain.body, data, reqFields.ldout, corrField);\n        if (reqFields.isrefvarin && chain.header.ldrefvar) {\n            tagRefVariant(chain.body, chain.header.ldrefvar, keys.id, reqFields.isrefvarout, reqFields.ldout);\n        }\n        return chain.body;\n    }\n\n    fetchRequest(state, chain, fields) {\n        // The API is paginated, but we need all of the data to render a plot. Depaginate and combine where appropriate.\n        let url = this.getURL(state, chain, fields);\n        let combined = { data: {} };\n        let chainRequests = function (url) {\n            return fetch(url).then().then((response) => {\n                if (!response.ok) {\n                    throw new Error(response.statusText);\n                }\n                return response.text();\n            }).then(function(payload) {\n                payload = JSON.parse(payload);\n                Object.keys(payload.data).forEach(function (key) {\n                    combined.data[key] = (combined.data[key] || []).concat(payload.data[key]);\n                });\n                if (payload.next) {\n                    return chainRequests(payload.next);\n                }\n                return combined;\n            });\n        };\n        return chainRequests(url);\n    }\n}\n\n/**\n * Data source for GWAS catalogs of known variants\n * @public\n * @class\n * @param {Object|String} init Configuration (URL or object)\n * @param {Object} [init.params] Optional configuration parameters\n * @param {Number} [init.params.source=2] The ID of the chosen catalog. Defaults to EBI GWAS catalog, GRCh37\n * @param {('strict'|'loose')} [init.params.match_type='strict'] Whether to match on exact variant, or just position.\n */\nclass GwasCatalogLZ extends RemoteAdapter {\n    constructor(config) {\n        super(config);\n        this.__dependentSource = true;\n    }\n\n    getURL(state, chain, fields) {\n        // This is intended to be aligned with another source- we will assume they are always ordered by position, asc\n        //  (regardless of the actual match field)\n        const build_option = state.genome_build || this.params.build;\n        validateBuildSource(this.constructor.name, build_option, null); // Source can override build- not mutually exclusive\n\n        // Most of our annotations will respect genome build before any other option.\n        //   But there can be more than one GWAS catalog version available in the same API, for the same build- an\n        //   explicit config option will always take\n        //   precedence.\n        const default_source = (build_option === 'GRCh38') ? 1 : 2;  // EBI GWAS catalog\n        const source = this.params.source || default_source;\n        return `${this.url  }?format=objects&sort=pos&filter=id eq ${source} and chrom eq '${state.chr}' and pos ge ${state.start} and pos le ${state.end}`;\n    }\n\n    findMergeFields(records) {\n        // Data from previous sources is already namespaced. Find the alignment field by matching.\n        const knownFields = Object.keys(records);\n        // Note: All API endoints involved only give results for 1 chromosome at a time; match is implied\n        const posMatch = knownFields.find(function (item) {\n            return item.match(/\\b(position|pos)\\b/i);\n        });\n\n        if (!posMatch) {\n            throw new Error('Could not find data to align with GWAS catalog results');\n        }\n        return { 'pos': posMatch };\n    }\n\n    extractFields (data, fields, outnames, trans) {\n        // Skip the \"individual field extraction\" step; extraction will be handled when building chain body instead\n        return data;\n    }\n\n    combineChainBody(data, chain, fields, outnames, trans) {\n        if (!data.length) {\n            return chain.body;\n        }\n\n        //  TODO: Better reuse options in the future. This source is very specifically tied to the PortalDev API, where\n        //   the field name is always \"log_pvalue\". Relatively few sites will write their own gwas-catalog endpoint.\n        const decider = 'log_pvalue';\n        const decider_out = outnames[fields.indexOf(decider)];\n\n        function leftJoin(left, right, fields, outnames, trans) { // Add `fields` from `right` to `left`\n            // Add a synthetic, un-namespaced field to all matching records\n            const n_matches = left['n_catalog_matches'] || 0;\n            left['n_catalog_matches'] = n_matches + 1;\n            if (decider && left[decider_out] && left[decider_out] > right[decider]) {\n                // There may be more than one GWAS catalog entry for the same SNP. This source is intended for a 1:1\n                //  annotation scenario, so for now it only joins the catalog entry that has the best -log10 pvalue\n                return;\n            }\n\n            for (let j = 0; j < fields.length; j++) {\n                const fn = fields[j];\n                const outn = outnames[j];\n\n                let val = right[fn];\n                if (trans && trans[j]) {\n                    val = trans[j](val);\n                }\n                left[outn] = val;\n            }\n        }\n\n        const chainNames = this.findMergeFields(chain.body[0]);\n        const catNames = this.findMergeFields(data[0]);\n\n        var i = 0, j = 0;\n        while (i < chain.body.length && j < data.length) {\n            var left = chain.body[i];\n            var right = data[j];\n\n            if (left[chainNames.pos] === right[catNames.pos]) {\n                // There may be multiple catalog entries for each matching SNP; evaluate match one at a time\n                leftJoin(left, right, fields, outnames, trans);\n                j += 1;\n            } else if (left[chainNames.pos] < right[catNames.pos]) {\n                i += 1;\n            } else {\n                j += 1;\n            }\n        }\n        return chain.body;\n    }\n}\n\n/**\n * Data Source for Gene Data, as fetched from the LocusZoom/Portaldev API server (or compatible format)\n * @public\n */\nclass GeneLZ extends RemoteAdapter {\n    getURL(state, chain, fields) {\n        const build = state.genome_build || this.params.build;\n        let source = this.params.source;\n        validateBuildSource(this.constructor.name, build, source);\n\n        if (build) { // If build specified, choose a known Portal API dataset IDs (build 37/38)\n            source = (build === 'GRCh38') ? 1 : 3;\n        }\n        return `${this.url}?filter=source in ${source} and chrom eq '${state.chr}' and start le ${state.end} and end ge ${state.start}`;\n    }\n\n    normalizeResponse(data) {\n        // Genes have a very complex internal data format. Bypass any record parsing, and provide the data layer with\n        // the exact information returned by the API. (ignoring the fields array in the layout)\n        return data;\n    }\n\n    extractFields(data, fields, outnames, trans) {\n        return data;\n    }\n}\n\n/**\n * Data Source for Gene Constraint Data, as fetched from the gnomAD server (or compatible)\n *\n * This is intended to be the second request in a chain, with special logic that connects it to Genes data\n *  already fetched.\n *\n * @public\n*/\nclass GeneConstraintLZ extends RemoteAdapter {\n    constructor(config) {\n        super(config);\n        this.__dependentSource = true;\n    }\n    getURL() {\n        // GraphQL API: request details are encoded in the body, not the URL\n        return this.url;\n    }\n    getCacheKey(state, chain, fields) {\n        const build = state.genome_build || this.params.build;\n        // GraphQL API: request not defined solely by the URL\n        // Gather the state params that govern constraint query for a given region.\n        return `${this.url} ${state.chr} ${state.start} ${state.end} ${build}`;\n    }\n\n    normalizeResponse(data) {\n        return data;\n    }\n\n    fetchRequest(state, chain, fields) {\n        const build = state.genome_build || this.params.build;\n        if (!build) {\n            throw new Error(`Data source ${this.constructor.name} must specify a 'genome_build' option`);\n        }\n\n        const unique_gene_names = chain.body.reduce(\n            // In rare cases, the same gene symbol may appear at multiple positions. (issue #179) We de-duplicate the\n            //  gene names to avoid issuing a malformed GraphQL query.\n            function (acc, gene) {\n                acc[gene.gene_name] = null;\n                return acc;\n            },\n            {}\n        );\n        let query = Object.keys(unique_gene_names).map(function (gene_name) {\n            // GraphQL alias names must match a specific set of allowed characters: https://stackoverflow.com/a/45757065/1422268\n            const alias = `_${gene_name.replace(/[^A-Za-z0-9_]/g, '_')}`;\n            // Each gene symbol is a separate graphQL query, grouped into one request using aliases\n            return `${alias}: gene(gene_symbol: \"${gene_name}\", reference_genome: ${build}) { gnomad_constraint { exp_syn obs_syn syn_z oe_syn oe_syn_lower oe_syn_upper exp_mis obs_mis mis_z oe_mis oe_mis_lower oe_mis_upper exp_lof obs_lof pLI oe_lof oe_lof_lower oe_lof_upper } } `;\n        });\n\n        if (!query.length) {\n            // If there are no genes, skip the network request\n            return Promise.resolve({ data: null });\n        }\n\n        query = `{${query.join(' ')} }`; // GraphQL isn't quite JSON; items are separated by spaces but not commas\n        const url = this.getURL(state, chain, fields);\n        // See: https://graphql.org/learn/serving-over-http/\n        const body = JSON.stringify({ query: query });\n        const headers = { 'Content-Type': 'application/json' };\n\n        return fetch(url, { method: 'POST', body, headers }).then((response) => {\n            if (!response.ok) {\n                throw new Error(response.statusText);\n            }\n            return response.text();\n        });\n    }\n\n    combineChainBody(data, chain, fields, outnames, trans) {\n        if (!data) {\n            return chain;\n        }\n\n        chain.body.forEach(function(gene) {\n            // Find payload keys that match gene names in this response\n            const alias = `_${gene.gene_name.replace(/[^A-Za-z0-9_]/g, '_')}`;  // aliases are modified gene names\n            const constraint = data[alias] && data[alias]['gnomad_constraint']; // gnomad API has two ways of specifying missing data for a requested gene\n            if (constraint) {\n                // Add all fields from constraint data- do not override fields present in the gene source\n                Object.keys(constraint).forEach(function (key) {\n                    let val = constraint[key];\n                    if (typeof gene[key] === 'undefined') {\n                        if (typeof val == 'number' && val.toString().includes('.')) {\n                            val = parseFloat(val.toFixed(2));\n                        }\n                        gene[key] = val;   // These two sources are both designed to bypass namespacing\n                    }\n                });\n            }\n        });\n        return chain.body;\n    }\n}\n\n/**\n * Data Source for Recombination Rate Data, as fetched from the LocusZoom API server (or compatible)\n * @public\n */\nclass RecombLZ extends RemoteAdapter {\n    getURL(state, chain, fields) {\n        const build = state.genome_build || this.params.build;\n        let source = this.params.source;\n        validateBuildSource(this.constructor.SOURCE_NAME, build, source);\n\n        if (build) { // If build specified, choose a known Portal API dataset IDs (build 37/38)\n            source = (build === 'GRCh38') ? 16 : 15;\n        }\n        return `${this.url}?filter=id in ${source} and chromosome eq '${state.chr}' and position le ${state.end} and position ge ${state.start}`;\n    }\n}\n\n/**\n * Data Source for static blobs of data as raw JS objects. This does not perform additional parsing, and it bypasses\n * namespaces. Therefore it is the responsibility of the user to pass information in a format that can be read and\n * understood by the chosen plot- a StaticJSON source is rarely a drop-in replacement.\n *\n * This source is largely here for legacy reasons. More often, a convenient way to serve static data is as separate\n *  JSON files to an existing source (with the JSON url in place of an API).\n * @public\n */\nclass StaticSource extends BaseAdapter {\n    parseInit(data) {\n        // Does not receive any config; the only argument is the raw data, embedded when source is created\n        this._data = data;\n    }\n    getRequest(state, chain, fields) {\n        return Promise.resolve(this._data);\n    }\n}\n\n\n/**\n * Data source for PheWAS data retrieved from a LocusZoom/PortalDev compatible API\n * @public\n * @param {String[]} init.params.build This datasource expects to be provided the name of the genome build that will\n *   be used to provide pheWAS results for this position. Note positions may not translate between builds.\n */\nclass PheWASLZ extends RemoteAdapter {\n    getURL(state, chain, fields) {\n        const build = (state.genome_build ? [state.genome_build] : null) || this.params.build;\n        if (!build || !Array.isArray(build) || !build.length) {\n            throw new Error(['Data source', this.constructor.SOURCE_NAME, 'requires that you specify array of one or more desired genome build names'].join(' '));\n        }\n        const url = [\n            this.url,\n            \"?filter=variant eq '\", encodeURIComponent(state.variant), \"'&format=objects&\",\n            build.map(function (item) {\n                return `build=${encodeURIComponent(item)}`;\n            }).join('&'),\n        ];\n        return url.join('');\n    }\n}\n\n\n/**\n * Base class for \"connectors\"- this is meant to be subclassed, rather than used directly.\n *\n * A connector is a source that makes no server requests and caches no data of its own. Instead, it decides how to\n *  combine data from other sources in the chain. Connectors are useful when we want to request (or calculate) some\n *  useful piece of information once, but apply it to many different kinds of record types.\n *\n * Typically, a subclass will implement the field merging logic in `combineChainBody`.\n *\n * @public\n * @param {Object} init Configuration for this source\n * @param {Object} init.sources Specify how the hard-coded logic should find the data it relies on in the chain,\n *  as {internal_name: chain_source_id} pairs. This allows writing a reusable connector that does not need to make\n *  assumptions about what namespaces a source is using.\n * @type {*|Function}\n */\nclass ConnectorSource extends BaseAdapter {\n    constructor(config) {\n        super(config);\n\n        if (!config || !config.sources) {\n            throw new Error('Connectors must specify the data they require as init.sources = {internal_name: chain_source_id}} pairs');\n        }\n\n        /**\n         * Tells the connector how to find the data it relies on\n         *\n         * For example, a connector that applies burden test information to the genes layer might specify:\n         *  {gene_ns: \"gene\", aggregation_ns: \"aggregation\"}\n         *\n         * @member {Object}\n         */\n        this._source_name_mapping = config.sources;\n\n        // Validate that this source has been told how to find the required information\n        const specified_ids = Object.keys(config.sources);\n        /** @property {String[]} Specifies the sources that must be provided in the original config object */\n\n        this._getRequiredSources().forEach((k) => {\n            if (!specified_ids.includes(k)) {\n                // TODO: Fix constructor.name usage in minified bundles\n                throw new Error(`Configuration for ${this.constructor.name} must specify a source ID corresponding to ${k}`);\n            }\n        });\n    }\n\n    // Stub- connectors don't have their own url or data, so the defaults don't make sense\n    parseInit() {}\n\n    getRequest(state, chain, fields) {\n        // Connectors do not request their own data by definition, but they *do* depend on other sources having been loaded\n        //  first. This method performs basic validation, and preserves the accumulated body from the chain so far.\n        Object.keys(this._source_name_mapping).forEach((ns) => {\n            const chain_source_id = this._source_name_mapping[ns];\n            if (chain.discrete && !chain.discrete[chain_source_id]) {\n                throw new Error(`${this.constructor.name} cannot be used before loading required data for: ${chain_source_id}`);\n            }\n        });\n        return Promise.resolve(chain.body || []);\n    }\n\n    parseResponse(data, chain, fields, outnames, trans) {\n        // A connector source does not update chain.discrete, but it may use it. It bypasses data formatting\n        //  and field selection (both are assumed to have been done already, by the previous sources this draws from)\n\n        // Because of how the chain works, connectors are not very good at applying new transformations or namespacing.\n        // Typically connectors are called with `connector_name:all` in the fields array.\n        return Promise.resolve(this.combineChainBody(data, chain, fields, outnames, trans))\n            .then(function(new_body) {\n                return {header: chain.header || {}, discrete: chain.discrete || {}, body: new_body};\n            });\n    }\n\n    combineChainBody(records, chain) {\n        // Stub method: specifies how to combine the data\n        throw new Error('This method must be implemented in a subclass');\n    }\n\n    /**\n     * Helper method since ES6 doesn't support class fields\n     * @private\n     */\n    _getRequiredSources() {\n        throw new Error('Must specify an array that identifes the kind of data required by this source');\n    }\n}\n\nexport { BaseAdapter, RemoteAdapter };\n\nexport {\n    AssociationLZ,\n    ConnectorSource,\n    GeneConstraintLZ,\n    GeneLZ,\n    GwasCatalogLZ,\n    LDServer,\n    PheWASLZ,\n    RecombLZ,\n    StaticSource,\n};\n","/** @module */\n\n/**\n * Base class for all registries\n *\n * LocusZoom is plugin-extensible, and layouts are string-based and JSON serializable. This is achieved through the use\n *  of a central registry that holds a reference to each possible feature.\n *\n * Each registry has some syntactical sugar, with common elements are defined in a base class\n */\nclass RegistryBase {\n    constructor() {\n        this._items = new Map();\n    }\n\n    /**\n     * Return the registry member. If the registry stores classes, this returns the class, not the instance.\n     * @param {String} name\n     * @returns {Function}\n     */\n    get(name) {\n        if (!this._items.has(name)) {\n            throw new Error(`Item not found: ${name}`);\n        }\n        return this._items.get(name);\n    }\n\n    /**\n     * Add a new item to the registry\n     * @param {String} name The name of the item to add to the registry\n     * @param {*} item The item to be added (constructor, value, etc)\n     * @param {boolean} override Allow redefining an existing item?\n     * @return {*} The actual object as added to the registry\n     */\n    add(name, item, override = false) {\n        if (!override && this._items.has(name)) {\n            throw new Error(`Item ${name} is already defined`);\n        }\n        this._items.set(name, item);\n        return item;\n    }\n\n    /**\n     * Remove a datasource from the registry (if present)\n     * @param {String} name\n     * @returns {boolean} True if item removed, false if item was never present\n     */\n    remove(name) {\n        return this._items.delete(name);\n    }\n\n    /**\n     * Check whether the specified item is registered\n     * @param {String} name\n     * @returns {boolean}\n     */\n    has(name) {\n        return this._items.has(name);\n    }\n\n    /**\n     * Names of each allowed\n     * @returns {String[]}\n     */\n    list() {\n        return Array.from(this._items.keys());\n    }\n}\n\n/**\n * A specialized registry whose members are class constructors. Contains helper methods for creating instances\n *  and subclasses.\n */\nclass ClassRegistry extends RegistryBase {\n    /**\n     * Create an instance of the specified class from the registry\n     * @param {String} name\n     * @param {*} args Any additional arguments to be passed to the constructor\n     * @returns {*}\n     */\n    create(name, ...args) {\n        const base = this.get(name);\n        return new base(...args);\n    }\n}\n\n\nexport default RegistryBase;\nexport {RegistryBase, ClassRegistry};\n","/**\n * A registry of known data sources. Can be used to find sources by name, either from predefined\n *  classes, or plugins.\n *  @module\n *  @private\n */\nimport {ClassRegistry} from './base';\n\nimport * as adapters from '../data/adapters';\n\n\n// KnownDataSources is a basic registry with no special behavior.\nconst registry = new ClassRegistry();\n\nfor (let [name, type] of Object.entries(adapters)) {\n    registry.add(name, type);\n}\n\n// Add some hard-coded aliases for backwards compatibility\nregistry.add('StaticJSON', adapters.StaticSource);\nregistry.add('LDLZ2', adapters.LDServer);\n\n\nexport default registry;\n","/**\n * Available statuses that individual elements can have. Each status is described by\n *   a verb and an adjective. Verbs are used to generate data layer\n *   methods for updating the status on one or more elements. Adjectives are used in class\n *   names and applied or removed from elements to have a visual representation of the status,\n *   as well as used as keys in the state for tracking which elements are in which status(es)\n * @static\n * @type {{verbs: String[], adjectives: String[]}}\n * @private\n */\nexport const STATUSES = {\n    verbs: ['highlight', 'select', 'fade', 'hide'],\n    adjectives: ['highlighted', 'selected', 'faded', 'hidden'],\n};\n","/**\n * Transformation functions: used to transform a raw value from the API. For example, a template or axis label\n *  can convert from pvalue to -log10pvalue\n * @module\n */\n\n/**\n * Return the -log (base 10)\n * @function neglog10\n */\nexport function neglog10 (value) {\n    if (isNaN(value) || value <= 0) {\n        return null;\n    }\n    return -Math.log(value) / Math.LN10;\n}\n\n/**\n * Convert a number from logarithm to scientific notation. Useful for, eg, a datasource that returns -log(p) by default\n * @function logtoscinotation\n */\nexport function logtoscinotation (value) {\n    if (isNaN(value)) {\n        return 'NaN';\n    }\n    if (value === 0) {\n        return '1';\n    }\n    const exp = Math.ceil(value);\n    const diff = exp - value;\n    const base = Math.pow(10, diff);\n    if (exp === 1) {\n        return (base / 10).toFixed(4);\n    } else if (exp === 2) {\n        return (base / 100).toFixed(3);\n    } else {\n        return `${base.toFixed(2)} × 10^-${exp}`;\n    }\n}\n\n/**\n * Represent a number in scientific notation\n * @function scinotation\n * @param {Number} value\n * @returns {String}\n */\nexport function scinotation (value) {\n    if (isNaN(value)) {\n        return 'NaN';\n    }\n    if (value === 0) {\n        return '0';\n    }\n\n    const abs = Math.abs(value);\n    let log;\n    if (abs > 1) {\n        log = Math.ceil(Math.log(abs) / Math.LN10);\n    } else {  // 0...1\n        log = Math.floor(Math.log(abs) / Math.LN10);\n    }\n    if (Math.abs(log) <= 3) {\n        return value.toFixed(3);\n    } else {\n        return value.toExponential(2).replace('+', '').replace('e', ' × 10^');\n    }\n}\n\n/**\n * HTML-escape user entered values for use in constructed HTML fragments\n *\n * For example, this filter can be used on tooltips with custom HTML display\n * @function htmlescape\n * @param {String} value HTML-escape the provided value\n */\nexport function htmlescape (value) {\n    if (!value) {\n        return '';\n    }\n    value = `${value}`;\n\n    return value.replace(/['\"<>&`]/g, function (s) {\n        switch (s) {\n        case \"'\":\n            return '&#039;';\n        case '\"':\n            return '&quot;';\n        case '<':\n            return '&lt;';\n        case '>':\n            return '&gt;';\n        case '&':\n            return '&amp;';\n        case '`':\n            return '&#x60;';\n        }\n    });\n}\n\n/**\n * URL-encode the provided text, eg for constructing hyperlinks\n * @function urlencode\n * @param {String} value\n */\nexport function urlencode (value) {\n    return encodeURIComponent(value);\n}\n","/**\n * @module\n * @private\n */\nimport {RegistryBase} from './base';\nimport * as transforms from '../helpers/transforms';\n\n/**\n * Registry of transformation functions that may be applied to template values.\n * Provides syntactic sugar atop a standard registry.\n * @private\n */\nclass TransformationFunctions extends RegistryBase {\n    _collectTransforms(template_string) {\n        // Helper function that turns a sequence of function names into a single callable\n        const funcs = template_string\n            .match(/\\|([^|]+)/g)\n            .map((item) => super.get(item.substring(1)));\n\n        return (value) => {\n            return funcs.reduce(\n                (acc, func) => func(acc),\n                value\n            );\n        };\n    }\n\n    /**\n     * In templates, we often use a single concatenated string to ask for several transformation functions at once:\n     *  `value|func1|func2`\n     * This class offers syntactical sugar to retrieve the entire sequence of transformations as a single callable\n     * @param name\n     */\n    get(name) {\n        if (!name) {\n            // This function is sometimes called with no value, and the expected behavior is to return null instead of\n            //  a callable\n            return null;\n        }\n        if (name.substring(0, 1) === '|') {\n            // Legacy artifact of how this function is called- if a pipe is present, this is the template string\n            //  (`|func1|func2...`), rather than any one single transformation function.\n            // A sequence of transformation functions is expected\n            return this._collectTransforms(name);\n        } else {\n            // If not a template string, then user is asking for an item by name directly\n            return super.get(name);\n        }\n    }\n}\n\nconst registry = new TransformationFunctions();\nfor (let [name, type] of Object.entries(transforms)) {\n    registry.add(name, type);\n}\n\n\nexport default registry;\n// Export helper class for unit testing\nexport { TransformationFunctions as _TransformationFunctions };\n","/** @module */\nimport transforms from '../registry/transforms';\n\n/**\n * Represents an addressable unit of data from a namespaced datasource, subject to specified value transformations.\n *\n * When used by a data layer, fields will automatically be re-fetched from the appropriate data source whenever the\n *   state of a plot fetches, eg pan or zoom operations that would affect what data is displayed.\n *\n * @private\n * @class\n * @param {String} field A string representing the namespace of the datasource, the name of the desired field to fetch\n *   from that datasource, and arbitrarily many transformations to apply to the value. The namespace and\n *   transformation(s) are optional and information is delimited according to the general syntax\n *   `[namespace:]name[|transformation][|transformation]`. For example, `association:pvalue|neglog10`\n */\nclass Field {\n    constructor(field) {\n        const parts = /^(?:([^:]+):)?([^:|]*)(\\|.+)*$/.exec(field);\n        /** @member {String} */\n        this.full_name = field;\n        /** @member {String} */\n        this.namespace = parts[1] || null;\n        /** @member {String} */\n        this.name = parts[2] || null;\n        /** @member {Array} */\n        this.transformations = [];\n\n        if (typeof parts[3] == 'string' && parts[3].length > 1) {\n            this.transformations = parts[3].substring(1).split('|');\n            this.transformations.forEach((transform, i) => this.transformations[i] = transforms.get(transform));\n        }\n    }\n\n    _applyTransformations(val) {\n        this.transformations.forEach(function(transform) {\n            val = transform(val);\n        });\n        return val;\n    }\n\n    /**\n     * Resolve the field for a given data element.\n     *   First look for a full match with transformations already applied by the data requester.\n     *   Otherwise prefer a namespace match and fall back to just a name match, applying transformations on the fly.\n     * @param {Object} data Returned data/fields into for this element\n     * @param {Object} [extra] User-applied annotations for this point (info not provided by the server that we want\n     *  to preserve across re-renders). Example usage: \"should_show_label\"\n     * @returns {*}\n     */\n    resolve(data, extra) {\n        if (typeof data[this.full_name] == 'undefined') { // Check for cached result\n            let val = null;\n            if (typeof (data[`${this.namespace}:${this.name}`]) != 'undefined') { // Fallback: value sans transforms\n                val = data[`${this.namespace}:${this.name}`];\n            } else if (typeof data[this.name] != 'undefined') { // Fallback: value present without namespace\n                val = data[this.name];\n            } else if (extra && typeof extra[this.full_name] != 'undefined') { // Fallback: check annotations\n                val = extra[this.full_name];\n            } // We should really warn if no value found, but many bad layouts exist and this could break compatibility\n            data[this.full_name] = this._applyTransformations(val);\n        }\n        return data[this.full_name];\n    }\n}\n\nexport {Field as default};\n","/**\n *  @module\n *  @private\n */\nimport { TRANSFORMS } from '../registry';\n\n/**\n * The Requester manages fetching of data across multiple data sources. It is used internally by LocusZoom data layers.\n *   It passes state information and ensures that data is formatted in the manner expected by the plot.\n *\n * This object is not part of the public interface. It should almost **never** be replaced or modified directly.\n *\n * It is also responsible for constructing a \"chain\" of dependent requests, by requesting each datasource\n *   sequentially in the order specified in the datalayer `fields` array. Data sources are only chained within a\n *   data layer, and only if that layer requests more than one kind of data source.\n * @param {DataSources} sources A set of data sources used specifically by this plot instance\n * @private\n */\nclass Requester {\n    constructor(sources) {\n        this._sources = sources;\n    }\n\n    __split_requests(fields) {\n        // Given a fields array, return an object specifying what datasource names the data layer should make requests\n        //  to, and how to handle the returned data\n        var requests = {};\n        // Regular expression finds namespace:field|trans\n        var re = /^(?:([^:]+):)?([^:|]*)(\\|.+)*$/;\n        fields.forEach(function(raw) {\n            var parts = re.exec(raw);\n            var ns = parts[1] || 'base';\n            var field = parts[2];\n            var trans = TRANSFORMS.get(parts[3]);\n            if (typeof requests[ns] == 'undefined') {\n                requests[ns] = {outnames:[], fields:[], trans:[]};\n            }\n            requests[ns].outnames.push(raw);\n            requests[ns].fields.push(field);\n            requests[ns].trans.push(trans);\n        });\n        return requests;\n    }\n\n    /**\n     * Fetch data, and create a chain that only connects two data sources if they depend on each other\n     * @param {Object} state The current \"state\" of the plot, such as chromosome and start/end positions\n     * @param {String[]} fields The list of data fields specified in the `layout` for a specific data layer\n     * @returns {Promise}\n     */\n    getData(state, fields) {\n        var requests = this.__split_requests(fields);\n        // Create an array of functions that, when called, will trigger the request to the specified datasource\n        var request_handles = Object.keys(requests).map((key) => {\n            if (!this._sources.get(key)) {\n                throw new Error(`Datasource for namespace ${key} not found`);\n            }\n            return this._sources.get(key).getData(\n                state,\n                requests[key].fields,\n                requests[key].outnames,\n                requests[key].trans\n            );\n        });\n        //assume the fields are requested in dependent order\n        //TODO: better manage dependencies\n        var ret = Promise.resolve({header:{}, body: [], discrete: {}});\n        for (var i = 0; i < request_handles.length; i++) {\n            // If a single datalayer uses multiple sources, perform the next request when the previous one completes\n            ret = ret.then(request_handles[i]);\n        }\n        return ret;\n    }\n}\n\n\nexport default Requester;\n","/**\n * @module\n * @private\n */\n// FIXME: A place for code that used to live under the `LocusZoom` namespace\n// Eventually this should be moved into classes or some other mechanism for code sharing. No external uses should\n//  depend on any items in this module.\n\nimport * as d3 from 'd3';\n\n/**\n * Generate a curtain object for a plot, panel, or any other subdivision of a layout\n * The panel curtain, like the plot curtain is an HTML overlay that obscures the entire panel. It can be styled\n *   arbitrarily and display arbitrary messages. It is useful for reporting error messages visually to an end user\n *   when the error renders the panel unusable.\n *   TODO: Improve type doc here\n * @returns {object}\n */\nfunction generateCurtain() {\n    return {\n        showing: false,\n        selector: null,\n        content_selector: null,\n        hide_delay: null,\n\n        /**\n         * Generate the curtain. Any content (string) argument passed will be displayed in the curtain as raw HTML.\n         *   CSS (object) can be passed which will apply styles to the curtain and its content.\n         * @param {string} content Content to be displayed on the curtain (as raw HTML)\n         * @param {object} css Apply the specified styles to the curtain and its contents\n         */\n        show: (content, css) => {\n            if (!this.curtain.showing) {\n                this.curtain.selector = d3.select(this.parent_plot.svg.node().parentNode).insert('div')\n                    .attr('class', 'lz-curtain')\n                    .attr('id', `${this.id}.curtain`);\n                this.curtain.content_selector = this.curtain.selector.append('div')\n                    .attr('class', 'lz-curtain-content');\n                this.curtain.selector.append('div')\n                    .attr('class', 'lz-curtain-dismiss').html('Dismiss')\n                    .on('click', () => this.curtain.hide());\n                this.curtain.showing = true;\n            }\n            return this.curtain.update(content, css);\n        },\n\n        /**\n         * Update the content and css of the curtain that's currently being shown. This method also adjusts the size\n         *   and positioning of the curtain to ensure it still covers the entire panel with no overlap.\n         * @param {string} content Content to be displayed on the curtain (as raw HTML)\n         * @param {object} css Apply the specified styles to the curtain and its contents\n         */\n        update: (content, css) => {\n            if (!this.curtain.showing) {\n                return this.curtain;\n            }\n            clearTimeout(this.curtain.hide_delay);\n            // Apply CSS if provided\n            if (typeof css == 'object') {\n                applyStyles(this.curtain.selector, css);\n            }\n            // Update size and position\n            const page_origin = this._getPageOrigin();\n            this.curtain.selector\n                .style('top', `${page_origin.y}px`)\n                .style('left', `${page_origin.x}px`)\n                .style('width', `${this.layout.width}px`)\n                .style('height', `${this.layout.height}px`);\n            this.curtain.content_selector\n                .style('max-width', `${this.layout.width - 40}px`)\n                .style('max-height', `${this.layout.height - 40}px`);\n            // Apply content if provided\n            if (typeof content == 'string') {\n                this.curtain.content_selector.html(content);\n            }\n            return this.curtain;\n        },\n\n        /**\n         * Remove the curtain\n         * @param {number} delay Time to wait (in ms)\n         */\n        hide: (delay) => {\n            if (!this.curtain.showing) {\n                return this.curtain;\n            }\n            // If a delay was passed then defer to a timeout\n            if (typeof delay == 'number') {\n                clearTimeout(this.curtain.hide_delay);\n                this.curtain.hide_delay = setTimeout(this.curtain.hide, delay);\n                return this.curtain;\n            }\n            // Remove curtain\n            this.curtain.selector.remove();\n            this.curtain.selector = null;\n            this.curtain.content_selector = null;\n            this.curtain.showing = false;\n            return this.curtain;\n        },\n    };\n}\n\n/**\n * Generate a loader object for a plot, panel, or any other subdivision of a layout\n *\n * The panel loader is a small HTML overlay that appears in the lower left corner of the panel. It cannot be styled\n *   arbitrarily, but can show a custom message and show a minimalist loading bar that can be updated to specific\n *   completion percentages or be animated.\n * TODO Improve type documentation\n * @returns {object}\n */\nfunction generateLoader() {\n    return {\n        showing: false,\n        selector: null,\n        content_selector: null,\n        progress_selector: null,\n        cancel_selector: null,\n\n        /**\n         * Show a loading indicator\n         * @param {string} [content='Loading...'] Loading message (displayed as raw HTML)\n         */\n        show: (content) => {\n            // Generate loader\n            if (!this.loader.showing) {\n                this.loader.selector = d3.select(this.parent_plot.svg.node().parentNode).insert('div')\n                    .attr('class', 'lz-loader')\n                    .attr('id', `${this.id}.loader`);\n                this.loader.content_selector = this.loader.selector.append('div')\n                    .attr('class', 'lz-loader-content');\n                this.loader.progress_selector = this.loader.selector\n                    .append('div')\n                    .attr('class', 'lz-loader-progress-container')\n                    .append('div')\n                    .attr('class', 'lz-loader-progress');\n\n                this.loader.showing = true;\n                if (typeof content == 'undefined') {\n                    content = 'Loading...';\n                }\n            }\n            return this.loader.update(content);\n        },\n\n        /**\n         * Update the currently displayed loader and ensure the new content is positioned correctly.\n         * @param {string} content The text to display (as raw HTML). If not a string, will be ignored.\n         * @param {number} [percent] A number from 1-100. If a value is specified, it will stop all animations\n         *   in progress.\n         */\n        update: (content, percent) => {\n            if (!this.loader.showing) {\n                return this.loader;\n            }\n            clearTimeout(this.loader.hide_delay);\n            // Apply content if provided\n            if (typeof content == 'string') {\n                this.loader.content_selector.html(content);\n            }\n            // Update size and position\n            const padding = 6; // is there a better place to store/define this?\n            const page_origin = this._getPageOrigin();\n            const loader_boundrect = this.loader.selector.node().getBoundingClientRect();\n            this.loader.selector\n                .style('top', `${page_origin.y + this.layout.height - loader_boundrect.height - padding}px`)\n                .style('left', `${page_origin.x + padding  }px`);\n            /* Uncomment this code when a functional cancel button can be shown\n            var cancel_boundrect = this.loader.cancel_selector.node().getBoundingClientRect();\n            this.loader.content_selector.style({\n                \"padding-right\": (cancel_boundrect.width + padding) + \"px\"\n            });\n            */\n            // Apply percent if provided\n            if (typeof percent == 'number') {\n                this.loader.progress_selector\n                    .style('width', `${Math.min(Math.max(percent, 1), 100)}%`);\n            }\n            return this.loader;\n        },\n\n        /**\n         * Adds a class to the loading bar that makes it loop infinitely in a loading animation. Useful when exact\n         *   percent progress is not available.\n         */\n        animate: () => {\n            this.loader.progress_selector.classed('lz-loader-progress-animated', true);\n            return this.loader;\n        },\n\n        /**\n         *  Sets the loading bar in the loader to percentage width equal to the percent (number) value passed. Percents\n         *    will automatically be limited to a range of 1 to 100. Will stop all animations in progress.\n         */\n        setPercentCompleted: (percent) => {\n            this.loader.progress_selector.classed('lz-loader-progress-animated', false);\n            return this.loader.update(null, percent);\n        },\n\n        /**\n         * Remove the loader\n         * @param {number} delay Time to wait (in ms)\n         */\n        hide: (delay) => {\n            if (!this.loader.showing) {\n                return this.loader;\n            }\n            // If a delay was passed then defer to a timeout\n            if (typeof delay == 'number') {\n                clearTimeout(this.loader.hide_delay);\n                this.loader.hide_delay = setTimeout(this.loader.hide, delay);\n                return this.loader;\n            }\n            // Remove loader\n            this.loader.selector.remove();\n            this.loader.selector = null;\n            this.loader.content_selector = null;\n            this.loader.progress_selector = null;\n            this.loader.cancel_selector = null;\n            this.loader.showing = false;\n            return this.loader;\n        },\n    };\n}\n\n/**\n * Modern d3 removed the ability to set many styles at once (object syntax). This is a helper so that layouts with\n *  config-objects can set styles all at once\n * @private\n * @param {d3.selection} selection\n * @param {Object} styles\n */\nfunction applyStyles(selection, styles) {\n    styles = styles || {};\n    for (let [prop, value] of Object.entries(styles)) {\n        selection.style(prop, value);\n    }\n}\n\n\nexport { applyStyles, generateCurtain, generateLoader };\n","/** @module */\nimport * as d3 from 'd3';\n\nimport {positionIntToString} from '../../helpers/display';\nimport {applyStyles} from '../../helpers/common';\nimport {deepCopy} from '../../helpers/layouts';\n\n// FIXME: Button creation should occur in the constructors, not in update functions\n\n/**\n *\n * A widget is an empty div rendered on a toolbar that can display custom\n * html of user interface elements.\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n * @param {('left'|'right')} [layout.position='left']  Whether to float the widget left or right.\n * @param {('start'|'middle'|'end')} [layout.group_position] Buttons can optionally be gathered into a visually\n *  distinctive group whose elements are closer together. If a button is identified as the start or end of a group,\n *  it will be drawn with rounded corners and an extra margin of spacing from any button not part of the group.\n *  For example, the region_nav_plot toolbar is a defined as a group.\n * @param {('gray'|'red'|'orange'|'yellow'|'green'|'blue'|'purple')} [layout.color='gray']  Color scheme for the\n *   widget. Applies to buttons and menus.\n * @param {Toolbar} parent The toolbar that contains this widget\n */\nclass BaseWidget {\n    constructor(layout, parent) {\n        /** @member {Object} */\n        this.layout = layout || {};\n        if (!this.layout.color) {\n            this.layout.color = 'gray';\n        }\n\n        /** @member {Toolbar|*} */\n        this.parent = parent || null;\n        /**\n         * Some widgets are attached to a panel, rather than directly to a plot\n         * @member {Panel|null}\n         */\n        this.parent_panel = null;\n        /** @member {Plot} */\n        this.parent_plot = null;\n        /**\n         * This is a reference to either the panel or the plot, depending on what the toolbar is\n         *   tied to. Useful when absolutely positioning toolbar widgets relative to their SVG anchor.\n         * @member {Plot|Panel}\n         */\n        this.parent_svg = null;\n        if (this.parent) {\n            if (this.parent.type === 'panel') {\n                this.parent_panel = this.parent.parent;\n                this.parent_plot = this.parent.parent.parent;\n                this.parent_svg = this.parent_panel;\n            } else {\n                this.parent_plot = this.parent.parent;\n                this.parent_svg = this.parent_plot;\n            }\n        }\n        /** @member {d3.selection} */\n        this.selector = null;\n        /**\n         * If this is an interactive widget, it will contain a button or menu instance that handles the interactivity.\n         *   There is a 1-to-1 relationship of toolbar widget to button\n         * @member {null|Button}\n         */\n        this.button = null;\n        /**\n         * If any single widget is marked persistent, it will bubble up to prevent automatic hide behavior on a\n         *   widget's parent toolbar. Check via `shouldPersist`\n         * @protected\n         * @member {Boolean}\n         */\n        this.persist = false;\n        if (!this.layout.position) {\n            this.layout.position = 'left';\n        }\n    }\n\n    /**\n     * Perform all rendering of widget, including toggling visibility to true. Will initialize and create SVG element\n     *   if necessary, as well as updating with new data and performing layout actions.\n     */\n    show() {\n        if (!this.parent || !this.parent.selector) {\n            return;\n        }\n        if (!this.selector) {\n            const group_position = (['start', 'middle', 'end'].includes(this.layout.group_position) ? ` lz-toolbar-group-${this.layout.group_position}` : '');\n            this.selector = this.parent.selector.append('div')\n                .attr('class', `lz-toolbar-${this.layout.position}${group_position}`);\n            if (this.layout.style) {\n                applyStyles(this.selector, this.layout.style);\n            }\n            if (typeof this.initialize == 'function') {\n                this.initialize();\n            }\n        }\n        if (this.button && this.button.status === 'highlighted') {\n            this.button.menu.show();\n        }\n        this.selector.style('visibility', 'visible');\n        this.update();\n        return this.position();\n    }\n\n    /**\n     * Update the toolbar widget with any new data or plot state as appropriate. This method performs all\n     *  necessary rendering steps.\n     */\n    update() { /* stub */\n    }\n\n    /**\n     * Place the widget correctly in the plot\n     * @returns {BaseWidget}\n     */\n    position() {\n        if (this.button) {\n            this.button.menu.position();\n        }\n        return this;\n    }\n\n    /**\n     * Determine whether the widget should persist (will bubble up to parent toolbar)\n     * @returns {boolean}\n     */\n    shouldPersist() {\n        if (this.persist) {\n            return true;\n        }\n        return !!(this.button && this.button.persist);\n    }\n\n    /**\n     * Toggle visibility to hidden, unless marked as persistent\n     * @returns {BaseWidget}\n     */\n    hide() {\n        if (!this.selector || this.shouldPersist()) {\n            return this;\n        }\n        if (this.button) {\n            this.button.menu.hide();\n        }\n        this.selector.style('visibility', 'hidden');\n        return this;\n    }\n\n    /**\n     * Completely remove widget and button. (may be overridden by persistence settings)\n     * @param {Boolean} [force=false] If true, will ignore persistence settings and always destroy the toolbar\n     * @returns {Toolbar}\n     */\n    destroy(force) {\n        if (typeof force == 'undefined') {\n            force = false;\n        }\n        if (!this.selector) {\n            return this;\n        }\n        if (this.shouldPersist() && !force) {\n            return this;\n        }\n        if (this.button && this.button.menu) {\n            this.button.menu.destroy();\n        }\n        this.selector.remove();\n        this.selector = null;\n        this.button = null;\n        return this;\n    }\n}\n\n/**\n * Plots and panels may have a \"toolbar\" element suited for showing HTML widgets that may be interactive.\n *   When widgets need to incorporate a generic button, or additionally a button that generates a menu, this\n *   class provides much of the necessary framework.\n * @param {BaseWidget} parent\n */\nclass Button {\n    constructor(parent) {\n        if (!(parent instanceof BaseWidget)) {\n            throw new Error('Unable to create toolbar widget button, invalid parent');\n        }\n        /** @member {BaseWidget} */\n        this.parent = parent;\n        /** @member {Panel} */\n        this.parent_panel = this.parent.parent_panel;\n        /** @member {Plot} */\n        this.parent_plot = this.parent.parent_plot;\n        /** @member {Plot|Panel} */\n        this.parent_svg = this.parent.parent_svg;\n\n        /** @member {Toolbar|null|*} */\n        this.parent_toolbar = this.parent.parent;\n        /** @member {d3.selection} */\n        this.selector = null;\n\n        /**\n         * Tag to use for the button (default: a)\n         * @member {String}\n         */\n        this.tag = 'a';\n\n        /**\n         * HTML for the button to show.\n         * @protected\n         * @member {String}\n         */\n        this.html = '';\n\n        /**\n         * Mouseover title text for the button to show\n         * @protected\n         * @member {String}\n         */\n        this.title = '';\n\n        /**\n         * Color of the button\n         * @member {String}\n         */\n        this.color = 'gray';\n\n        /**\n         * Hash of arbitrary button styles to apply as {name: value} entries\n         * @protected\n         * @member {Object}\n         */\n        this.style = {};\n\n        // Permanence\n        /**\n         * Track internal state on whether to keep showing the button/ menu contents at the moment\n         * @protected\n         * @member {Boolean}\n         */\n        this.persist = false;\n        /**\n         * Configuration when defining a button: track whether this widget should be allowed to keep open\n         *   menu/button contents in response to certain events\n         * @protected\n         * @member {Boolean}\n         */\n        this.permanent = false;\n\n        /**\n         * Button status (highlighted / disabled/ etc)\n         * @protected\n         * @member {String}\n         */\n        this.status = '';\n\n        /**\n         * Button Menu Object\n         * The menu is an HTML overlay that can appear below a button. It can contain arbitrary HTML and\n         *   has logic to be automatically positioned and sized to behave more or less like a dropdown menu.\n         * @member {Object}\n         */\n        this.menu = {\n            outer_selector: null,\n            inner_selector: null,\n            scroll_position: 0,\n            hidden: true,\n            /**\n             * Show the button menu, including setting up any DOM elements needed for first rendering\n             */\n            show: () => {\n                if (!this.menu.outer_selector) {\n                    this.menu.outer_selector = d3.select(this.parent_plot.svg.node().parentNode).append('div')\n                        .attr('class', `lz-toolbar-menu lz-toolbar-menu-${this.color}`)\n                        .attr('id', `${this.parent_svg.getBaseId()}.toolbar.menu`);\n                    this.menu.inner_selector = this.menu.outer_selector.append('div')\n                        .attr('class', 'lz-toolbar-menu-content');\n                    this.menu.inner_selector.on('scroll', () => {\n                        this.menu.scroll_position = this.menu.inner_selector.node().scrollTop;\n                    });\n                }\n                this.menu.outer_selector.style('visibility', 'visible');\n                this.menu.hidden = false;\n                return this.menu.update();\n            },\n            /**\n             * Update the rendering of the menu\n             */\n            update: () => {\n                if (!this.menu.outer_selector) {\n                    return this.menu;\n                }\n                this.menu.populate(); // This function is stubbed for all buttons by default and custom implemented in widget definition\n                if (this.menu.inner_selector) {\n                    this.menu.inner_selector.node().scrollTop = this.menu.scroll_position;\n                }\n                return this.menu.position();\n            },\n            position: () => {\n                if (!this.menu.outer_selector) {\n                    return this.menu;\n                }\n                // Unset any explicitly defined outer selector height so that menus dynamically shrink if content is removed\n                this.menu.outer_selector.style('height', null);\n                const padding = 3;\n                const scrollbar_padding = 20;\n                const menu_height_padding = 14; // 14: 2x 6px padding, 2x 1px border\n                const page_origin = this.parent_svg._getPageOrigin();\n                const page_scroll_top = document.documentElement.scrollTop || document.body.scrollTop;\n                const container_offset = this.parent_plot.getContainerOffset();\n                const toolbar_client_rect = this.parent_toolbar.selector.node().getBoundingClientRect();\n                const button_client_rect = this.selector.node().getBoundingClientRect();\n                const menu_client_rect = this.menu.outer_selector.node().getBoundingClientRect();\n                const total_content_height = this.menu.inner_selector.node().scrollHeight;\n                let top;\n                let left;\n                if (this.parent_toolbar.type === 'panel') {\n                    top = (page_origin.y + toolbar_client_rect.height + (2 * padding));\n                    left = Math.max(page_origin.x + this.parent_svg.layout.width - menu_client_rect.width - padding, page_origin.x + padding);\n                } else {\n                    top = button_client_rect.bottom + page_scroll_top + padding - container_offset.top;\n                    left = Math.max(button_client_rect.left + button_client_rect.width - menu_client_rect.width - container_offset.left, page_origin.x + padding);\n                }\n                const base_max_width = Math.max(this.parent_svg.layout.width - (2 * padding) - scrollbar_padding, scrollbar_padding);\n                const container_max_width = base_max_width;\n                const content_max_width = (base_max_width - (4 * padding));\n                const base_max_height = Math.max(this.parent_svg.layout.height - (10 * padding) - menu_height_padding, menu_height_padding);\n                const height = Math.min(total_content_height, base_max_height);\n                this.menu.outer_selector\n                    .style('top', `${top.toString()}px`)\n                    .style('left', `${left.toString()}px`)\n                    .style('max-width', `${container_max_width.toString()}px`)\n                    .style('max-height', `${base_max_height.toString()}px`)\n                    .style('height', `${height.toString()}px`);\n                this.menu.inner_selector\n                    .style('max-width', `${content_max_width.toString()}px`);\n                this.menu.inner_selector.node().scrollTop = this.menu.scroll_position;\n                return this.menu;\n            },\n            hide: () => {\n                if (!this.menu.outer_selector) {\n                    return this.menu;\n                }\n                this.menu.outer_selector.style('visibility', 'hidden');\n                this.menu.hidden = true;\n                return this.menu;\n            },\n            destroy: () => {\n                if (!this.menu.outer_selector) {\n                    return this.menu;\n                }\n                this.menu.inner_selector.remove();\n                this.menu.outer_selector.remove();\n                this.menu.inner_selector = null;\n                this.menu.outer_selector = null;\n                return this.menu;\n            },\n            /**\n             * Internal method definition\n             * By convention populate() does nothing and should be reimplemented with each toolbar button definition\n             *   Reimplement by way of Toolbar.BaseWidget.Button.menu.setPopulate to define the populate method and hook\n             *   up standard menu click-toggle behavior prototype.\n             * @protected\n             */\n            populate: () => {\n                throw new Error('Method must be implemented');\n            },\n            /**\n             * Define how the menu is populated with items, and set up click and display properties as appropriate\n             * @public\n             */\n            setPopulate: (menu_populate_function) => {\n                if (typeof menu_populate_function == 'function') {\n                    this.menu.populate = menu_populate_function;\n                    this.setOnclick(() => {\n                        if (this.menu.hidden) {\n                            this.menu.show();\n                            this.highlight().update();\n                            this.persist = true;\n                        } else {\n                            this.menu.hide();\n                            this.highlight(false).update();\n                            if (!this.permanent) {\n                                this.persist = false;\n                            }\n                        }\n                    });\n                } else {\n                    this.setOnclick();\n                }\n                return this;\n            },\n        };\n    }\n\n    /**\n     * Set the color associated with this button\n     * @param {('gray'|'red'|'orange'|'yellow'|'green'|'blue'|'purple')} color Any selection not in the preset list\n     *   will be replaced with gray.\n     * @returns {Button}\n     */\n    setColor (color) {\n        if (typeof color != 'undefined') {\n            if (['gray', 'red', 'orange', 'yellow', 'green', 'blue', 'purple'].includes(color)) {\n                this.color = color;\n            } else {\n                this.color = 'gray';\n            }\n        }\n        return this;\n    }\n\n\n    /**\n     * Allow code to change whether the button is allowed to be `permanent`\n     * @param {boolean} bool\n     * @returns {Button}\n     */\n    setPermanent (bool) {\n        if (typeof bool == 'undefined') {\n            bool = true;\n        } else {\n            bool = Boolean(bool);\n        }\n        this.permanent = bool;\n        if (this.permanent) {\n            this.persist = true;\n        }\n        return this;\n    }\n    /**\n     * Determine whether the button/menu contents should persist in response to a specific event\n     * @returns {Boolean}\n     */\n    shouldPersist () {\n        return this.permanent || this.persist;\n    }\n\n    /**\n * Set a collection of custom styles to be used by the button\n * @param {Object} style Hash of {name:value} entries\n * @returns {Button}\n */\n    setStyle (style) {\n        if (typeof style != 'undefined') {\n            this.style = style;\n        }\n        return this;\n    }\n\n    //\n    /**\n     * Method to generate a CSS class string\n     * @returns {string}\n     */\n    getClass () {\n        const group_position = (['start', 'middle', 'end'].includes(this.parent.layout.group_position) ? ` lz-toolbar-button-group-${this.parent.layout.group_position}` : '');\n        return `lz-toolbar-button lz-toolbar-button-${this.color}${this.status ? `-${this.status}` : ''}${group_position}`;\n    }\n\n\n    /**\n     * Change button state\n     * @param {('highlighted'|'disabled'|'')} status\n     */\n    setStatus  (status) {\n        if (typeof status != 'undefined' && ['', 'highlighted', 'disabled'].includes(status)) {\n            this.status = status;\n        }\n        return this.update();\n    }\n\n    /**\n     * Toggle whether the button is highlighted\n     * @param {boolean} bool If provided, explicitly set highlighted state\n     * @returns {Button}\n     */\n    highlight (bool) {\n        if (typeof bool == 'undefined') {\n            bool = true;\n        } else {\n            bool = Boolean(bool);\n        }\n        if (bool) {\n            return this.setStatus('highlighted');\n        } else if (this.status === 'highlighted') {\n            return this.setStatus('');\n        }\n        return this;\n    }\n\n    /**\n     * Toggle whether the button is disabled\n     * @param {boolean} bool If provided, explicitly set disabled state\n     * @returns {Button}\n     */\n    disable (bool) {\n        if (typeof bool == 'undefined') {\n            bool = true;\n        } else {\n            bool = Boolean(bool);\n        }\n        if (bool) {\n            return this.setStatus('disabled');\n        } else if (this.status === 'disabled') {\n            return this.setStatus('');\n        }\n        return this;\n    }\n\n    // Mouse events\n    /** @member {function} */\n    onmouseover () {\n    }\n    setOnMouseover (onmouseover) {\n        if (typeof onmouseover == 'function') {\n            this.onmouseover = onmouseover;\n        } else {\n            this.onmouseover = function () {};\n        }\n        return this;\n    }\n    /** @member {function} */\n    onmouseout () {\n    }\n    setOnMouseout (onmouseout) {\n        if (typeof onmouseout == 'function') {\n            this.onmouseout = onmouseout;\n        } else {\n            this.onmouseout = function () {};\n        }\n        return this;\n    }\n    /** @member {function} */\n    onclick () {\n    }\n    setOnclick (onclick) {\n        if (typeof onclick == 'function') {\n            this.onclick = onclick;\n        } else {\n            this.onclick = function () {};\n        }\n        return this;\n    }\n\n    /**\n     * Set the mouseover title text for the button (if any)\n     * @param {String} title Simple text to display\n     * @returns {Button}\n     */\n    setTitle(title) {\n        if (typeof title != 'undefined') {\n            this.title = title.toString();\n        }\n        return this;\n    }\n\n    /**\n     * Specify the HTML content of this button.\n     * WARNING: The string provided will be inserted into the document as raw markup; XSS mitigation is the\n     *   responsibility of each button implementation.\n     * @param {String} html\n     * @returns {Button}\n     */\n    setHtml(html) {\n        if (typeof html != 'undefined') {\n            this.html = html.toString();\n        }\n        return this;\n    }\n\n    // Primary behavior functions\n    /**\n     * Show the button, including creating DOM elements if necessary for first render\n     */\n    show () {\n        if (!this.parent) {\n            return;\n        }\n        if (!this.selector) {\n            this.selector = this.parent.selector.append(this.tag)\n                .attr('class', this.getClass());\n        }\n        return this.update();\n    }\n\n    /**\n     * Hook for any actions or state cleanup to be performed before rerendering\n     * @returns {Button}\n     */\n    preUpdate () {\n        return this;\n    }\n\n    /**\n     * Update button state and contents, and fully rerender\n     * @returns {Button}\n     */\n    update () {\n        if (!this.selector) {\n            return this;\n        }\n        this.preUpdate();\n        this.selector\n            .attr('class', this.getClass())\n            .attr('title', this.title)\n            .on('mouseover', (this.status === 'disabled') ? null : this.onmouseover)\n            .on('mouseout', (this.status === 'disabled') ? null : this.onmouseout)\n            .on('click', (this.status === 'disabled') ? null : this.onclick)\n            .html(this.html)\n            .call(applyStyles, this.style);\n\n        this.menu.update();\n        this.postUpdate();\n        return this;\n    }\n\n    /**\n     * Hook for any behavior to be added/changed after the button has been re-rendered\n     * @returns {Button}\n     */\n    postUpdate () {\n        return this;\n    }\n\n    /**\n     * Hide the button by removing it from the DOM (may be overridden by current persistence setting)\n     * @returns {Button}\n     */\n    hide() {\n        if (this.selector && !this.shouldPersist()) {\n            this.selector.remove();\n            this.selector = null;\n        }\n        return this;\n    }\n\n}\n\n/**\n * Renders arbitrary text with title formatting\n * @param {object} layout\n * @param {string} layout.title Text to render\n */\nclass Title extends BaseWidget {\n    show() {\n        if (!this.div_selector) {\n            this.div_selector = this.parent.selector.append('div')\n                .attr('class', `lz-toolbar-title lz-toolbar-${this.layout.position}`);\n            this.title_selector = this.div_selector.append('h3');\n        }\n        return this.update();\n    }\n\n    update() {\n        let title = this.layout.title.toString();\n        if (this.layout.subtitle) {\n            title += ` <small>${this.layout.subtitle}</small>`;\n        }\n        this.title_selector.html(title);\n        return this;\n    }\n}\n\n/**\n * Renders text to display the current dimensions of the plot. Automatically updated as plot dimensions change\n */\nclass Dimensions extends BaseWidget {\n    update() {\n        const display_width = !this.parent_plot.layout.width.toString().includes('.') ? this.parent_plot.layout.width : this.parent_plot.layout.width.toFixed(2);\n        const display_height = !this.parent_plot.layout.height.toString().includes('.') ? this.parent_plot.layout.height : this.parent_plot.layout.height.toFixed(2);\n        this.selector.html(`${display_width}px × ${display_height}px`);\n        if (this.layout.class) {\n            this.selector.attr('class', this.layout.class);\n        }\n        if (this.layout.style) {\n            applyStyles(this.selector, this.layout.style);\n        }\n        return this;\n    }\n}\n\n/**\n * Display the current scale of the genome region displayed in the plot, as defined by the difference between\n *  `state.end` and `state.start`.\n */\nclass RegionScale extends BaseWidget {\n    update() {\n        if (!isNaN(this.parent_plot.state.start) && !isNaN(this.parent_plot.state.end)\n            && this.parent_plot.state.start !== null && this.parent_plot.state.end !== null) {\n            this.selector.style('display', null);\n            this.selector.html(positionIntToString(this.parent_plot.state.end - this.parent_plot.state.start, null, true));\n        } else {\n            this.selector.style('display', 'none');\n        }\n        if (this.layout.class) {\n            this.selector.attr('class', this.layout.class);\n        }\n        if (this.layout.style) {\n            applyStyles(this.selector, this.layout.style);\n        }\n        return this;\n    }\n}\n\n/**\n * Button to export current plot to an SVG image\n */\nclass DownloadSVG extends BaseWidget {\n    /**\n     * @param {string} [layout.button_html=\"Download SVG\"]\n     * @param {string} [layout.button_title=\"Download image of the current plot as locuszoom.svg\"]\n     * @param {string} [layout.filename=\"locuszoom.svg\"] The default filename to use when saving the image\n    */\n    constructor(layout, parent) {\n        super(layout, parent);\n        this._filename = this.layout.filename || 'locuszoom.svg';\n        this._button_html = this.layout.button_html || 'Save as SVG';\n        this._button_title = this.layout.button_title || 'Download hi-res image';\n    }\n\n    update() {\n        if (this.button) {\n            return this;\n        }\n        this.button = new Button(this)\n            .setColor(this.layout.color)\n            .setHtml(this._button_html)\n            .setTitle(this._button_title)\n            .setOnMouseover(() => {\n                this.button.selector\n                    .classed('lz-toolbar-button-gray-disabled', true)\n                    .html('Preparing Image');\n                this._getBlobUrl().then((url) => {\n                    const old = this.button.selector.attr('href');\n                    if (old) {\n                        // Clean up old url instance to prevent memory leaks\n                        URL.revokeObjectURL(old);\n                    }\n                    this.button.selector\n                        .attr('href', url)\n                        .classed('lz-toolbar-button-gray-disabled', false)\n                        .classed('lz-toolbar-button-gray-highlighted', true)\n                        .html(this._button_html);\n                });\n            })\n            .setOnMouseout(() => {\n                this.button.selector.classed('lz-toolbar-button-gray-highlighted', false);\n            });\n        this.button.show();\n        this.button.selector\n            .attr('href-lang', 'image/svg+xml')\n            .attr('download', this._filename);\n        return this;\n    }\n\n    /**\n     * Extract all CSS rules whose selectors directly reference elements under the root node\n     * @param {Element} root\n     * @return {string}\n     * @private\n     */\n    _getCSS(root) {\n        // Hack: this method is based on text matching the rules on a given node; it doesn't handle, eg ancestors.\n        // Since all LZ cssRules are written as \"svg .classname\", we need to strip the parent selector prefix in order\n        // to extract CSS.\n        const ancestor_pattern = /^svg\\.lz-locuszoom\\s*/;\n\n        // Extract all relevant CSS Rules by iterating through all available stylesheets\n        let extractedCSSText = '';\n        for (let i = 0; i < document.styleSheets.length; i++) {\n            const s = document.styleSheets[i];\n            try {\n                if (!s.cssRules) {\n                    continue;\n                }\n            } catch ( e ) {\n                if (e.name !== 'SecurityError') {\n                    throw e;\n                } // for Firefox\n                continue;\n            }\n            let cssRules = s.cssRules;\n            for (let i = 0; i < cssRules.length; i++) {\n                // FIXME: We could write smaller SVGs by extracting only the exact CSS rules for this plot. However,\n                //   extracting rules (including parent selectors) is a finicky process\n                // Instead just fetch all LZ plot rules, under a known hardcoded parent selector.\n                const rule = cssRules[i];\n                const is_match = (rule.selectorText && rule.selectorText.match(ancestor_pattern));\n                if (is_match) {\n                    extractedCSSText += rule.cssText;\n                }\n            }\n        }\n        return extractedCSSText;\n    }\n\n    _appendCSS( cssText, element ) {\n        // Append styles to the constructed SVG DOM node\n        var styleElement = document.createElement('style');\n        styleElement.setAttribute('type', 'text/css');\n        styleElement.innerHTML = cssText;\n        var refNode = element.hasChildNodes() ? element.children[0] : null;\n        element.insertBefore( styleElement, refNode );\n    }\n\n    /**\n     * Get the target dimensions for the rendered image.\n     *\n     * For non-vector displays, these dimensions will yield ~300 DPI image for an 8\" wide print figure.\n     * @return {number[]}\n     * @private\n     */\n    _getDimensions() {\n        let { width, height } = this.parent_plot.svg.node().getBoundingClientRect();\n        const target_width = 2400;\n        const rescale = target_width / width;\n        return [rescale * width, rescale * height];\n    }\n\n    _generateSVG () {\n        return new Promise((resolve) => {\n            // Copy the DOM node so that we can modify the image for publication\n            let copy = this.parent_plot.svg.node().cloneNode(true);\n            copy.setAttribute('xlink', 'http://www.w3.org/1999/xlink');\n            copy = d3.select(copy);\n\n            // Remove unnecessary elements\n            copy.selectAll('g.lz-curtain').remove();\n            copy.selectAll('g.lz-mouse_guide').remove();\n            // Convert units on axis tick dy attributes from ems to pixels\n            copy.selectAll('g.tick text').each(function() {\n                const dy = +(d3.select(this).attr('dy').substring(-2).slice(0, -2)) * 10;\n                d3.select(this).attr('dy', dy);\n            });\n            // Pull the svg into a string and add the contents of the locuszoom stylesheet\n            // Don't add this with d3 because it will escape the CDATA declaration incorrectly\n            const serializer = new XMLSerializer();\n\n            copy = copy.node();\n\n            // Firefox has issues saving the SVG in certain contexts (esp rendering to canvas) unless a width is given.\n            //  See: https://bugzilla.mozilla.org/show_bug.cgi?id=700533\n            const [width, height] = this._getDimensions();\n            copy.setAttribute('width', width);\n            copy.setAttribute('height', height);\n\n            // Add CSS to the node\n            this._appendCSS(this._getCSS(copy), copy);\n            let svg_markup = serializer.serializeToString(copy);\n            resolve(svg_markup);\n        });\n    }\n\n    /**\n     * Converts the SVG string into a downloadable binary object\n     * @return {Promise}\n     */\n    _getBlobUrl() {\n        return this._generateSVG().then((markup) => {\n            const blob = new Blob([markup], { type: 'image/svg+xml' });\n            return URL.createObjectURL(blob);\n        });\n    }\n}\n\nclass DownloadPNG extends DownloadSVG {\n    constructor(layout, parent) {\n        super(...arguments);\n        this._filename = this.layout.filename || 'locuszoom.png';\n        this._button_html = this.layout.button_html || 'Save as PNG';\n        this._button_title = this.layout.button_title || 'Download image';\n    }\n\n    _getBlobUrl() {\n        return super._getBlobUrl().then((svg_url) => {\n            const canvas = document.createElement('canvas');\n            const context = canvas.getContext('2d');\n\n            const [width, height] = this._getDimensions();\n\n            canvas.width = width;\n            canvas.height = height;\n\n            return new Promise((resolve, reject) => {\n                const image = new Image();\n                image.onload = () => {\n                    context.drawImage(image, 0, 0, width, height);\n                    // Once canvas rendered, revoke svg blob to avoid memory leaks, and create new url for the canvas\n                    URL.revokeObjectURL(svg_url);\n                    canvas.toBlob((png) => {\n                        resolve(URL.createObjectURL(png));\n                    });\n                };\n                image.src = svg_url;\n            });\n        });\n    }\n}\n\n/**\n * Button to remove panel from plot.\n *   NOTE: Will only work on panel widgets.\n * @param {Boolean} [layout.suppress_confirm=false] If true, removes the panel without prompting user for confirmation\n */\nclass RemovePanel extends BaseWidget {\n    update() {\n        if (this.button) {\n            return this;\n        }\n        this.button = new Button(this)\n            .setColor(this.layout.color)\n            .setHtml('×')\n            .setTitle('Remove panel')\n            .setOnclick(() => {\n                if (!this.layout.suppress_confirm && !confirm('Are you sure you want to remove this panel? This cannot be undone!')) {\n                    return false;\n                }\n                const panel = this.parent_panel;\n                panel.toolbar.hide(true);\n                d3.select(panel.parent.svg.node().parentNode).on(`mouseover.${panel.getBaseId()}.toolbar`, null);\n                d3.select(panel.parent.svg.node().parentNode).on(`mouseout.${panel.getBaseId()}.toolbar`, null);\n                return panel.parent.removePanel(panel.id);\n            });\n        this.button.show();\n        return this;\n    }\n}\n\n/**\n * Button to move panel up relative to other panels (in terms of y-index on the page)\n *   NOTE: Will only work on panel widgets.\n */\nclass MovePanelUp extends BaseWidget {\n    update () {\n        if (this.button) {\n            const is_at_top = (this.parent_panel.layout.y_index === 0);\n            this.button.disable(is_at_top);\n            return this;\n        }\n        this.button = new Button(this)\n            .setColor(this.layout.color)\n            .setHtml('▴')\n            .setTitle('Move panel up')\n            .setOnclick(() => {\n                this.parent_panel.moveUp();\n                this.update();\n            });\n        this.button.show();\n        return this.update();\n    }\n}\n\n/**\n * Button to move panel down relative to other panels (in terms of y-index on the page)\n *   NOTE: Will only work on panel widgets.\n */\nclass MovePanelDown extends BaseWidget {\n    update () {\n        if (this.button) {\n            const is_at_bottom = (this.parent_panel.layout.y_index === this.parent_plot.panel_ids_by_y_index.length - 1);\n            this.button.disable(is_at_bottom);\n            return this;\n        }\n        this.button = new Button(this)\n            .setColor(this.layout.color)\n            .setHtml('▾')\n            .setTitle('Move panel down')\n            .setOnclick(() => {\n                this.parent_panel.moveDown();\n                this.update();\n            });\n        this.button.show();\n        return this.update();\n    }\n}\n\n/**\n * Button to shift plot region forwards or back by a `step` increment provided in the layout\n * @param {object} layout\n * @param {number} [layout.step=50000] The stepsize to change the region by\n * @param {string} [layout.button_html]\n * @param {string} [layout.button_title]\n */\nclass ShiftRegion extends BaseWidget {\n    constructor(layout, parent) {\n        if (isNaN(layout.step) || layout.step === 0) {\n            layout.step = 50000;\n        }\n        if (typeof layout.button_html !== 'string') {\n            layout.button_html = layout.step > 0 ? '>' : '<';\n        }\n\n        if (typeof layout.button_title !== 'string') {\n            layout.button_title = `Shift region by ${layout.step > 0 ? '+' : '-'}${positionIntToString(Math.abs(layout.step), null, true)}`;\n        }\n        super(layout, parent);\n        if (isNaN(this.parent_plot.state.start) || isNaN(this.parent_plot.state.end)) {\n            throw new Error('Unable to add shift_region toolbar widget: plot state does not have region bounds');\n        }\n\n\n    }\n\n    update () {\n        if (this.button) {\n            return this;\n        }\n        this.button = new Button(this)\n            .setColor(this.layout.color)\n            .setHtml(this.layout.button_html)\n            .setTitle(this.layout.button_title)\n            .setOnclick(() => {\n                this.parent_plot.applyState({\n                    start: Math.max(this.parent_plot.state.start + this.layout.step, 1),\n                    end: this.parent_plot.state.end + this.layout.step,\n                });\n            });\n        this.button.show();\n        return this;\n    }\n}\n\n/**\n * Zoom in or out on the plot, centered on the middle of the plot region, by the specified amount\n * @param {object} layout\n * @param {number} [layout.step=0.2] The amount to zoom in by (where 1 indicates 100%)\n */\nclass ZoomRegion extends BaseWidget {\n    constructor(layout, parent) {\n        if (isNaN(layout.step) || layout.step === 0) {\n            layout.step = 0.2;\n        }\n        if (typeof layout.button_html != 'string') {\n            layout.button_html = layout.step > 0 ? 'z–' : 'z+';\n        }\n        if (typeof layout.button_title != 'string') {\n            layout.button_title = `Zoom region ${layout.step > 0 ? 'out' : 'in'} by ${(Math.abs(layout.step) * 100).toFixed(1)}%`;\n        }\n\n        super(layout, parent);\n        if (isNaN(this.parent_plot.state.start) || isNaN(this.parent_plot.state.end)) {\n            throw new Error('Unable to add zoom_region toolbar widget: plot state does not have region bounds');\n        }\n    }\n\n    update () {\n        if (this.button) {\n            let can_zoom = true;\n            const current_region_scale = this.parent_plot.state.end - this.parent_plot.state.start;\n            if (this.layout.step > 0 && !isNaN(this.parent_plot.layout.max_region_scale) && current_region_scale >= this.parent_plot.layout.max_region_scale) {\n                can_zoom = false;\n            }\n            if (this.layout.step < 0 && !isNaN(this.parent_plot.layout.min_region_scale) && current_region_scale <= this.parent_plot.layout.min_region_scale) {\n                can_zoom = false;\n            }\n            this.button.disable(!can_zoom);\n            return this;\n        }\n        this.button = new Button(this)\n            .setColor(this.layout.color)\n            .setHtml(this.layout.button_html)\n            .setTitle(this.layout.button_title)\n            .setOnclick(() => {\n                const current_region_scale = this.parent_plot.state.end - this.parent_plot.state.start;\n                const zoom_factor = 1 + this.layout.step;\n                let new_region_scale = current_region_scale * zoom_factor;\n                if (!isNaN(this.parent_plot.layout.max_region_scale)) {\n                    new_region_scale = Math.min(new_region_scale, this.parent_plot.layout.max_region_scale);\n                }\n                if (!isNaN(this.parent_plot.layout.min_region_scale)) {\n                    new_region_scale = Math.max(new_region_scale, this.parent_plot.layout.min_region_scale);\n                }\n                const delta = Math.floor((new_region_scale - current_region_scale) / 2);\n                this.parent_plot.applyState({\n                    start: Math.max(this.parent_plot.state.start - delta, 1),\n                    end: this.parent_plot.state.end + delta,\n                });\n            });\n        this.button.show();\n        return this;\n    }\n}\n\n/**\n * Renders button with arbitrary text that, when clicked, shows a dropdown containing arbitrary HTML\n *  NOTE: Trusts content exactly as given. XSS prevention is the responsibility of the implementer.\n * @param {object} layout\n * @param {string} layout.button_html The HTML to render inside the button\n * @param {string} layout.button_title Text to display as a tooltip when hovering over the button\n * @param {string} layout.menu_html The HTML content of the dropdown menu\n */\nclass Menu extends BaseWidget {\n    update() {\n        if (this.button) {\n            return this;\n        }\n        this.button = new Button(this)\n            .setColor(this.layout.color)\n            .setHtml(this.layout.button_html)\n            .setTitle(this.layout.button_title);\n        this.button.menu.setPopulate(() => {\n            this.button.menu.inner_selector.html(this.layout.menu_html);\n        });\n        this.button.show();\n        return this;\n    }\n}\n\n/**\n * Button to resize panel height to fit available data (eg when showing a list of tracks)\n * @param {string} [layout.button_html=\"Resize to Data\"]\n * @param {string} [layout.button_title]\n */\nclass ResizeToData extends BaseWidget {\n    update() {\n        if (this.button) {\n            return this;\n        }\n        this.button = new Button(this)\n            .setColor(this.layout.color)\n            .setHtml(this.layout.button_html || 'Resize to Data')\n            .setTitle(this.layout.button_title || 'Automatically resize this panel to show all data available')\n            .setOnclick(() => {\n                this.parent_panel.scaleHeightToData();\n                this.update();\n            });\n        this.button.show();\n        return this;\n    }\n}\n\n/**\n * Button to toggle legend\n */\nclass ToggleLegend extends BaseWidget {\n    update() {\n        const html = this.parent_panel.legend.layout.hidden ? 'Show Legend' : 'Hide Legend';\n        if (this.button) {\n            this.button.setHtml(html).show();\n            this.parent.position();\n            return this;\n        }\n        this.button = new Button(this)\n            .setColor(this.layout.color)\n            .setTitle('Show or hide the legend for this panel')\n            .setOnclick(() => {\n                this.parent_panel.legend.layout.hidden = !this.parent_panel.legend.layout.hidden;\n                this.parent_panel.legend.render();\n                this.update();\n            });\n        return this.update();\n    }\n}\n\n/**\n * Dropdown menu allowing the user to choose between different display options for a single specific data layer\n *  within a panel.\n *\n * This allows controlling how points on a datalayer can be displayed- any display options supported via the layout for the target datalayer. This includes point\n *  size/shape, coloring, etc.\n *\n * This button intentionally limits display options it can control to those available on common plot types.\n *   Although the list of options it sets can be overridden (to control very special custom plot types), this\n *   capability should be used sparingly if at all.\n *\n * @param {object} layout\n * @param {String} [layout.button_html=\"Display options...\"] Text to display on the toolbar button\n * @param {String} [layout.button_title=\"Control how plot items are displayed\"] Hover text for the toolbar button\n * @param {string} layout.layer_name Specify the datalayer that this button should affect\n * @param {string} [layout.default_config_display_name] Store the default configuration for this datalayer\n *  configuration, and show a button to revert to the \"default\" (listing the human-readable display name provided)\n * @param {Array} [layout.fields_whitelist='see code'] The list of presentation fields that this button can control.\n *  This can be overridden if this button needs to be used on a custom layer type with special options.\n * @typedef {{display_name: string, display: Object}} DisplayOptionsButtonConfigField\n * @param {DisplayOptionsButtonConfigField[]} layout.options Specify a label and set of layout directives associated\n *  with this `display` option. Display field should include all changes to datalayer presentation options.\n */\nclass DisplayOptions extends BaseWidget {\n    constructor(layout, parent) {\n        if (typeof layout.button_html != 'string') {\n            layout.button_html = 'Display options...';\n        }\n        if (typeof layout.button_title != 'string') {\n            layout.button_title = 'Control how plot items are displayed';\n        }\n        super(...arguments);\n\n        // List of layout fields that this button is allowed to control. This ensures that we don't override any other\n        //  information (like plot height etc) while changing point rendering\n        const allowed_fields = layout.fields_whitelist || ['color', 'fill_opacity', 'filters', 'label', 'legend',\n            'point_shape', 'point_size', 'tooltip', 'tooltip_positioning'];\n\n        const dataLayer = this.parent_panel.data_layers[layout.layer_name];\n        if (!dataLayer) {\n            throw new Error(`Display options could not locate the specified layer_name: '${layout.layer_name}'`);\n        }\n        const dataLayerLayout = dataLayer.layout;\n\n        // Store default configuration for the layer as a clean deep copy, so we may revert later\n        const defaultConfig = {};\n        allowed_fields.forEach((name) => {\n            const configSlot = dataLayerLayout[name];\n            if (configSlot !== undefined) {\n                defaultConfig[name] =  deepCopy(configSlot);\n            }\n        });\n\n        /**\n         * Which item in the menu is currently selected. (track for rerendering menu)\n         * @member {String}\n         * @private\n         */\n        this._selected_item = 'default';\n\n        // Define the button + menu that provides the real functionality for this toolbar widget\n\n        this.button = new Button(this)\n            .setColor(layout.color)\n            .setHtml(layout.button_html)\n            .setTitle(layout.button_title)\n            .setOnclick(() => {\n                this.button.menu.populate();\n            });\n        this.button.menu.setPopulate(() => {\n            // Multiple copies of this button might be used on a single LZ page; append unique IDs where needed\n            const uniqueID = Math.floor(Math.random() * 1e4).toString();\n\n            this.button.menu.inner_selector.html('');\n            const table = this.button.menu.inner_selector.append('table');\n\n            const menuLayout = this.layout;\n\n            const renderRow = (display_name, display_options, row_id) => { // Helper method\n                const row = table.append('tr');\n                const radioId = `${uniqueID}${row_id}`;\n                row.append('td')\n                    .append('input')\n                    .attr('id', radioId)\n                    .attr('type', 'radio')\n                    .attr('name', `display-option-${uniqueID}`)\n                    .attr('value', row_id)\n                    .style('margin', 0) // Override css libraries (eg skeleton) that style form inputs\n                    .property('checked', (row_id === this._selected_item))\n                    .on('click', () => {\n                        // If an option is not specified in these display options, use the original defaults\n                        allowed_fields.forEach((field_name) => {\n                            dataLayer.layout[field_name] = display_options[field_name] || defaultConfig[field_name];\n                        });\n\n                        this._selected_item = row_id;\n                        this.parent_panel.render();\n                        const legend = this.parent_panel.legend;\n                        if (legend) {\n                            legend.render();\n                        }\n                    });\n                row.append('td').append('label')\n                    .style('font-weight', 'normal')\n                    .attr('for', radioId)\n                    .text(display_name);\n            };\n            // Render the \"display options\" menu: default and special custom options\n            const defaultName = menuLayout.default_config_display_name || 'Default style';\n            renderRow(defaultName, defaultConfig, 'default');\n            menuLayout.options.forEach((item, index) => renderRow(item.display_name, item.display, index));\n            return this;\n        });\n    }\n\n    update() {\n        this.button.show();\n        return this;\n    }\n}\n\n/**\n * Dropdown menu allowing the user to set the value of a specific `state_field` in plot.state\n * This is useful for things (like datasources) that allow dynamic configuration based on global information in state\n *\n * For example, the LDServer data source can use it to change LD reference population (for all panels) after render\n *\n * @param {object} layout\n * @param {String} [layout.button_html=\"Set option...\"] Text to display on the toolbar button\n * @param {String} [layout.button_title=\"Choose an option to customize the plot\"] Hover text for the toolbar button\n * @param {bool} [layout.show_selected=false] Whether to append the selected value to the button label\n * @param {string} [layout.state_field] The name of the field in plot.state that will be set by this button\n * @typedef {{display_name: string, value: *}} SetStateOptionsConfigField\n * @param {SetStateOptionsConfigField[]} layout.options Specify human labels and associated values for the dropdown menu\n */\nclass SetState extends BaseWidget {\n    constructor(layout, parent) {\n        if (typeof layout.button_html != 'string') {\n            layout.button_html = 'Set option...';\n        }\n        if (typeof layout.button_title != 'string') {\n            layout.button_title = 'Choose an option to customize the plot';\n        }\n\n        super(layout, parent);\n\n        if (this.parent_panel) {\n            throw new Error('This widget is designed to set global options, so it can only be used at the top (plot) level');\n        }\n        if (!layout.state_field) {\n            throw new Error('Must specify the `state_field` that this widget controls');\n        }\n\n        /**\n         * Which item in the menu is currently selected. (track for rerendering menu)\n         * @member {String}\n         * @private\n         */\n        // The first option listed is automatically assumed to be the default, unless a value exists in plot.state\n        this._selected_item = this.parent_plot.state[layout.state_field] || layout.options[0].value;\n        if (!layout.options.find((item) => {\n            return item.value === this._selected_item;\n        })) {\n            // Check only gets run at widget creation, but generally this widget is assumed to be an exclusive list of options\n            throw new Error('There is an existing state value that does not match the known values in this widget');\n        }\n\n        // Define the button + menu that provides the real functionality for this toolbar widget\n        this.button = new Button(this)\n            .setColor(layout.color)\n            .setHtml(layout.button_html + (layout.show_selected ? this._selected_item : ''))\n            .setTitle(layout.button_title)\n            .setOnclick(() => {\n                this.button.menu.populate();\n            });\n        this.button.menu.setPopulate(() => {\n            // Multiple copies of this button might be used on a single LZ page; append unique IDs where needed\n            const uniqueID = Math.floor(Math.random() * 1e4).toString();\n\n            this.button.menu.inner_selector.html('');\n            const table = this.button.menu.inner_selector.append('table');\n\n            const renderRow = (display_name, value, row_id) => { // Helper method\n                const row = table.append('tr');\n                const radioId = `${uniqueID}${row_id}`;\n                row.append('td')\n                    .append('input')\n                    .attr('id', radioId)\n                    .attr('type', 'radio')\n                    .attr('name', `set-state-${uniqueID}`)\n                    .attr('value', row_id)\n                    .style('margin', 0) // Override css libraries (eg skeleton) that style form inputs\n                    .property('checked', (value === this._selected_item))\n                    .on('click', () => {\n                        const new_state = {};\n                        new_state[layout.state_field] = value;\n                        this._selected_item = value;\n                        this.parent_plot.applyState(new_state);\n                        this.button.setHtml(layout.button_html + (layout.show_selected ? this._selected_item : ''));\n                    });\n                row.append('td').append('label')\n                    .style('font-weight', 'normal')\n                    .attr('for', radioId)\n                    .text(display_name);\n            };\n            layout.options.forEach((item, index) => renderRow(item.display_name, item.value, index));\n            return this;\n        });\n    }\n\n    update() {\n        this.button.show();\n        return this;\n    }\n}\n\n\nexport {\n    BaseWidget,  // This is used to create subclasses\n    Button as _Button, // This is used to create Widgets that contain a button. It actually shouldn't be in the registry because it's not usable directly..\n    Dimensions as dimensions,\n    DisplayOptions as display_options,\n    DownloadSVG as download,\n    DownloadPNG as download_png,\n    Menu as menu,\n    MovePanelDown as move_panel_down,\n    MovePanelUp as move_panel_up,\n    RegionScale as region_scale,\n    ResizeToData as resize_to_data,\n    SetState as set_state,\n    ShiftRegion as shift_region,\n    RemovePanel as remove_panel,\n    Title as title,\n    ToggleLegend as toggle_legend,\n    ZoomRegion as zoom_region,\n};\n","/**\n * @module\n * @private\n */\nimport {ClassRegistry} from './base';\nimport * as widgets from '../components/toolbar/widgets';\n\nconst registry = new ClassRegistry();\n\nfor (let [name, type] of Object.entries(widgets)) {\n    registry.add(name, type);\n}\n\n\nexport default registry;\n","/** @module */\nimport widgets from '../../registry/widgets';\nimport * as d3 from 'd3';\n\n/**\n * A Toolbar is an HTML element used for presenting arbitrary user interface widgets. Toolbars are anchored\n *   to either the entire Plot or to individual Panels.\n *\n * Each toolbar is an HTML-based (read: not SVG) collection of widgets used to display information or provide\n *   user interface. Toolbars can exist on entire plots, where their visibility is permanent and vertically adjacent\n *   to the plot, or on individual panels, where their visibility is tied to a behavior (e.g. a mouseover) and is as\n *   an overlay.\n *\n * This class is used internally for rendering, and is not part of the public interface\n * @private\n */\nclass Toolbar {\n    constructor(parent) {\n        // parent must be a locuszoom plot or panel\n        // if (!(parent instanceof LocusZoom.Plot) && !(parent instanceof LocusZoom.Panel)) {\n        //     throw new Error('Unable to create toolbar, parent must be a locuszoom plot or panel');\n        // }\n        /** @member {Plot|Panel} */\n        this.parent = parent;\n\n        /** @member {String} */\n        this.id = `${this.parent.getBaseId()}.toolbar`;\n\n        /** @member {('plot'|'panel')} */\n        this.type = (this.parent.parent) ? 'panel' : 'plot';\n\n        /** @member {Plot} */\n        this.parent_plot = this.parent.parent_plot;\n\n        /** @member {d3.selection} */\n        this.selector = null;\n\n        /** @member {BaseWidget[]} */\n        this.widgets = [];\n\n        /**\n         * The timer identifier as returned by setTimeout\n         * @member {Number}\n         */\n        this.hide_timeout = null;\n\n        /**\n         * Whether to hide the toolbar. Can be overridden by a child widget. Check via `shouldPersist`\n         * @protected\n         * @member {Boolean}\n         */\n        this.persist = false;\n\n        this.initialize();\n    }\n\n    /**\n     * Prepare the toolbar for first use: generate all widget instances for this toolbar, based on the provided\n     *   layout of the parent. Connects event listeners and shows/hides as appropriate.\n     * @returns {Toolbar}\n     */\n    initialize() {\n        // Parse layout to generate widget instances\n        // In LZ 0.12, `dashboard.components` was renamed to `toolbar.widgets`. Preserve a backwards-compatible alias.\n        const options = (this.parent.layout.dashboard && this.parent.layout.dashboard.components) || this.parent.layout.toolbar.widgets;\n        if (Array.isArray(options)) {\n            options.forEach((layout) => {\n                try {\n                    const widget = widgets.create(layout.type, layout, this);\n                    this.widgets.push(widget);\n                } catch (e) {\n                    console.warn('Failed to create widget');\n                    console.error(e);\n                }\n            });\n        }\n\n        // Add mouseover event handlers to show/hide panel toolbar\n        if (this.type === 'panel') {\n            d3.select(this.parent.parent.svg.node().parentNode)\n                .on(`mouseover.${this.id}`, () => {\n                    clearTimeout(this.hide_timeout);\n                    if (!this.selector || this.selector.style('visibility') === 'hidden') {\n                        this.show();\n                    }\n                }).on(`mouseout.${this.id}`, () => {\n                    clearTimeout(this.hide_timeout);\n                    this.hide_timeout = setTimeout(() => {\n                        this.hide();\n                    }, 300);\n                });\n        }\n\n        return this;\n    }\n\n    /**\n     * Whether to persist the toolbar. Returns true if at least one widget should persist, or if the panel is engaged\n     *   in an active drag event.\n     * @returns {boolean}\n     */\n    shouldPersist() {\n        if (this.persist) {\n            return true;\n        }\n        let persist = false;\n        // Persist if at least one widget should also persist\n        this.widgets.forEach((widget) => {\n            persist = persist || widget.shouldPersist();\n        });\n        // Persist if in a parent drag event\n        persist = persist || (this.parent_plot.panel_boundaries.dragging || this.parent_plot.interaction.dragging);\n        return !!persist;\n    }\n\n    /**\n     * Make the toolbar appear. If it doesn't exist yet create it, including creating/positioning all widgets within,\n     *   and make sure it is set to be visible.\n     */\n    show() {\n        if (!this.selector) {\n            switch (this.type) {\n            case 'plot':\n                this.selector = d3.select(this.parent.svg.node().parentNode)\n                    .insert('div', ':first-child');\n                break;\n            case 'panel':\n                this.selector = d3.select(this.parent.parent.svg.node().parentNode)\n                    .insert('div', '.lz-data_layer-tooltip, .lz-toolbar-menu, .lz-curtain').classed('lz-panel-toolbar', true);\n                break;\n            default:\n                throw new Error(`Toolbar cannot be a child of ${this.type}`);\n            }\n\n            this.selector\n                .classed('lz-toolbar', true)\n                .classed(`lz-${this.type}-toolbar`, true)\n                .attr('id', this.id);\n        }\n        this.widgets.forEach((widget) => widget.show());\n        this.selector.style('visibility', 'visible');\n        return this.update();\n    }\n\n\n    /**\n     * Update the toolbar and rerender all child widgets. This can be called whenever plot state changes.\n     * @returns {Toolbar}\n     */\n    update() {\n        if (!this.selector) {\n            return this;\n        }\n        this.widgets.forEach((widget) => widget.update());\n        return this.position();\n    }\n\n\n    /**\n     * Position the toolbar (and child widgets) within the panel\n     * @returns {Toolbar}\n     */\n    position() {\n        if (!this.selector) {\n            return this;\n        }\n        // Position the toolbar itself (panel only)\n        if (this.type === 'panel') {\n            const page_origin = this.parent._getPageOrigin();\n            const top = `${(page_origin.y + 3.5).toString()}px`;\n            const left = `${page_origin.x.toString()}px`;\n            const width = `${(this.parent.layout.width - 4).toString()}px`;\n            this.selector\n                .style('position', 'absolute')\n                .style('top', top)\n                .style('left', left)\n                .style('width', width);\n        }\n        // Recursively position widgets\n        this.widgets.forEach((widget) => widget.position());\n        return this;\n    }\n\n    /**\n     * Hide the toolbar (make invisible but do not destroy). Will do nothing if `shouldPersist` returns true.\n     *\n     * @returns {Toolbar}\n     */\n    hide() {\n        if (!this.selector || this.shouldPersist()) {\n            return this;\n        }\n        this.widgets.forEach((widget) => widget.hide());\n        this.selector\n            .style('visibility', 'hidden');\n        return this;\n    }\n\n    /**\n     * Completely remove toolbar and all child widgets. (may be overridden by persistence settings)\n     * @param {Boolean} [force=false] If true, will ignore persistence settings and always destroy the toolbar\n     * @returns {Toolbar}\n     */\n    destroy(force) {\n        if (typeof force == 'undefined') {\n            force = false;\n        }\n        if (!this.selector) {\n            return this;\n        }\n        if (this.shouldPersist() && !force) {\n            return this;\n        }\n        this.widgets.forEach((widget) => widget.destroy(true));\n        this.widgets = [];\n        this.selector.remove();\n        this.selector = null;\n        return this;\n    }\n}\n\n\nexport {Toolbar as default};\n","/** @module */\nimport * as d3 from 'd3';\nimport {applyStyles} from '../helpers/common';\nimport {merge, nameToSymbol} from '../helpers/layouts';\n\n/**\n * The default layout used by legends (used internally)\n * @protected\n * @member {Object}\n */\nconst default_layout = {\n    orientation: 'vertical',\n    origin: { x: 0, y: 0 },\n    width: 10,\n    height: 10,\n    padding: 5,\n    label_size: 12,\n    hidden: false,\n};\n\n/**\n * An SVG object used to display contextual information about a panel.\n * Panel layouts determine basic features of a legend - its position in the panel, orientation, title, etc.\n * Layouts of child data layers of the panel determine the actual content of the legend.\n *\n * @param {Panel} parent\n*/\nclass Legend {\n    constructor(parent) {\n        // if (!(parent instanceof LocusZoom.Panel)) {\n        //     throw new Error('Unable to create legend, parent must be a locuszoom panel');\n        // }\n        /** @member {Panel} */\n        this.parent = parent;\n        /** @member {String} */\n        this.id = `${this.parent.getBaseId()}.legend`;\n\n        this.parent.layout.legend = merge(this.parent.layout.legend || {}, default_layout);\n        /** @member {Object} */\n        this.layout = this.parent.layout.legend;\n\n        /** @member {d3.selection} */\n        this.selector = null;\n        /** @member {d3.selection} */\n        this.background_rect = null;\n        /** @member {d3.selection[]} */\n        this.elements = [];\n        /**\n         * SVG selector for the group containing all elements in the legend\n         * @protected\n         * @member {d3.selection|null}\n         */\n        this.elements_group = null;\n\n        /**\n         * TODO: Not sure if this property is used; the external-facing methods are setting `layout.hidden` instead. Tentatively mark deprecated.\n         * @deprecated\n         * @protected\n         * @member {Boolean}\n         */\n        this.hidden = false;\n\n        return this.render();\n    }\n\n    /**\n     * Render the legend in the parent panel\n     */\n    render() {\n        // Get a legend group selector if not yet defined\n        if (!this.selector) {\n            this.selector = this.parent.svg.group.append('g')\n                .attr('id', `${this.parent.getBaseId()}.legend`).attr('class', 'lz-legend');\n        }\n\n        // Get a legend background rect selector if not yet defined\n        if (!this.background_rect) {\n            this.background_rect = this.selector.append('rect')\n                .attr('width', 100)\n                .attr('height', 100)\n                .attr('class', 'lz-legend-background');\n        }\n\n        // Get a legend elements group selector if not yet defined\n        if (!this.elements_group) {\n            this.elements_group = this.selector.append('g');\n        }\n\n        // Remove all elements from the document and re-render from scratch\n        this.elements.forEach((element) => element.remove());\n        this.elements = [];\n\n        // Gather all elements from data layers in order (top to bottom) and render them\n        const padding = +this.layout.padding || 1;\n        let x = padding;\n        let y = padding;\n        let line_height = 0;\n        this.parent.data_layer_ids_by_z_index.slice().reverse().forEach((id) => {\n            if (Array.isArray(this.parent.data_layers[id].layout.legend)) {\n                this.parent.data_layers[id].layout.legend.forEach((element) => {\n                    const selector = this.elements_group.append('g')\n                        .attr('transform', `translate(${x}, ${y})`);\n                    const label_size = +element.label_size || +this.layout.label_size || 12;\n                    let label_x = 0;\n                    let label_y = (label_size / 2) + (padding / 2);\n                    line_height = Math.max(line_height, label_size + padding);\n                    // Draw the legend element symbol (line, rect, shape, etc)\n                    const shape = element.shape || '';\n                    const shape_factory = nameToSymbol(shape);\n                    if (shape === 'line') {\n                        // Line symbol\n                        const length = +element.length || 16;\n                        const path_y = (label_size / 4) + (padding / 2);\n                        selector\n                            .append('path')\n                            .attr('class', element.class || '')\n                            .attr('d', `M0,${path_y}L${length},${path_y}`)\n                            .call(applyStyles, element.style || {});\n                        label_x = length + padding;\n                    } else if (shape === 'rect') {\n                        // Rect symbol\n                        const width = +element.width || 16;\n                        const height = +element.height || width;\n                        selector\n                            .append('rect')\n                            .attr('class', element.class || '')\n                            .attr('width', width)\n                            .attr('height', height)\n                            .attr('fill', element.color || {})\n                            .call(applyStyles, element.style || {});\n\n                        label_x = width + padding;\n                        line_height = Math.max(line_height, height + padding);\n                    } else if (shape_factory) {\n                        // Shape symbol is a recognized d3 type, so we can draw it in the legend (circle, diamond, etc.)\n                        const size = +element.size || 40;\n                        const radius = Math.ceil(Math.sqrt(size / Math.PI));\n                        selector\n                            .append('path')\n                            .attr('class', element.class || '')\n                            .attr('d', d3.symbol().size(size).type(shape_factory))\n                            .attr('transform', `translate(${radius}, ${radius + (padding / 2)})`)\n                            .attr('fill', element.color || {})\n                            .call(applyStyles, element.style || {});\n\n                        label_x = (2 * radius) + padding;\n                        label_y = Math.max((2 * radius) + (padding / 2), label_y);\n                        line_height = Math.max(line_height, (2 * radius) + padding);\n                    }\n                    // Draw the legend element label\n                    selector\n                        .append('text')\n                        .attr('text-anchor', 'left')\n                        .attr('class', 'lz-label')\n                        .attr('x', label_x)\n                        .attr('y', label_y)\n                        .style('font-size', label_size)\n                        .text(element.label);\n\n                    // Position the legend element group based on legend layout orientation\n                    const bcr = selector.node().getBoundingClientRect();\n                    if (this.layout.orientation === 'vertical') {\n                        y += bcr.height + padding;\n                        line_height = 0;\n                    } else {\n                        // Ensure this element does not exceed the panel width\n                        // (E.g. drop to the next line if it does, but only if it's not the only element on this line)\n                        const right_x = this.layout.origin.x + x + bcr.width;\n                        if (x > padding && right_x > this.parent.layout.width) {\n                            y += line_height;\n                            x = padding;\n                            selector.attr('transform', `translate(${x}, ${y})`);\n                        }\n                        x += bcr.width + (3 * padding);\n                    }\n                    // Store the element\n                    this.elements.push(selector);\n                });\n            }\n        });\n\n        // Scale the background rect to the elements in the legend\n        const bcr = this.elements_group.node().getBoundingClientRect();\n        this.layout.width = bcr.width + (2 * this.layout.padding);\n        this.layout.height = bcr.height + (2 * this.layout.padding);\n        this.background_rect\n            .attr('width', this.layout.width)\n            .attr('height', this.layout.height);\n\n        // Set the visibility on the legend from the \"hidden\" flag\n        // TODO: `show()` and `hide()` call a full rerender; might be able to make this more lightweight?\n        this.selector\n            .style('visibility', this.layout.hidden ? 'hidden' : 'visible');\n\n        return this.position();\n    }\n\n    /**\n     * Place the legend in position relative to the panel, as specified in the layout configuration\n     * @returns {Legend | null}\n     * TODO: should this always be chainable?\n     */\n    position() {\n        if (!this.selector) {\n            return this;\n        }\n        const bcr = this.selector.node().getBoundingClientRect();\n        if (!isNaN(+this.layout.pad_from_bottom)) {\n            this.layout.origin.y = this.parent.layout.height - bcr.height - +this.layout.pad_from_bottom;\n        }\n        if (!isNaN(+this.layout.pad_from_right)) {\n            this.layout.origin.x = this.parent.layout.width - bcr.width - +this.layout.pad_from_right;\n        }\n        this.selector.attr('transform', `translate(${this.layout.origin.x}, ${this.layout.origin.y})`);\n    }\n\n    /**\n     * Hide the legend (triggers a re-render)\n     * @public\n     */\n    hide() {\n        this.layout.hidden = true;\n        this.render();\n    }\n\n    /**\n     * Show the legend (triggers a re-render)\n     * @public\n     */\n    show() {\n        this.layout.hidden = false;\n        this.render();\n    }\n}\n\nexport {Legend as default};\n","/** @module */\nimport * as d3 from 'd3';\n\nimport {STATUSES} from './constants';\nimport Toolbar from './toolbar';\nimport {applyStyles, generateCurtain, generateLoader} from '../helpers/common';\nimport {parseFields, positionIntToString, prettyTicks} from '../helpers/display';\nimport {merge} from '../helpers/layouts';\nimport Legend from './legend';\nimport data_layers from '../registry/data_layers';\n\n\n/**\n * Default panel layout\n * @static\n * @type {Object}\n */\nconst default_layout = {\n    title: { text: '', style: {}, x: 10, y: 22 },\n    y_index: null,\n    width:  0,\n    height: 0,\n    origin: { x: 0, y: null },\n    min_width: 1,\n    min_height: 1,\n    proportional_width: null,\n    proportional_height: null,\n    proportional_origin: { x: 0, y: null },\n    margin: { top: 0, right: 0, bottom: 0, left: 0 },\n    background_click: 'clear_selections',\n    toolbar: {\n        widgets: [],\n    },\n    cliparea: {\n        height: 0,\n        width: 0,\n        origin: { x: 0, y: 0 },\n    },\n    axes: {  // These are the only axes supported!!\n        x:  {},\n        y1: {},\n        y2: {},\n    },\n    legend: null,\n    interaction: {\n        drag_background_to_pan: false,\n        drag_x_ticks_to_scale: false,\n        drag_y1_ticks_to_scale: false,\n        drag_y2_ticks_to_scale: false,\n        scroll_to_zoom: false,\n        x_linked: false,\n        y1_linked: false,\n        y2_linked: false,\n    },\n    data_layers: [],\n};\n\n/**\n * A panel is an abstract class representing a subdivision of the LocusZoom stage\n *   to display a distinct data representation as a collection of data layers.\n */\nclass Panel {\n    /**\n     * @param {Object} layout\n     * @param {Plot|null} parent\n    */\n    constructor(layout, parent) {\n        if (typeof layout !== 'object') {\n            throw new Error('Unable to create panel, invalid layout');\n        }\n\n        /**\n         * @protected\n         * @member {Plot|null}\n         */\n        this.parent = parent || null;\n        /**\n         *  @protected\n         *  @member {Plot|null}\n         */\n        this.parent_plot = parent;\n\n        // Ensure a valid ID is present. If there is no valid ID then generate one\n        if (typeof layout.id !== 'string' || !layout.id.length) {\n            if (!this.parent) {\n                layout.id = `p${Math.floor(Math.random() * Math.pow(10, 8))}`;\n            } else {\n                const generateID = () => {\n                    let id = `p${Math.floor(Math.random() * Math.pow(10, 8))}`;\n                    if (id === null || typeof this.parent.panels[id] != 'undefined') {\n                        id = generateID();\n                    }\n                    return id;\n                };\n                layout.id = generateID();\n            }\n        } else if (this.parent) {\n            if (typeof this.parent.panels[layout.id] !== 'undefined') {\n                throw new Error(`Cannot create panel with id [${layout.id}]; panel with that id already exists`);\n            }\n        }\n        /**\n         * @public\n         * @member {String}\n         */\n        this.id = layout.id;\n\n        /**\n         * @private\n         * @member {Boolean}\n         */\n        this.initialized = false;\n        /**\n         * The index of this panel in the parent plot's `layout.panels`\n         * @private\n         * @member {number}\n         * */\n        this.layout_idx = null;\n        /**\n         * @private\n         * @member {Object}\n         */\n        this.svg = {};\n\n        /**\n         * A JSON-serializable object used to describe the composition of the Panel\n         * @public\n         * @member {Object}\n         */\n        this.layout = merge(layout || {}, default_layout);\n\n        // Define state parameters specific to this panel\n        if (this.parent) {\n            /**\n             * @private\n             * @member {Object}\n             */\n            this.state = this.parent.state;\n\n            /**\n             *  @private\n             *  @member {String}\n             */\n            this.state_id = this.id;\n            this.state[this.state_id] = this.state[this.state_id] || {};\n        } else {\n            this.state = null;\n            this.state_id = null;\n        }\n\n        /**\n         * @protected\n         * @member {Object}\n         */\n        this.data_layers = {};\n        /**\n         * @private\n         * @member {String[]}\n         */\n        this.data_layer_ids_by_z_index = [];\n\n        /**\n         * Track data requests in progress\n         * @member {Promise[]}\n         * @private\n         */\n        this.data_promises = [];\n\n        /**\n         * @private\n         * @member {d3.scale}\n         */\n        this.x_scale  = null;\n        /**\n         * @private\n         * @member {d3.scale}\n         */\n        this.y1_scale = null;\n        /**\n         *  @private\n         *  @member {d3.scale}\n         */\n        this.y2_scale = null;\n\n        /**\n         * @private\n         * @member {d3.extent}\n         */\n        this.x_extent  = null;\n        /**\n         *  @private\n         *  @member {d3.extent}\n         */\n        this.y1_extent = null;\n        /**\n         *  @private\n         *  @member {d3.extent}\n         */\n        this.y2_extent = null;\n\n        /**\n         * @private\n         * @member {Number[]}\n         */\n        this.x_ticks  = [];\n        /**\n         *  @private\n         *  @member {Number[]}\n         */\n        this.y1_ticks = [];\n        /**\n         * @private\n         * @member {Number[]}\n         */\n        this.y2_ticks = [];\n\n        /**\n         * A timeout ID as returned by setTimeout\n         * @private\n         * @member {number}\n         */\n        this.zoom_timeout = null;\n\n        /**\n         * Known event hooks that the panel can respond to\n         * @protected\n         * @member {Object}\n         */\n        this.event_hooks = {\n            'layout_changed': [],\n            'data_requested': [],\n            'data_rendered': [],\n            'element_clicked': [],\n            'element_selection': [],\n            'match_requested': [], // A data layer is attempting to highlight matching points (internal use only)\n        };\n\n        // Initialize the layout\n        this.initializeLayout();\n    }\n\n    /******* Public methods: intended for direct external manipulation of panel internals */\n\n    /**\n     * There are several events that a LocusZoom panel can \"emit\" when appropriate, and LocusZoom supports registering\n     *   \"hooks\" for these events which are essentially custom functions intended to fire at certain times.\n     *\n     * The following panel-level events are currently supported:\n     *   - `layout_changed` - context: panel - Any aspect of the panel's layout (including dimensions or state) has changed.\n     *   - `data_requested` - context: panel - A request for new data from any data source used in the panel has been made.\n     *   - `data_rendered` - context: panel - Data from a request has been received and rendered in the panel.\n     *   - `element_clicked` - context: panel - A data element in any of the panel's data layers has been clicked.\n     *   - `element_selection` - context: panel - Triggered when an element changes \"selection\" status, and identifies\n     *        whether the element is being selected or deselected.\n     *\n     * To register a hook for any of these events use `panel.on('event_name', function() {})`.\n     *\n     * There can be arbitrarily many functions registered to the same event. They will be executed in the order they\n     *   were registered. The this context bound to each event hook function is dependent on the type of event, as\n     *   denoted above. For example, when data_requested is emitted the context for this in the event hook will be the\n     *   panel itself, but when element_clicked is emitted the context for this in the event hook will be the element\n     *   that was clicked.\n     *\n     * @public\n     * @param {String} event The name of the event (as defined in `event_hooks`)\n     * @param {function} hook\n     * @returns {function} The registered event listener\n     */\n    on(event, hook) {\n        // TODO: Dry plot and panel event code into a shared mixin\n        if (typeof 'event' != 'string' || !Array.isArray(this.event_hooks[event])) {\n            throw new Error(`Unable to register event hook, invalid event: ${event.toString()}`);\n        }\n        if (typeof hook != 'function') {\n            throw new Error('Unable to register event hook, invalid hook function passed');\n        }\n        this.event_hooks[event].push(hook);\n        return hook;\n    }\n\n    /**\n     * Remove one or more previously defined event listeners\n     * @public\n     * @param {String} event The name of an event (as defined in `event_hooks`)\n     * @param {eventCallback} [hook] The callback to deregister\n     * @returns {Panel}\n     */\n    off(event, hook) {\n        const theseHooks = this.event_hooks[event];\n        if (typeof 'event' != 'string' || !Array.isArray(theseHooks)) {\n            throw new Error(`Unable to remove event hook, invalid event: ${event.toString()}`);\n        }\n        if (hook === undefined) {\n            // Deregistering all hooks for this event may break basic functionality, and should only be used during\n            //  cleanup operations (eg to prevent memory leaks)\n            this.event_hooks[event] = [];\n        } else {\n            const hookMatch = theseHooks.indexOf(hook);\n            if (hookMatch !== -1) {\n                theseHooks.splice(hookMatch, 1);\n            } else {\n                throw new Error('The specified event listener is not registered and therefore cannot be removed');\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Handle running of event hooks when an event is emitted\n     *\n     * There is a shorter overloaded form of this method: if the event does not have any data, the second\n     *   argument can be a boolean to control bubbling\n     *\n     * @public\n     * @param {string} event A known event name\n     * @param {*} [eventData] Data or event description that will be passed to the event listener\n     * @param {boolean} [bubble=false] Whether to bubble the event to the parent\n     * @returns {Panel}\n     */\n    emit(event, eventData, bubble)  {\n        bubble = bubble || false;\n\n        // TODO: DRY this with the parent plot implementation. Ensure interfaces remain compatible.\n        // TODO: Improve documentation for overloaded method signature (JSDoc may have trouble here)\n        if (typeof 'event' != 'string' || !Array.isArray(this.event_hooks[event])) {\n            throw new Error(`LocusZoom attempted to throw an invalid event: ${event.toString()}`);\n        }\n        if (typeof eventData === 'boolean' && arguments.length === 2) {\n            // Overloaded method signature: emit(event, bubble)\n            bubble = eventData;\n            eventData = null;\n        }\n        const sourceID = this.getBaseId();\n        const eventContext = { sourceID: sourceID, data: eventData || null };\n        this.event_hooks[event].forEach((hookToRun) => {\n            // By default, any handlers fired here will see the panel as the value of `this`. If a bound function is\n            // registered as a handler, the previously bound `this` will override anything provided to `call` below.\n            hookToRun.call(this, eventContext);\n        });\n        if (bubble && this.parent) {\n            this.parent.emit(event, eventContext);\n        }\n        return this;\n    }\n\n    /**\n     * Set the title for the panel. If passed an object, will merge the object with the existing layout configuration, so\n     *   that all or only some of the title layout object's parameters can be customized. If passed null, false, or an empty\n     *   string, the title DOM element will be set to display: none.\n     *\n     * @public\n     * @param {string|object|null} title The title text, or an object with additional configuration\n     * @param {string} title.text Text to display. Since titles are rendered as SVG text, HTML and newlines will not be rendered.\n     * @param {number} title.x X-offset, in pixels, for the title's text anchor (default left) relative to the top-left corner of the panel.\n     * @param {number} title.y Y-offset, in pixels, for the title's text anchor (default left) relative to the top-left corner of the panel.\n        NOTE: SVG y values go from the top down, so the SVG origin of (0,0) is in the top left corner.\n     * @param {object} title.style CSS styles object to be applied to the title's DOM element.\n     * @returns {Panel}\n     */\n    setTitle(title) {\n        if (typeof this.layout.title == 'string') {\n            const text = this.layout.title;\n            this.layout.title = { text: text, x: 0, y: 0, style: {} };\n        }\n        if (typeof title == 'string') {\n            this.layout.title.text = title;\n        } else if (typeof title == 'object' && title !== null) {\n            this.layout.title = merge(title, this.layout.title);\n        }\n        if (this.layout.title.text.length) {\n            this.title\n                .attr('display', null)\n                .attr('x', parseFloat(this.layout.title.x))\n                .attr('y', parseFloat(this.layout.title.y))\n                .text(this.layout.title.text)\n                .call(applyStyles, this.layout.title.style);\n\n        } else {\n            this.title.attr('display', 'none');\n        }\n        return this;\n    }\n\n    /**\n     * Create a new data layer from a provided layout object. Should have the keys specified in `DefaultLayout`\n     * Will automatically add at the top (depth/z-index) of the panel unless explicitly directed differently\n     *   in the layout provided.\n     * @public\n     * @param {object} layout\n     * @returns {*}\n     */\n    addDataLayer(layout) {\n\n        // Sanity checks\n        if (typeof layout !== 'object' || typeof layout.id !== 'string' || !layout.id.length) {\n            throw new Error('Invalid data layer layout');\n        }\n        if (typeof this.data_layers[layout.id] !== 'undefined') {\n            throw new Error(`Cannot create data_layer with id [${layout.id}]; data layer with that id already exists in the panel`);\n        }\n        if (typeof layout.type !== 'string') {\n            throw new Error('Invalid data layer type');\n        }\n\n        // If the layout defines a y axis make sure the axis number is set and is 1 or 2 (default to 1)\n        if (typeof layout.y_axis == 'object' && (typeof layout.y_axis.axis == 'undefined' || ![1, 2].includes(layout.y_axis.axis))) {\n            layout.y_axis.axis = 1;\n        }\n\n        // Create the Data Layer\n        const data_layer = data_layers.create(layout.type, layout, this);\n\n        // Store the Data Layer on the Panel\n        this.data_layers[data_layer.id] = data_layer;\n\n        // If a discrete z_index was set in the layout then adjust other data layer z_index values to accommodate this one\n        if (data_layer.layout.z_index !== null && !isNaN(data_layer.layout.z_index)\n            && this.data_layer_ids_by_z_index.length > 0) {\n            // Negative z_index values should count backwards from the end, so convert negatives to appropriate values here\n            if (data_layer.layout.z_index < 0) {\n                data_layer.layout.z_index = Math.max(this.data_layer_ids_by_z_index.length + data_layer.layout.z_index, 0);\n            }\n            this.data_layer_ids_by_z_index.splice(data_layer.layout.z_index, 0, data_layer.id);\n            this.data_layer_ids_by_z_index.forEach((dlid, idx) => {\n                this.data_layers[dlid].layout.z_index = idx;\n            });\n        } else {\n            const length = this.data_layer_ids_by_z_index.push(data_layer.id);\n            this.data_layers[data_layer.id].layout.z_index = length - 1;\n        }\n\n        // Determine if this data layer was already in the layout.data_layers array.\n        // If it wasn't, add it. Either way store the layout.data_layers array index on the data_layer.\n        let layout_idx = null;\n        this.layout.data_layers.forEach((data_layer_layout, idx) => {\n            if (data_layer_layout.id === data_layer.id) {\n                layout_idx = idx;\n            }\n        });\n        if (layout_idx === null) {\n            layout_idx = this.layout.data_layers.push(this.data_layers[data_layer.id].layout) - 1;\n        }\n        this.data_layers[data_layer.id].layout_idx = layout_idx;\n\n        return this.data_layers[data_layer.id];\n    }\n\n    /**\n     * Remove a data layer by id\n     * @public\n     * @param {string} id\n     * @returns {Panel}\n     */\n    removeDataLayer(id) {\n        if (!this.data_layers[id]) {\n            throw new Error(`Unable to remove data layer, ID not found: ${id}`);\n        }\n\n        // Destroy all tooltips for the data layer\n        this.data_layers[id].destroyAllTooltips();\n\n        // Remove the svg container for the data layer if it exists\n        if (this.data_layers[id].svg.container) {\n            this.data_layers[id].svg.container.remove();\n        }\n\n        // Delete the data layer and its presence in the panel layout and state\n        this.layout.data_layers.splice(this.data_layers[id].layout_idx, 1);\n        delete this.state[this.data_layers[id].state_id];\n        delete this.data_layers[id];\n\n        // Remove the data_layer id from the z_index array\n        this.data_layer_ids_by_z_index.splice(this.data_layer_ids_by_z_index.indexOf(id), 1);\n\n        // Update layout_idx and layout.z_index values for all remaining data_layers\n        this.applyDataLayerZIndexesToDataLayerLayouts();\n        this.layout.data_layers.forEach((data_layer_layout, idx) => {\n            this.data_layers[data_layer_layout.id].layout_idx = idx;\n        });\n\n        return this;\n    }\n\n    /**\n     * Clear all selections on all data layers\n     * @public\n     * @returns {Panel}\n     */\n    clearSelections() {\n        this.data_layer_ids_by_z_index.forEach((id) => {\n            this.data_layers[id].setAllElementStatus('selected', false);\n        });\n        return this;\n    }\n\n    /**\n     * Update rendering of this panel whenever an event triggers a redraw. Assumes that the panel has already been\n     *   prepared the first time via `initialize`\n     * @public\n     * @returns {Panel}\n     */\n    render() {\n\n        // Position the panel container\n        this.svg.container.attr('transform', `translate(${this.layout.origin.x}, ${this.layout.origin.y})`);\n\n        // Set size on the clip rect\n        this.svg.clipRect\n            .attr('width', this.layout.width)\n            .attr('height', this.layout.height);\n\n        // Set and position the inner border, style if necessary\n        this.inner_border\n            .attr('x', this.layout.margin.left)\n            .attr('y', this.layout.margin.top)\n            .attr('width', this.layout.width - (this.layout.margin.left + this.layout.margin.right))\n            .attr('height', this.layout.height - (this.layout.margin.top + this.layout.margin.bottom));\n        if (this.layout.inner_border) {\n            this.inner_border\n                .style('stroke-width', 1)\n                .style('stroke', this.layout.inner_border);\n        }\n\n        // Set/update panel title if necessary\n        this.setTitle();\n\n        // Regenerate all extents\n        this.generateExtents();\n\n        // Helper function to constrain any procedurally generated vectors (e.g. ranges, extents)\n        // Constraints applied here keep vectors from going to infinity or beyond a definable power of ten\n        const constrain = function (value, limit_exponent) {\n            const neg_min = Math.pow(-10, limit_exponent);\n            const neg_max = Math.pow(-10, -limit_exponent);\n            const pos_min = Math.pow(10, -limit_exponent);\n            const pos_max = Math.pow(10, limit_exponent);\n            if (value === Infinity) {\n                value = pos_max;\n            }\n            if (value === -Infinity) {\n                value = neg_min;\n            }\n            if (value === 0) {\n                value = pos_min;\n            }\n            if (value > 0) {\n                value = Math.max(Math.min(value, pos_max), pos_min);\n            }\n            if (value < 0) {\n                value = Math.max(Math.min(value, neg_max), neg_min);\n            }\n            return value;\n        };\n\n        // Define default and shifted ranges for all axes\n        const ranges = {};\n        if (this.x_extent) {\n            const base_x_range = { start: 0, end: this.layout.cliparea.width };\n            if (this.layout.axes.x.range) {\n                base_x_range.start = this.layout.axes.x.range.start || base_x_range.start;\n                base_x_range.end = this.layout.axes.x.range.end || base_x_range.end;\n            }\n            ranges.x = [base_x_range.start, base_x_range.end];\n            ranges.x_shifted = [base_x_range.start, base_x_range.end];\n        }\n        if (this.y1_extent) {\n            const base_y1_range = { start: this.layout.cliparea.height, end: 0 };\n            if (this.layout.axes.y1.range) {\n                base_y1_range.start = this.layout.axes.y1.range.start || base_y1_range.start;\n                base_y1_range.end = this.layout.axes.y1.range.end || base_y1_range.end;\n            }\n            ranges.y1 = [base_y1_range.start, base_y1_range.end];\n            ranges.y1_shifted = [base_y1_range.start, base_y1_range.end];\n        }\n        if (this.y2_extent) {\n            const base_y2_range = { start: this.layout.cliparea.height, end: 0 };\n            if (this.layout.axes.y2.range) {\n                base_y2_range.start = this.layout.axes.y2.range.start || base_y2_range.start;\n                base_y2_range.end = this.layout.axes.y2.range.end || base_y2_range.end;\n            }\n            ranges.y2 = [base_y2_range.start, base_y2_range.end];\n            ranges.y2_shifted = [base_y2_range.start, base_y2_range.end];\n        }\n\n        // Shift ranges based on any drag or zoom interactions currently underway\n        if (this.parent.interaction.panel_id && (this.parent.interaction.panel_id === this.id || this.parent.interaction.linked_panel_ids.includes(this.id))) {\n            let anchor, scalar = null;\n            if (this.parent.interaction.zooming && typeof this.x_scale == 'function') {\n                const current_extent_size = Math.abs(this.x_extent[1] - this.x_extent[0]);\n                const current_scaled_extent_size = Math.round(this.x_scale.invert(ranges.x_shifted[1])) - Math.round(this.x_scale.invert(ranges.x_shifted[0]));\n                let zoom_factor = this.parent.interaction.zooming.scale;\n                const potential_extent_size = Math.floor(current_scaled_extent_size * (1 / zoom_factor));\n                if (zoom_factor < 1 && !isNaN(this.parent.layout.max_region_scale)) {\n                    zoom_factor = 1 / (Math.min(potential_extent_size, this.parent.layout.max_region_scale) / current_scaled_extent_size);\n                } else if (zoom_factor > 1 && !isNaN(this.parent.layout.min_region_scale)) {\n                    zoom_factor = 1 / (Math.max(potential_extent_size, this.parent.layout.min_region_scale) / current_scaled_extent_size);\n                }\n                const new_extent_size = Math.floor(current_extent_size * zoom_factor);\n                anchor = this.parent.interaction.zooming.center - this.layout.margin.left - this.layout.origin.x;\n                const offset_ratio = anchor / this.layout.cliparea.width;\n                const new_x_extent_start = Math.max(Math.floor(this.x_scale.invert(ranges.x_shifted[0]) - ((new_extent_size - current_scaled_extent_size) * offset_ratio)), 1);\n                ranges.x_shifted = [ this.x_scale(new_x_extent_start), this.x_scale(new_x_extent_start + new_extent_size) ];\n            } else if (this.parent.interaction.dragging) {\n                switch (this.parent.interaction.dragging.method) {\n                case 'background':\n                    ranges.x_shifted[0] = +this.parent.interaction.dragging.dragged_x;\n                    ranges.x_shifted[1] = this.layout.cliparea.width + this.parent.interaction.dragging.dragged_x;\n                    break;\n                case 'x_tick':\n                    if (d3.event && d3.event.shiftKey) {\n                        ranges.x_shifted[0] = +this.parent.interaction.dragging.dragged_x;\n                        ranges.x_shifted[1] = this.layout.cliparea.width + this.parent.interaction.dragging.dragged_x;\n                    } else {\n                        anchor = this.parent.interaction.dragging.start_x - this.layout.margin.left - this.layout.origin.x;\n                        scalar = constrain(anchor / (anchor + this.parent.interaction.dragging.dragged_x), 3);\n                        ranges.x_shifted[0] = 0;\n                        ranges.x_shifted[1] = Math.max(this.layout.cliparea.width * (1 / scalar), 1);\n                    }\n                    break;\n                case 'y1_tick':\n                case 'y2_tick': {\n                    const y_shifted = `y${this.parent.interaction.dragging.method[1]}_shifted`;\n                    if (d3.event && d3.event.shiftKey) {\n                        ranges[y_shifted][0] = this.layout.cliparea.height + this.parent.interaction.dragging.dragged_y;\n                        ranges[y_shifted][1] = +this.parent.interaction.dragging.dragged_y;\n                    } else {\n                        anchor = this.layout.cliparea.height - (this.parent.interaction.dragging.start_y - this.layout.margin.top - this.layout.origin.y);\n                        scalar = constrain(anchor / (anchor - this.parent.interaction.dragging.dragged_y), 3);\n                        ranges[y_shifted][0] = this.layout.cliparea.height;\n                        ranges[y_shifted][1] = this.layout.cliparea.height - (this.layout.cliparea.height * (1 / scalar));\n                    }\n                }\n                }\n            }\n        }\n\n        // Generate scales and ticks for all axes, then render them\n        ['x', 'y1', 'y2'].forEach((axis) => {\n            if (!this[`${axis}_extent`]) {\n                return;\n            }\n\n            // Base Scale\n            this[`${axis}_scale`] = d3.scaleLinear()\n                .domain(this[`${axis}_extent`])\n                .range(ranges[`${axis}_shifted`]);\n\n            // Shift the extent\n            this[`${axis}_extent`] = [\n                this[`${axis}_scale`].invert(ranges[axis][0]),\n                this[`${axis}_scale`].invert(ranges[axis][1]),\n            ];\n\n            // Finalize Scale\n            this[`${axis}_scale`] = d3.scaleLinear()\n                .domain(this[`${axis}_extent`]).range(ranges[axis]);\n\n            // Render axis (and generate ticks as needed)\n            this.renderAxis(axis);\n        });\n\n        // Establish mousewheel zoom event handers on the panel (namespacing not passed through by d3, so not used here)\n        if (this.layout.interaction.scroll_to_zoom) {\n            const zoom_handler = () => {\n                // Look for a shift key press while scrolling to execute.\n                // If not present, gracefully raise a notification and allow conventional scrolling\n                if (!d3.event.shiftKey) {\n                    if (this.parent._canInteract(this.id)) {\n                        this.loader.show('Press <tt>[SHIFT]</tt> while scrolling to zoom').hide(1000);\n                    }\n                    return;\n                }\n                d3.event.preventDefault();\n                if (!this.parent._canInteract(this.id)) {\n                    return;\n                }\n                const coords = d3.mouse(this.svg.container.node());\n                const delta = Math.max(-1, Math.min(1, (d3.event.wheelDelta || -d3.event.detail || -d3.event.deltaY)));\n                if (delta === 0) {\n                    return;\n                }\n                this.parent.interaction = {\n                    panel_id: this.id,\n                    linked_panel_ids: this.getLinkedPanelIds('x'),\n                    zooming: {\n                        scale: (delta < 1) ? 0.9 : 1.1,\n                        center: coords[0],\n                    },\n                };\n                this.render();\n                this.parent.interaction.linked_panel_ids.forEach((panel_id) => {\n                    this.parent.panels[panel_id].render();\n                });\n                if (this.zoom_timeout !== null) {\n                    clearTimeout(this.zoom_timeout);\n                }\n                this.zoom_timeout = setTimeout(() => {\n                    this.parent.interaction = {};\n                    this.parent.applyState({ start: this.x_extent[0], end: this.x_extent[1] });\n                }, 500);\n            };\n            // FIXME: Consider moving back to d3.zoom and rewriting drag + zoom to use behaviors.\n            this.svg.container\n                .on('wheel.zoom', zoom_handler)\n                .on('mousewheel.zoom', zoom_handler)\n                .on('DOMMouseScroll.zoom', zoom_handler);\n        }\n\n        // Render data layers in order by z-index\n        this.data_layer_ids_by_z_index.forEach((data_layer_id) => {\n            this.data_layers[data_layer_id].draw().render();\n        });\n\n        return this;\n    }\n\n    /**\n     * Add a \"basic\" loader to a panel\n     * This method is just a shortcut for adding the most commonly used type of loading indicator, which appears when\n     *   data is requested, animates (e.g. shows an infinitely cycling progress bar as opposed to one that loads from\n     *   0-100% based on actual load progress), and disappears when new data is loaded and rendered.\n     *\n     * @public\n     * @param {Boolean} show_immediately\n     * @returns {Panel}\n     */\n    addBasicLoader(show_immediately) {\n        if (typeof show_immediately != 'undefined') {\n            show_immediately = true;\n        }\n        if (show_immediately) {\n            this.loader.show('Loading...').animate();\n        }\n        this.on('data_requested', () => {\n            this.loader.show('Loading...').animate();\n        });\n        this.on('data_rendered', () => {\n            this.loader.hide();\n        });\n        return this;\n    }\n\n    /************* Private interface: only used internally */\n    /** @private */\n    applyDataLayerZIndexesToDataLayerLayouts () {\n        this.data_layer_ids_by_z_index.forEach((dlid, idx) => {\n            this.data_layers[dlid].layout.z_index = idx;\n        });\n    }\n\n    /**\n     * @private\n     * @returns {string}\n     */\n    getBaseId () {\n        return `${this.parent.id}.${this.id}`;\n    }\n\n    /**\n     * Get an object with the x and y coordinates of the panel's origin in terms of the entire page\n     * Necessary for positioning any HTML elements over the panel\n     * @private\n     * @returns {{x: Number, y: Number}}\n     */\n    _getPageOrigin() {\n        const plot_origin = this.parent._getPageOrigin();\n        return {\n            x: plot_origin.x + this.layout.origin.x,\n            y: plot_origin.y + this.layout.origin.y,\n        };\n    }\n\n    /**\n     * Prepare the panel for first use by performing parameter validation, creating axes, setting default dimensions,\n     *   and preparing / positioning data layers as appropriate.\n     * @private\n     * @returns {Panel}\n     */\n    initializeLayout() {\n\n        // If the layout is missing BOTH width and proportional width then set the proportional width to 1.\n        // This will default the panel to taking up the full width of the plot.\n        if (this.layout.width === 0 && this.layout.proportional_width === null) {\n            this.layout.proportional_width = 1;\n        }\n\n        // If the layout is missing BOTH height and proportional height then set the proportional height to\n        // an equal share of the plot's current height.\n        if (this.layout.height === 0 && this.layout.proportional_height === null) {\n            const panel_count = Object.keys(this.parent.panels).length;\n            if (panel_count > 0) {\n                this.layout.proportional_height = (1 / panel_count);\n            } else {\n                this.layout.proportional_height = 1;\n            }\n        }\n\n        // Set panel dimensions, origin, and margin\n        this.setDimensions();\n        this.setOrigin();\n        this.setMargin();\n\n        // Set ranges\n        // TODO: Define stub values in constructor\n        this.x_range = [0, this.layout.cliparea.width];\n        this.y1_range = [this.layout.cliparea.height, 0];\n        this.y2_range = [this.layout.cliparea.height, 0];\n\n        // Initialize panel axes\n        ['x', 'y1', 'y2'].forEach((axis) => {\n            if (!Object.keys(this.layout.axes[axis]).length || this.layout.axes[axis].render === false) {\n                // The default layout sets the axis to an empty object, so set its render boolean here\n                this.layout.axes[axis].render = false;\n            } else {\n                this.layout.axes[axis].render = true;\n                this.layout.axes[axis].label = this.layout.axes[axis].label || null;\n                this.layout.axes[axis].label_function = this.layout.axes[axis].label_function || null;\n            }\n        });\n\n        // Add data layers (which define x and y extents)\n        this.layout.data_layers.forEach((data_layer_layout) => {\n            this.addDataLayer(data_layer_layout);\n        });\n\n        return this;\n    }\n\n    /**\n     * Set the dimensions for the panel. If passed with no arguments will calculate optimal size based on layout\n     *   directives and the available area within the plot. If passed discrete width (number) and height (number) will\n     *   attempt to resize the panel to them, but may be limited by minimum dimensions defined on the plot or panel.\n     *\n     * @private\n     * @param {number} [width]\n     * @param {number} [height]\n     * @returns {Panel}\n     */\n    setDimensions(width, height) {\n        if (typeof width != 'undefined' && typeof height != 'undefined') {\n            if (!isNaN(width) && width >= 0 && !isNaN(height) && height >= 0) {\n                this.layout.width = Math.max(Math.round(+width), this.layout.min_width);\n                this.layout.height = Math.max(Math.round(+height), this.layout.min_height);\n            }\n        } else {\n            if (this.layout.proportional_width !== null) {\n                this.layout.width = Math.max(this.layout.proportional_width * this.parent.layout.width, this.layout.min_width);\n            }\n            if (this.layout.proportional_height !== null) {\n                this.layout.height = Math.max(this.layout.proportional_height * this.parent.layout.height, this.layout.min_height);\n            }\n        }\n        this.layout.cliparea.width = Math.max(this.layout.width - (this.layout.margin.left + this.layout.margin.right), 0);\n        this.layout.cliparea.height = Math.max(this.layout.height - (this.layout.margin.top + this.layout.margin.bottom), 0);\n        if (this.svg.clipRect) {\n            this.svg.clipRect\n                .attr('width', this.layout.width)\n                .attr('height', this.layout.height);\n        }\n        if (this.initialized) {\n            this.render();\n            this.curtain.update();\n            this.loader.update();\n            this.toolbar.update();\n            if (this.legend) {\n                this.legend.position();\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Set panel origin on the plot, and re-render as appropriate\n     *\n     * @private\n     * @param {number} x\n     * @param {number} y\n     * @returns {Panel}\n     */\n    setOrigin(x, y) {\n        if (!isNaN(x) && x >= 0) {\n            this.layout.origin.x = Math.max(Math.round(+x), 0);\n        }\n        if (!isNaN(y) && y >= 0) {\n            this.layout.origin.y = Math.max(Math.round(+y), 0);\n        }\n        if (this.initialized) {\n            this.render();\n        }\n        return this;\n    }\n\n    /**\n     * Set margins around this panel\n     * @private\n     * @param {number} top\n     * @param {number} right\n     * @param {number} bottom\n     * @param {number} left\n     * @returns {Panel}\n     */\n    setMargin(top, right, bottom, left) {\n        let extra;\n        if (!isNaN(top)    && top    >= 0) {\n            this.layout.margin.top = Math.max(Math.round(+top), 0);\n        }\n        if (!isNaN(right)  && right  >= 0) {\n            this.layout.margin.right = Math.max(Math.round(+right), 0);\n        }\n        if (!isNaN(bottom) && bottom >= 0) {\n            this.layout.margin.bottom = Math.max(Math.round(+bottom), 0);\n        }\n        if (!isNaN(left)   && left   >= 0) {\n            this.layout.margin.left = Math.max(Math.round(+left), 0);\n        }\n        if (this.layout.margin.top + this.layout.margin.bottom > this.layout.height) {\n            extra = Math.floor(((this.layout.margin.top + this.layout.margin.bottom) - this.layout.height) / 2);\n            this.layout.margin.top -= extra;\n            this.layout.margin.bottom -= extra;\n        }\n        if (this.layout.margin.left + this.layout.margin.right > this.layout.width) {\n            extra = Math.floor(((this.layout.margin.left + this.layout.margin.right) - this.layout.width) / 2);\n            this.layout.margin.left -= extra;\n            this.layout.margin.right -= extra;\n        }\n        ['top', 'right', 'bottom', 'left'].forEach((m) => {\n            this.layout.margin[m] = Math.max(this.layout.margin[m], 0);\n        });\n        this.layout.cliparea.width = Math.max(this.layout.width - (this.layout.margin.left + this.layout.margin.right), 0);\n        this.layout.cliparea.height = Math.max(this.layout.height - (this.layout.margin.top + this.layout.margin.bottom), 0);\n        this.layout.cliparea.origin.x = this.layout.margin.left;\n        this.layout.cliparea.origin.y = this.layout.margin.top;\n\n        if (this.initialized) {\n            this.render();\n        }\n        return this;\n    }\n\n    /**\n     * Prepare the first rendering of the panel. This includes drawing the individual data layers, but also creates shared\n     *   elements such as axes,  title, and loader/curtain.\n     * @private\n     * @returns {Panel}\n     */\n    initialize() {\n\n        // Append a container group element to house the main panel group element and the clip path\n        // Position with initial layout parameters\n        const base_id = this.getBaseId();\n        this.svg.container = this.parent.svg.append('g')\n            .attr('id', `${base_id}.panel_container`)\n            .attr('transform', `translate(${this.layout.origin.x || 0}, ${this.layout.origin.y || 0})`);\n\n        // Append clip path to the parent svg element, size with initial layout parameters\n        const clipPath = this.svg.container.append('clipPath')\n            .attr('id', `${base_id}.clip`);\n        this.svg.clipRect = clipPath.append('rect')\n            .attr('width', this.layout.width)\n            .attr('height', this.layout.height);\n\n        // Append svg group for rendering all panel child elements, clipped by the clip path\n        this.svg.group = this.svg.container.append('g')\n            .attr('id', `${base_id}.panel`)\n            .attr('clip-path', `url(#${base_id}.clip)`);\n\n        // Add curtain and loader prototypes to the panel\n        /** @member {Object} */\n        this.curtain = generateCurtain.call(this);\n        /** @member {Object} */\n        this.loader = generateLoader.call(this);\n\n        /**\n         * Create the toolbar object and hang widgets on it as defined by panel layout\n         * @member {Toolbar}\n         */\n        this.toolbar = new Toolbar(this);\n\n        // Inner border\n        this.inner_border = this.svg.group.append('rect')\n            .attr('class', 'lz-panel-background')\n            .on('click', () => {\n                if (this.layout.background_click === 'clear_selections') {\n                    this.clearSelections();\n                }\n            });\n\n        // Add the title\n        /** @member {Element} */\n        this.title = this.svg.group.append('text').attr('class', 'lz-panel-title');\n        if (typeof this.layout.title != 'undefined') {\n            this.setTitle();\n        }\n\n        // Initialize Axes\n        this.svg.x_axis = this.svg.group.append('g')\n            .attr('id', `${base_id}.x_axis`)\n            .attr('class', 'lz-x lz-axis');\n        if (this.layout.axes.x.render) {\n            this.svg.x_axis_label = this.svg.x_axis.append('text')\n                .attr('class', 'lz-x lz-axis lz-label')\n                .attr('text-anchor', 'middle');\n        }\n        this.svg.y1_axis = this.svg.group.append('g')\n            .attr('id', `${base_id}.y1_axis`).attr('class', 'lz-y lz-y1 lz-axis');\n        if (this.layout.axes.y1.render) {\n            this.svg.y1_axis_label = this.svg.y1_axis.append('text')\n                .attr('class', 'lz-y1 lz-axis lz-label')\n                .attr('text-anchor', 'middle');\n        }\n        this.svg.y2_axis = this.svg.group.append('g')\n            .attr('id', `${base_id}.y2_axis`)\n            .attr('class', 'lz-y lz-y2 lz-axis');\n        if (this.layout.axes.y2.render) {\n            this.svg.y2_axis_label = this.svg.y2_axis.append('text')\n                .attr('class', 'lz-y2 lz-axis lz-label')\n                .attr('text-anchor', 'middle');\n        }\n\n        // Initialize child Data Layers\n        this.data_layer_ids_by_z_index.forEach((id) => {\n            this.data_layers[id].initialize();\n        });\n\n        /**\n         * Legend object, as defined by panel layout and child data layer layouts\n         * @member {Legend}\n         * */\n        this.legend = null;\n        if (this.layout.legend) {\n            this.legend = new Legend(this);\n        }\n\n        // Establish panel background drag interaction mousedown event handler (on the panel background)\n        if (this.layout.interaction.drag_background_to_pan) {\n            const namespace = `.${this.parent.id}.${this.id}.interaction.drag`;\n            const mousedown = () => this.parent.startDrag(this, 'background');\n            this.svg.container.select('.lz-panel-background')\n                .on(`mousedown${namespace}.background`, mousedown)\n                .on(`touchstart${namespace}.background`, mousedown);\n        }\n\n        return this;\n    }\n\n    /**\n     * Refresh the sort order of all data layers (called by data layer moveUp and moveDown methods)\n     * @private\n     */\n    resortDataLayers() {\n        const sort = [];\n        this.data_layer_ids_by_z_index.forEach((id) => {\n            sort.push(this.data_layers[id].layout.z_index);\n        });\n        this.svg.group\n            .selectAll('g.lz-data_layer-container')\n            .data(sort)\n            .sort(d3.ascending);\n        this.applyDataLayerZIndexesToDataLayerLayouts();\n    }\n\n    /**\n     * Get an array of panel IDs that are axis-linked to this panel\n     * @private\n     * @param {('x'|'y1'|'y2')} axis\n     * @returns {Array}\n     */\n    getLinkedPanelIds(axis) {\n        axis = axis || null;\n        const linked_panel_ids = [];\n        if (!['x', 'y1', 'y2'].includes(axis)) {\n            return linked_panel_ids;\n        }\n        if (!this.layout.interaction[`${axis}_linked`]) {\n            return linked_panel_ids;\n        }\n        this.parent.panel_ids_by_y_index.forEach((panel_id) => {\n            if (panel_id !== this.id && this.parent.panels[panel_id].layout.interaction[`${axis}_linked`]) {\n                linked_panel_ids.push(panel_id);\n            }\n        });\n        return linked_panel_ids;\n    }\n\n    /**\n     * Move a panel up relative to others by y-index\n     * @private\n     * @returns {Panel}\n     */\n    moveUp() {\n        if (this.parent.panel_ids_by_y_index[this.layout.y_index - 1]) {\n            this.parent.panel_ids_by_y_index[this.layout.y_index] = this.parent.panel_ids_by_y_index[this.layout.y_index - 1];\n            this.parent.panel_ids_by_y_index[this.layout.y_index - 1] = this.id;\n            this.parent.applyPanelYIndexesToPanelLayouts();\n            this.parent.positionPanels();\n        }\n        return this;\n    }\n\n    /**\n     * Move a panel down (y-axis) relative to others in the plot\n     * @private\n     * @returns {Panel}\n     */\n    moveDown() {\n        if (this.parent.panel_ids_by_y_index[this.layout.y_index + 1]) {\n            this.parent.panel_ids_by_y_index[this.layout.y_index] = this.parent.panel_ids_by_y_index[this.layout.y_index + 1];\n            this.parent.panel_ids_by_y_index[this.layout.y_index + 1] = this.id;\n            this.parent.applyPanelYIndexesToPanelLayouts();\n            this.parent.positionPanels();\n        }\n        return this;\n    }\n\n    /**\n     * When the parent plot changes state, adjust the panel accordingly. For example, this may include fetching new data\n     *   from the API as the viewing region changes\n     * @private\n     * @returns {Promise}\n     */\n    reMap() {\n        this.emit('data_requested');\n        this.data_promises = [];\n\n        // Remove any previous error messages before attempting to load new data\n        this.curtain.hide();\n        // Trigger reMap on each Data Layer\n        for (let id in this.data_layers) {\n            try {\n                this.data_promises.push(this.data_layers[id].reMap());\n            } catch (error) {\n                console.error(error);\n                this.curtain.show(error.message || error);\n            }\n        }\n        // When all finished trigger a render\n        return Promise.all(this.data_promises)\n            .then(() => {\n                this.initialized = true;\n                this.render();\n                this.emit('layout_changed', true);\n                this.emit('data_rendered');\n            })\n            .catch((error) => {\n                console.error(error);\n                this.curtain.show(error.message || error);\n            });\n    }\n\n    /**\n     * Iterate over data layers to generate panel axis extents\n     * @private\n     * @returns {Panel}\n     */\n    generateExtents() {\n\n        // Reset extents\n        ['x', 'y1', 'y2'].forEach((axis) => {\n            this[`${axis}_extent`] = null;\n        });\n\n        // Loop through the data layers\n        for (let id in this.data_layers) {\n\n            const data_layer = this.data_layers[id];\n\n            // If defined and not decoupled, merge the x extent of the data layer with the panel's x extent\n            if (data_layer.layout.x_axis && !data_layer.layout.x_axis.decoupled) {\n                this.x_extent = d3.extent((this.x_extent || []).concat(data_layer.getAxisExtent('x')));\n            }\n\n            // If defined and not decoupled, merge the y extent of the data layer with the panel's appropriate y extent\n            if (data_layer.layout.y_axis && !data_layer.layout.y_axis.decoupled) {\n                const y_axis = `y${data_layer.layout.y_axis.axis}`;\n                this[`${y_axis}_extent`] = d3.extent((this[`${y_axis}_extent`] || []).concat(data_layer.getAxisExtent('y')));\n            }\n\n        }\n\n        // Override x_extent from state if explicitly defined to do so\n        if (this.layout.axes.x && this.layout.axes.x.extent === 'state') {\n            this.x_extent = [ this.state.start, this.state.end ];\n        }\n\n        return this;\n\n    }\n\n    /**\n     * Generate an array of ticks for an axis. These ticks are generated in one of three ways (highest wins):\n     *   1. An array of specific tick marks\n     *   2. Query each data layer for what ticks are appropriate, and allow a panel-level tick configuration parameter\n     *     object to override the layer's default presentation settings\n     *   3. Generate generic tick marks based on the extent of the data\n     *\n     * @private\n     * @param {('x'|'y1'|'y2')} axis The string identifier of the axis\n     * @returns {Number[]|Object[]}  TODO: number format?\n     *   An array of numbers: interpreted as an array of axis value offsets for positioning.\n     *   An array of objects: each object must have an 'x' attribute to position the tick.\n     *   Other supported object keys:\n     *     * text: string to render for a given tick\n     *     * style: d3-compatible CSS style object\n     *     * transform: SVG transform attribute string\n     *     * color: string or LocusZoom scalable parameter object\n     */\n    generateTicks(axis) {\n\n        // Parse an explicit 'ticks' attribute in the axis layout\n        if (this.layout.axes[axis].ticks) {\n            const layout = this.layout.axes[axis];\n\n            const baseTickConfig = layout.ticks;\n            if (Array.isArray(baseTickConfig)) {\n                // Array of specific ticks hard-coded into a panel will override any ticks that an individual layer might specify\n                return baseTickConfig;\n            }\n\n            if (typeof baseTickConfig === 'object') {\n                // If the layout specifies base configuration for ticks- but without specific positions- then ask each\n                //   data layer to report the tick marks that it thinks it needs\n                // TODO: Few layers currently need to specify custom ticks (which is ok!). But if it becomes common, consider adding mechanisms to deduplicate ticks across layers\n                const self = this;\n\n                // Pass any layer-specific customizations for how ticks are calculated. (styles are overridden separately)\n                const config = { position: baseTickConfig.position };\n\n                const combinedTicks = this.data_layer_ids_by_z_index.reduce((acc, data_layer_id) => {\n                    const nextLayer = self.data_layers[data_layer_id];\n                    return acc.concat(nextLayer.getTicks(axis, config));\n                }, []);\n\n                return combinedTicks.map((item) => {\n                    // The layer makes suggestions, but tick configuration params specified on the panel take precedence\n                    let itemConfig = {};\n                    itemConfig = merge(itemConfig, baseTickConfig);\n                    return merge(itemConfig, item);\n                });\n            }\n        }\n\n        // If no other configuration is provided, attempt to generate ticks from the extent\n        if (this[`${axis}_extent`]) {\n            return prettyTicks(this[`${axis}_extent`], 'both');\n        }\n        return [];\n    }\n\n    /**\n     * Render ticks for a particular axis\n     * @private\n     * @param {('x'|'y1'|'y2')} axis The identifier of the axes\n     * @returns {Panel}\n     */\n    renderAxis(axis) {\n\n        if (!['x', 'y1', 'y2'].includes(axis)) {\n            throw new Error(`Unable to render axis; invalid axis identifier: ${axis}`);\n        }\n\n        const canRender = this.layout.axes[axis].render\n            && typeof this[`${axis}_scale`] == 'function'\n            && !isNaN(this[`${axis}_scale`](0));\n\n        // If the axis has already been rendered then check if we can/can't render it\n        // Make sure the axis element is shown/hidden to suit\n        if (this[`${axis}_axis`]) {\n            this.svg.container.select(`g.lz-axis.lz-${axis}`)\n                .style('display', canRender ? null : 'none');\n        }\n\n        if (!canRender) {\n            return this;\n        }\n\n        // Axis-specific values to plug in where needed\n        const axis_params = {\n            x: {\n                position: `translate(${this.layout.margin.left}, ${this.layout.height - this.layout.margin.bottom})`,\n                orientation: 'bottom',\n                label_x: this.layout.cliparea.width / 2,\n                label_y: (this.layout.axes[axis].label_offset || 0),\n                label_rotate: null,\n            },\n            y1: {\n                position: `translate(${this.layout.margin.left}, ${this.layout.margin.top})`,\n                orientation: 'left',\n                label_x: -1 * (this.layout.axes[axis].label_offset || 0),\n                label_y: this.layout.cliparea.height / 2,\n                label_rotate: -90,\n            },\n            y2: {\n                position: `translate(${this.layout.width - this.layout.margin.right}, ${this.layout.margin.top})`,\n                orientation: 'right',\n                label_x: (this.layout.axes[axis].label_offset || 0),\n                label_y: this.layout.cliparea.height / 2,\n                label_rotate: -90,\n            },\n        };\n\n        // Generate Ticks\n        this[`${axis}_ticks`] = this.generateTicks(axis);\n\n        // Determine if the ticks are all numbers (d3-automated tick rendering) or not (manual tick rendering)\n        const ticksAreAllNumbers = ((ticks) => {\n            for (let i = 0; i < ticks.length; i++) {\n                if (isNaN(ticks[i])) {\n                    return false;\n                }\n            }\n            return true;\n        })(this[`${axis}_ticks`]);\n\n        // Initialize the axis; set scale and orientation\n        let axis_factory;\n        switch (axis_params[axis].orientation) {\n        case 'right':\n            axis_factory = d3.axisRight;\n            break;\n        case 'left':\n            axis_factory = d3.axisLeft;\n            break;\n        case 'bottom':\n            axis_factory = d3.axisBottom;\n            break;\n        default:\n            throw new Error('Unrecognized axis orientation');\n        }\n\n        this[`${axis}_axis`] = axis_factory(this[`${axis}_scale`])\n            .tickPadding(3);\n\n        // Set tick values and format\n        if (ticksAreAllNumbers) {\n            this[`${axis}_axis`].tickValues(this[`${axis}_ticks`]);\n            if (this.layout.axes[axis].tick_format === 'region') {\n                this[`${axis}_axis`].tickFormat((d) => positionIntToString(d, 6));\n            }\n        } else {\n            let ticks = this[`${axis}_ticks`].map((t) => {\n                return (t[axis.substr(0, 1)]);\n            });\n            this[`${axis}_axis`].tickValues(ticks)\n                .tickFormat((t, i) => {\n                    return this[`${axis}_ticks`][i].text;\n                });\n        }\n\n        // Position the axis in the SVG and apply the axis construct\n        this.svg[`${axis}_axis`]\n            .attr('transform', axis_params[axis].position)\n            .call(this[`${axis}_axis`]);\n\n        // If necessary manually apply styles and transforms to ticks as specified by the layout\n        if (!ticksAreAllNumbers) {\n            const tick_selector = d3.selectAll(`g#${this.getBaseId().replace('.', '\\\\.')}\\\\.${axis}_axis g.tick`);\n            const panel = this;\n            tick_selector.each(function (d, i) {\n                const selector = d3.select(this).select('text');\n                if (panel[`${axis}_ticks`][i].style) {\n                    applyStyles(selector, panel[`${axis}_ticks`][i].style);\n                }\n                if (panel[`${axis}_ticks`][i].transform) {\n                    selector.attr('transform', panel[`${axis}_ticks`][i].transform);\n                }\n            });\n        }\n\n        // Render the axis label if necessary\n        const label = this.layout.axes[axis].label || null;\n        if (label !== null) {\n            this.svg[`${axis}_axis_label`]\n                .attr('x', axis_params[axis].label_x)\n                .attr('y', axis_params[axis].label_y)\n                .text(parseFields(this.state, label));\n            if (axis_params[axis].label_rotate !== null) {\n                this.svg[`${axis  }_axis_label`]\n                    .attr('transform', `rotate(${axis_params[axis].label_rotate} ${axis_params[axis].label_x}, ${axis_params[axis].label_y})`);\n            }\n        }\n\n        // Attach interactive handlers to ticks as needed\n        ['x', 'y1', 'y2'].forEach((axis) => {\n            if (this.layout.interaction[`drag_${axis}_ticks_to_scale`]) {\n                const namespace = `.${this.parent.id}.${this.id}.interaction.drag`;\n                const tick_mouseover = function() {\n                    if (typeof d3.select(this).node().focus == 'function') {\n                        d3.select(this).node().focus();\n                    }\n                    let cursor = (axis === 'x') ? 'ew-resize' : 'ns-resize';\n                    if (d3.event && d3.event.shiftKey) {\n                        cursor = 'move';\n                    }\n                    d3.select(this)\n                        .style('font-weight', 'bold')\n                        .style('cursor', cursor )\n                        .on(`keydown${namespace}`, tick_mouseover)\n                        .on(`keyup${namespace}`, tick_mouseover);\n                };\n                this.svg.container.selectAll(`.lz-axis.lz-${axis} .tick text`)\n                    .attr('tabindex', 0) // necessary to make the tick focusable so keypress events can be captured\n                    .on(`mouseover${namespace}`, tick_mouseover)\n                    .on(`mouseout${namespace}`, function() {\n                        d3.select(this)\n                            .style('font-weight', 'normal')\n                            .on(`keydown${namespace}`, null)\n                            .on(`keyup${namespace}`, null);\n                    })\n                    .on(`mousedown${namespace}`, () => {\n                        this.parent.startDrag(this, `${axis}_tick`);\n                    });\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * Force the height of this panel to the largest absolute height of the data in\n     *   all child data layers (if not null for any child data layers)\n     * @private\n     * @param {number|null} [target_height] A target height, which will be used in situations when the expected height can be\n     *   pre-calculated (eg when the layers are transitioning)\n     */\n    scaleHeightToData(target_height) {\n        target_height = +target_height || null;\n        if (target_height === null) {\n            this.data_layer_ids_by_z_index.forEach((id) => {\n                const dh = this.data_layers[id].getAbsoluteDataHeight();\n                if (+dh) {\n                    if (target_height === null) {\n                        target_height = +dh;\n                    } else {\n                        target_height = Math.max(target_height, +dh);\n                    }\n                }\n            });\n        }\n        if (+target_height) {\n            target_height += +this.layout.margin.top + +this.layout.margin.bottom;\n            this.setDimensions(this.layout.width, target_height);\n            this.parent.setDimensions();\n            this.parent.panel_ids_by_y_index.forEach((id) => {\n                this.parent.panels[id].layout.proportional_height = null;\n            });\n            this.parent.positionPanels();\n        }\n    }\n\n    /**\n     * Methods to set/unset element statuses across all data layers\n     * @private\n     * @param {String} status\n     * @param {Boolean} toggle\n     * @param {Array} filters\n     * @param {Boolean} exclusive\n     */\n    setElementStatusByFilters(status, toggle, filters, exclusive) {\n        this.data_layer_ids_by_z_index.forEach((id) => {\n            this.data_layers[id].setElementStatusByFilters(status, toggle, filters, exclusive);\n        });\n    }\n\n    /**\n     * Set/unset element statuses across all data layers\n     * @private\n     * @param {String} status\n     * @param {Boolean} toggle\n     */\n    setAllElementStatus(status, toggle) {\n        this.data_layer_ids_by_z_index.forEach((id) => {\n            this.data_layers[id].setAllElementStatus(status, toggle);\n        });\n    }\n}\n\nSTATUSES.verbs.forEach((verb, idx) => {\n    const adjective = STATUSES.adjectives[idx];\n    const antiverb = `un${verb}`;\n    // Set/unset status for arbitrarily many elements given a set of filters\n\n    /**\n     * @private\n     * @function highlightElementsByFilters\n     */\n    /**\n     *  @private\n     *  @function selectElementsByFilters\n     */\n    /**\n     *  @private\n     *  @function fadeElementsByFilters\n     */\n    /**\n     *  @private\n     *  @function hideElementsByFilters\n     */\n    Panel.prototype[`${verb}ElementsByFilters`] = function(filters, exclusive) {\n        if (typeof exclusive == 'undefined') {\n            exclusive = false;\n        } else {\n            exclusive = !!exclusive;\n        }\n        return this.setElementStatusByFilters(adjective, true, filters, exclusive);\n    };\n\n    /**\n     * @private\n     * @function unhighlightElementsByFilters\n     */\n    /**\n     *  @private\n     *  @function unselectElementsByFilters\n     */\n    /**\n     *  @private\n     *  @function unfadeElementsByFilters\n     */\n    /**\n     *  @private\n     *  @function unhideElementsByFilters\n     */\n    Panel.prototype[`${antiverb}ElementsByFilters`] = function(filters, exclusive) {\n        if (typeof exclusive == 'undefined') {\n            exclusive = false;\n        } else {\n            exclusive = !!exclusive;\n        }\n        return this.setElementStatusByFilters(adjective, false, filters, exclusive);\n    };\n\n    // Set/unset status for all elements\n    /**\n     * @private\n     * @function highlightAllElements\n     */\n    /**\n     *  @private\n     *  @function selectAllElements\n     */\n    /**\n     *  @private\n     *  @function fadeAllElements\n     */\n    /**\n     *  @private\n     *  @function hideAllElements\n     */\n    Panel.prototype[`${verb}AllElements`] = function() {\n        this.setAllElementStatus(adjective, true);\n        return this;\n    };\n\n    /**\n     * @private\n     * @function unhighlightAllElements\n     */\n    /**\n     *  @private\n     *  @function unselectAllElements\n     */\n    /**\n     * @private\n     * @function unfadeAllElements\n     */\n    /**\n     *  @private\n     *  @function unhideAllElements\n     */\n    Panel.prototype[`${antiverb}AllElements`] = function() {\n        this.setAllElementStatus(adjective, false);\n        return this;\n    };\n});\n\nexport {Panel as default};\n","/** @module */\nimport * as d3 from 'd3';\n\nimport Field from '../data/field';\nimport Plot from '../components/plot';\nimport {applyStyles} from './common';\n\n\n/**\n * Convert an integer chromosome position to an SI string representation (e.g. 23423456 => \"23.42\" (Mb))\n * @param {Number} pos Position\n * @param {Number} [exp] Exponent to use for the returned string, eg 6=> MB. If not specified, will attempt to guess\n *   the most appropriate SI prefix based on the number provided.\n * @param {Boolean} [suffix=false] Whether or not to append a suffix (e.g. \"Mb\") to the end of the returned string\n * @returns {string}\n */\nfunction positionIntToString(pos, exp, suffix) {\n    const exp_symbols = { 0: '', 3: 'K', 6: 'M', 9: 'G' };\n    suffix = suffix || false;\n    if (isNaN(exp) || exp === null) {\n        const log = Math.log(pos) / Math.LN10;\n        exp = Math.min(Math.max(log - (log % 3), 0), 9);\n    }\n    const places_exp = exp - Math.floor((Math.log(pos) / Math.LN10).toFixed(exp + 3));\n    const min_exp = Math.min(Math.max(exp, 0), 2);\n    const places = Math.min(Math.max(places_exp, min_exp), 12);\n    let ret = `${(pos / Math.pow(10, exp)).toFixed(places)}`;\n    if (suffix && typeof exp_symbols[exp] !== 'undefined') {\n        ret += ` ${exp_symbols[exp]}b`;\n    }\n    return ret;\n}\n\n/**\n * Convert an SI string chromosome position to an integer representation (e.g. \"5.8 Mb\" => 58000000)\n * @param {String} p The chromosome position\n * @returns {Number}\n */\nfunction positionStringToInt(p) {\n    let val = p.toUpperCase();\n    val = val.replace(/,/g, '');\n    const suffixre = /([KMG])[B]*$/;\n    const suffix = suffixre.exec(val);\n    let mult = 1;\n    if (suffix) {\n        if (suffix[1] === 'M') {\n            mult = 1e6;\n        } else if (suffix[1] === 'G') {\n            mult = 1e9;\n        } else {\n            mult = 1e3; //K\n        }\n        val = val.replace(suffixre, '');\n    }\n    val = Number(val) * mult;\n    return val;\n}\n\n/**\n * Generate a \"pretty\" set of ticks (multiples of 1, 2, or 5 on the same order of magnitude for the range)\n *   Based on R's \"pretty\" function: https://github.com/wch/r-source/blob/b156e3a711967f58131e23c1b1dc1ea90e2f0c43/src/appl/pretty.c\n * @param {Number[]} range A two-item array specifying [low, high] values for the axis range\n * @param {('low'|'high'|'both'|'neither')} [clip_range='neither'] What to do if first and last generated ticks extend\n *   beyond the range. Set this to \"low\", \"high\", \"both\", or \"neither\" to clip the first (low) or last (high) tick to\n *   be inside the range or allow them to extend beyond.\n *   e.g. \"low\" will clip the first (low) tick if it extends beyond the low end of the range but allow the\n *  last (high) tick to extend beyond the range. \"both\" clips both ends, \"neither\" allows both to extend beyond.\n * @param {Number} [target_tick_count=5] The approximate number of ticks you would like to be returned; may not be exact\n * @returns {Number[]}\n */\nfunction prettyTicks(range, clip_range, target_tick_count) {\n    if (typeof target_tick_count == 'undefined' || isNaN(parseInt(target_tick_count))) {\n        target_tick_count = 5;\n    }\n    target_tick_count = +target_tick_count;\n\n    const min_n = target_tick_count / 3;\n    const shrink_sml = 0.75;\n    const high_u_bias = 1.5;\n    const u5_bias = 0.5 + 1.5 * high_u_bias;\n\n    const d = Math.abs(range[0] - range[1]);\n    let c = d / target_tick_count;\n    if ((Math.log(d) / Math.LN10) < -2) {\n        c = (Math.max(Math.abs(d)) * shrink_sml) / min_n;\n    }\n\n    const base = Math.pow(10, Math.floor(Math.log(c) / Math.LN10));\n    let base_toFixed = 0;\n    if (base < 1 && base !== 0) {\n        base_toFixed = Math.abs(Math.round(Math.log(base) / Math.LN10));\n    }\n\n    let unit = base;\n    if ( ((2 * base) - c) < (high_u_bias * (c - unit)) ) {\n        unit = 2 * base;\n        if ( ((5 * base) - c) < (u5_bias * (c - unit)) ) {\n            unit = 5 * base;\n            if ( ((10 * base) - c) < (high_u_bias * (c - unit)) ) {\n                unit = 10 * base;\n            }\n        }\n    }\n\n    let ticks = [];\n    let i = parseFloat((Math.floor(range[0] / unit) * unit).toFixed(base_toFixed));\n    while (i < range[1]) {\n        ticks.push(i);\n        i += unit;\n        if (base_toFixed > 0) {\n            i = parseFloat(i.toFixed(base_toFixed));\n        }\n    }\n    ticks.push(i);\n\n    if (typeof clip_range == 'undefined' || ['low', 'high', 'both', 'neither'].indexOf(clip_range) === -1) {\n        clip_range = 'neither';\n    }\n    if (clip_range === 'low' || clip_range === 'both') {\n        if (ticks[0] < range[0]) {\n            ticks = ticks.slice(1);\n        }\n    }\n    if (clip_range === 'high' || clip_range === 'both') {\n        if (ticks[ticks.length - 1] > range[1]) {\n            ticks.pop();\n        }\n    }\n\n    return ticks;\n}\n\n/**\n * Replace placeholders in an html string with field values defined in a data object\n *  Only works on scalar values in data! Will ignore non-scalars. This is useful in, eg, tooltip templates.\n *\n *  NOTE: Trusts content exactly as given. XSS prevention is the responsibility of the implementer.\n * @param {Object} data\n * @param {String} html A placeholder string in which to substitute fields. Supports several template options:\n *   `{{field_name}}` is a variable placeholder for the value of `field_name` from the provided data\n *   `{{#if field_name}} Conditional text {{/if}}` will insert the contents of the tag only if the value exists.\n *     Since this is only an existence check, **variables with a value of 0 will be evaluated as true**.\n *     This can be used with namespaced values, `{{#if assoc:field}}`; any dynamic namespacing will be applied when the\n *     layout is first retrieved.\n * @returns {string}\n */\nfunction parseFields(data, html) {\n    if (typeof data != 'object') {\n        throw new Error('invalid arguments: data is not an object');\n    }\n    if (typeof html != 'string') {\n        throw new Error('invalid arguments: html is not a string');\n    }\n    // `tokens` is like [token,...]\n    // `token` is like {text: '...'} or {variable: 'foo|bar'} or {condition: 'foo|bar'} or {close: 'if'}\n    const tokens = [];\n    const regex = /{{(?:(#if )?([A-Za-z0-9_:|]+)|(\\/if))}}/;\n    while (html.length > 0) {\n        const m = regex.exec(html);\n        if (!m) {\n            tokens.push({text: html}); html = '';\n        } else if (m.index !== 0) {\n            tokens.push({text: html.slice(0, m.index)}); html = html.slice(m.index);\n        } else if (m[1] === '#if ') {\n            tokens.push({condition: m[2]}); html = html.slice(m[0].length);\n        } else if (m[2]) {\n            tokens.push({variable: m[2]}); html = html.slice(m[0].length);\n        } else if (m[3] === '/if') {\n            tokens.push({close: 'if'}); html = html.slice(m[0].length);\n        } else {\n            console.error(`Error tokenizing tooltip when remaining template is ${JSON.stringify(html)} and previous tokens are ${JSON.stringify(tokens)} and current regex match is ${JSON.stringify([m[1], m[2], m[3]])}`);\n            html = html.slice(m[0].length);\n        }\n    }\n    const astify = function () {\n        const token = tokens.shift();\n        if (typeof token.text !== 'undefined' || token.variable) {\n            return token;\n        } else if (token.condition) {\n            token.then = [];\n            while (tokens.length > 0) {\n                if (tokens[0].close === 'if') {\n                    tokens.shift();\n                    break;\n                }\n                token.then.push(astify());\n            }\n            return token;\n        } else {\n            console.error(`Error making tooltip AST due to unknown token ${JSON.stringify(token)}`);\n            return { text: '' };\n        }\n    };\n    // `ast` is like [thing,...]\n    // `thing` is like {text: \"...\"} or {variable:\"foo|bar\"} or {condition: \"foo|bar\", then:[thing,...]}\n    const ast = [];\n    while (tokens.length > 0) {\n        ast.push(astify());\n    }\n\n    const resolve = function (variable) {\n        if (!Object.prototype.hasOwnProperty.call(resolve.cache, variable)) {\n            resolve.cache[variable] = (new Field(variable)).resolve(data);\n        }\n        return resolve.cache[variable];\n    };\n    resolve.cache = {};\n    const render_node = function (node) {\n        if (typeof node.text !== 'undefined') {\n            return node.text;\n        } else if (node.variable) {\n            try {\n                const value = resolve(node.variable);\n                if (['string', 'number', 'boolean'].indexOf(typeof value) !== -1) {\n                    return value;\n                }\n                if (value === null) {\n                    return '';\n                }\n            } catch (error) {\n                console.error(`Error while processing variable ${JSON.stringify(node.variable)}`);\n            }\n            return `{{${node.variable}}}`;\n        } else if (node.condition) {\n            try {\n                const condition = resolve(node.condition);\n                if (condition || condition === 0) {\n                    return node.then.map(render_node).join('');\n                }\n            } catch (error) {\n                console.error(`Error while processing condition ${JSON.stringify(node.variable)}`);\n            }\n            return '';\n        } else {\n            console.error(`Error rendering tooltip due to unknown AST node ${JSON.stringify(node)}`);\n        }\n    };\n    return ast.map(render_node).join('');\n}\n\n/**\n * Populate a single element with a LocusZoom plot. This is the primary means of generating a new plot, and is part\n *  of the public interface for LocusZoom.\n * @public\n * @param {String|d3.selection} selector CSS selector for the container element where the plot will be mounted. Any pre-existing\n *   content in the container will be completely replaced.\n * @param {DataSources} datasource Ensemble of data providers used by the plot\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n * @returns {Plot} The newly created plot instance\n */\nfunction populate(selector, datasource, layout) {\n    if (typeof selector == 'undefined') {\n        throw new Error('LocusZoom.populate selector not defined');\n    }\n    // Empty the selector of any existing content\n    d3.select(selector).html('');\n    let plot;\n    d3.select(selector).call(function(target) {\n        // Require each containing element have an ID. If one isn't present, create one.\n        if (typeof target.node().id == 'undefined') {\n            let iterator = 0;\n            while (!d3.select(`#lz-${iterator}`).empty()) {\n                iterator++;\n            }\n            target.attr('id', `#lz-${iterator}`);\n        }\n        // Create the plot\n        plot = new Plot(target.node().id, datasource, layout);\n        plot.container = target.node();\n        // Detect HTML `data-region` attribute, and use it to fill in state values if present\n        if (typeof target.node().dataset !== 'undefined' && typeof target.node().dataset.region !== 'undefined') {\n            const parsed_state = parsePositionQuery(target.node().dataset.region);\n            Object.keys(parsed_state).forEach(function(key) {\n                plot.state[key] = parsed_state[key];\n            });\n        }\n        // Add an SVG to the div and set its dimensions\n        plot.svg = d3.select(`div#${plot.id}`)\n            .append('svg')\n            .attr('version', '1.1')\n            .attr('xmlns', 'http://www.w3.org/2000/svg')\n            .attr('id', `${plot.id}_svg`)\n            .attr('class', 'lz-locuszoom')\n            .call(applyStyles, plot.layout.style);\n\n        plot.setDimensions();\n        plot.positionPanels();\n        // Initialize the plot\n        plot.initialize();\n        // If the plot has defined data sources then trigger its first mapping based on state values\n        if (datasource) {\n            plot.refresh();\n        }\n    });\n    return plot;\n}\n\n/**\n * Parse region queries into their constituent parts\n * @param {String} x A chromosome position query. May be any of the forms `chr:start-end`, `chr:center+offset`,\n *   or `chr:pos`\n * @returns {{chr:*, start: *, end:*} | {chr:*, position:*}}\n */\nfunction parsePositionQuery(x) {\n    const chrposoff = /^(\\w+):([\\d,.]+[kmgbKMGB]*)([-+])([\\d,.]+[kmgbKMGB]*)$/;\n    const chrpos = /^(\\w+):([\\d,.]+[kmgbKMGB]*)$/;\n    let match = chrposoff.exec(x);\n    if (match) {\n        if (match[3] === '+') {\n            const center = positionStringToInt(match[2]);\n            const offset = positionStringToInt(match[4]);\n            return {\n                chr:match[1],\n                start: center - offset,\n                end: center + offset,\n            };\n        } else {\n            return {\n                chr: match[1],\n                start: positionStringToInt(match[2]),\n                end: positionStringToInt(match[4]),\n            };\n        }\n    }\n    match = chrpos.exec(x);\n    if (match) {\n        return {\n            chr:match[1],\n            position: positionStringToInt(match[2]),\n        };\n    }\n    return null;\n}\n\nexport { parseFields, parsePositionQuery, populate, positionIntToString, positionStringToInt, prettyTicks };\n","/** @module */\nimport * as d3 from 'd3';\n\nimport {deepCopy, merge} from '../helpers/layouts';\nimport Requester from '../data/requester';\nimport Toolbar from './toolbar';\nimport Panel from './panel';\nimport {generateCurtain, generateLoader} from '../helpers/common';\n\n/**\n * Default/ expected configuration parameters for basic plotting; most plots will override\n *\n * @protected\n * @static\n * @type {Object}\n */\nconst default_layout = {\n    state: {},\n    width: 1,\n    height: 1,\n    min_width: 1,\n    min_height: 1,\n    responsive_resize: false, // Allowed values: false, \"width_only\" (synonym for true)\n    panels: [],\n    toolbar: {\n        widgets: [],\n    },\n    panel_boundaries: true,\n    mouse_guide: true,\n};\n\n/**\n * Check that position fields (chr, start, end) are provided where appropriate, and ensure that the plot fits within\n *  any constraints specified by the layout\n *\n * This function has side effects; it mutates the proposed state in order to meet certain bounds checks etc.\n * @param {Object} new_state\n * @param {Number} new_state.chr\n * @param {Number} new_state.start\n * @param {Number} new_state.end\n * @param {Object} layout\n * @returns {*|{}}\n */\nfunction _updateStatePosition(new_state, layout) {\n\n    new_state = new_state || {};\n    layout = layout || {};\n\n    // If a \"chr\", \"start\", and \"end\" are present then resolve start and end\n    // to numeric values that are not decimal, negative, or flipped\n    let validated_region = false;\n    if (typeof new_state.chr != 'undefined' && typeof new_state.start != 'undefined' && typeof new_state.end != 'undefined') {\n        // Determine a numeric scale and midpoint for the attempted region,\n        var attempted_midpoint = null; var attempted_scale;\n        new_state.start = Math.max(parseInt(new_state.start), 1);\n        new_state.end = Math.max(parseInt(new_state.end), 1);\n        if (isNaN(new_state.start) && isNaN(new_state.end)) {\n            new_state.start = 1;\n            new_state.end = 1;\n            attempted_midpoint = 0.5;\n            attempted_scale = 0;\n        } else if (isNaN(new_state.start) || isNaN(new_state.end)) {\n            attempted_midpoint = new_state.start || new_state.end;\n            attempted_scale = 0;\n            new_state.start = (isNaN(new_state.start) ? new_state.end : new_state.start);\n            new_state.end = (isNaN(new_state.end) ? new_state.start : new_state.end);\n        } else {\n            attempted_midpoint = Math.round((new_state.start + new_state.end) / 2);\n            attempted_scale = new_state.end - new_state.start;\n            if (attempted_scale < 0) {\n                const temp = new_state.start;\n                new_state.end = new_state.start;\n                new_state.start = temp;\n                attempted_scale = new_state.end - new_state.start;\n            }\n            if (attempted_midpoint < 0) {\n                new_state.start = 1;\n                new_state.end = 1;\n                attempted_scale = 0;\n            }\n        }\n        validated_region = true;\n    }\n\n    // Constrain w/r/t layout-defined minimum region scale\n    if (!isNaN(layout.min_region_scale) && validated_region && attempted_scale < layout.min_region_scale) {\n        new_state.start = Math.max(attempted_midpoint - Math.floor(layout.min_region_scale / 2), 1);\n        new_state.end = new_state.start + layout.min_region_scale;\n    }\n\n    // Constrain w/r/t layout-defined maximum region scale\n    if (!isNaN(layout.max_region_scale) && validated_region && attempted_scale > layout.max_region_scale) {\n        new_state.start = Math.max(attempted_midpoint - Math.floor(layout.max_region_scale / 2), 1);\n        new_state.end = new_state.start + layout.max_region_scale;\n    }\n\n    return new_state;\n}\n\n\nclass Plot {\n    /**\n     * An independent LocusZoom object that renders a unique set of data and subpanels.\n     * Many such LocusZoom objects can exist simultaneously on a single page, each having its own layout.\n     *\n     * This creates a new plot instance, but does not immediately render it. For practical use, it may be more convenient\n     * to use the `LocusZoom.populate` helper method.\n     *\n     * @param {String} id The ID of the plot. Often corresponds to the ID of the container element on the page\n     *   where the plot is rendered..\n     * @param {DataSources} datasource Ensemble of data providers used by the plot\n     * @param {Object} layout A JSON-serializable object of layout configuration parameters\n    */\n    constructor(id, datasource, layout) {\n        /**\n         * @private\n         * @member Boolean}\n         */\n        this.initialized = false;\n\n        /**\n         *  @private\n         *  @member {Plot}\n         */\n        this.parent_plot = this;\n\n        /**\n         *  @public\n         *  @member {String}\n         */\n        this.id = id;\n\n        /**\n         * @private\n         * @member {Element}\n         */\n        this.container = null;\n        /**\n         * Selector for a node that will contain the plot. (set externally by populate methods)\n         * @private\n         * @member {d3.selection}\n         */\n        this.svg = null;\n\n        /**\n         * Direct access to panel instances, keyed by panel ID. Used primarily for introspection/ development.\n         *  @public\n         *  @member {Object.<String, Number>}\n         */\n        this.panels = {};\n        /**\n         * TODO: This is currently used by external classes that manipulate the parent and may indicate room for a helper method in the api to coordinate boilerplate\n         * @private\n         * @member {String[]}\n         */\n        this.panel_ids_by_y_index = [];\n\n        /**\n         * Track update operations (reMap) performed on all child panels, and notify the parent plot when complete\n         * TODO: Reconsider whether we need to be tracking this as global state outside of context of specific operations\n         * @protected\n         * @member {Promise[]}\n         */\n        this.remap_promises = [];\n\n\n        /**\n         * The current layout options for the plot, including the effect of any resizing events or dynamically\n         *  generated config produced during rendering options.\n         * @public\n         * @type {Object}\n         */\n        this.layout = layout;\n        merge(this.layout, default_layout); // TODO: evaluate how the default layout is applied\n\n        /**\n         * Values in the layout object may change during rendering etc. Retain a copy of the original plot options\n         * @protected\n         * @member {Object}\n         */\n        this._base_layout = deepCopy(this.layout);\n\n        /**\n         * Create a shortcut to the state in the layout on the Plot. Tracking in the layout allows the plot to be created\n         *   with initial state/setup.\n         *\n         * Tracks state of the plot, eg start and end position\n         * @public\n         * @member {Object}\n         */\n        this.state = this.layout.state;\n\n        /**\n         * @private\n         * @member {Requester}\n         */\n        this.lzd = new Requester(datasource);\n\n        /**\n         * Track global event listeners that are used by LZ. This allows cleanup of listeners when plot is destroyed.\n         * @private\n         * @member {Map} A nested hash of entries: { parent: {event_name: [listeners] } }\n         */\n        this._external_listeners = new Map();\n\n        /**\n         * Known event hooks that the panel can respond to\n         * @protected\n         * @member {Object}\n         */\n        this.event_hooks = {\n            'layout_changed': [],  // Many rerendering operations, including dimensions changed, element highlighted, or rerender on chanegd data. Caution: Direct layout mutations might not be captured by this event.\n            'data_requested': [], // A request has been made for new data from any data source used in the plot\n            'data_rendered': [],  // Data from a request has been received and rendered in the plot\n            'element_clicked': [], // Select or unselect\n            'element_selection': [], // Element becomes active (only)\n            'match_requested': [], // A data layer is attempting to highlight matching points (internal use only)\n            'panel_removed': [],  // A panel has been removed (eg via the \"x\" button in plot)\n            'region_changed': [], // The viewing region (chr/start/end) has been changed\n            'state_changed': [],  // Only triggered when a state change causes rerender\n        };\n\n        /**\n         * @callback eventCallback\n         * @param {object} eventData A description of the event\n         * @param {String|null} eventData.sourceID The unique identifier (eg plot or parent name) of the element that\n         *  triggered the event. Will be automatically filled in if not explicitly provided.\n         * @param {Object|null} eventData.context Any additional information to be passed to the callback, eg the data\n         *   associated with a clicked plot element\n         */\n\n        /**\n         * Event information describing interaction (e.g. panning and zooming) is stored on the plot\n         * TODO: Add/ document details of interaction structure as we expand\n         * @private\n         * @member {{panel_id: String, linked_panel_ids: Array, x_linked: *, dragging: *, zooming: *}}\n         * @returns {Plot}\n         */\n        this.interaction = {};\n\n        // Initialize the layout\n        this.initializeLayout();\n    }\n\n    /******* User-facing methods that allow manipulation of the plot instance: the public interface */\n\n    /**\n     * There are several events that a LocusZoom plot can \"emit\" when appropriate, and LocusZoom supports registering\n     *   \"hooks\" for these events which are essentially custom functions intended to fire at certain times.\n     *\n     * The following plot-level events are currently supported:\n     *   - `layout_changed` - context: plot - Any aspect of the plot's layout (including dimensions or state) has changed.\n     *   - `data_requested` - context: plot - A request for new data from any data source used in the plot has been made.\n     *   - `data_rendered` - context: plot - Data from a request has been received and rendered in the plot.\n     *   - `element_clicked` - context: plot - A data element in any of the plot's data layers has been clicked.\n     *   - `element_selection` - context: plot - Triggered when an element changes \"selection\" status, and identifies\n     *        whether the element is being selected or deselected.\n     *\n     * To register a hook for any of these events use `plot.on('event_name', function() {})`.\n     *\n     * There can be arbitrarily many functions registered to the same event. They will be executed in the order they\n     *   were registered. The this context bound to each event hook function is dependent on the type of event, as\n     *   denoted above. For example, when data_requested is emitted the context for this in the event hook will be the\n     *   plot itself, but when element_clicked is emitted the context for this in the event hook will be the element\n     *   that was clicked.\n     *\n     * @public\n     * @param {String} event The name of an event (as defined in `event_hooks`)\n     * @param {eventCallback} hook\n     * @returns {function} The registered event listener\n     */\n    on(event, hook) {\n        if (typeof 'event' != 'string' || !Array.isArray(this.event_hooks[event])) {\n            throw new Error(`Unable to register event hook, invalid event: ${event.toString()}`);\n        }\n        if (typeof hook != 'function') {\n            throw new Error('Unable to register event hook, invalid hook function passed');\n        }\n        this.event_hooks[event].push(hook);\n        return hook;\n    }\n\n    /**\n     * Remove one or more previously defined event listeners\n     * @public\n     * @param {String} event The name of an event (as defined in `event_hooks`)\n     * @param {eventCallback} [hook] The callback to deregister\n     * @returns {Plot}\n     */\n    off(event, hook) {\n        const theseHooks = this.event_hooks[event];\n        if (typeof 'event' != 'string' || !Array.isArray(theseHooks)) {\n            throw new Error(`Unable to remove event hook, invalid event: ${event.toString()}`);\n        }\n        if (hook === undefined) {\n            // Deregistering all hooks for this event may break basic functionality, and should only be used during\n            //  cleanup operations (eg to prevent memory leaks)\n            this.event_hooks[event] = [];\n        } else {\n            const hookMatch = theseHooks.indexOf(hook);\n            if (hookMatch !== -1) {\n                theseHooks.splice(hookMatch, 1);\n            } else {\n                throw new Error('The specified event listener is not registered and therefore cannot be removed');\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Handle running of event hooks when an event is emitted\n     * @public\n     * @param {string} event A known event name\n     * @param {*} eventData Data or event description that will be passed to the event listener\n     * @returns {Plot}\n     */\n    emit(event, eventData) {\n        // TODO: there are small differences between the emit implementation between plots and panels. In the future,\n        //  DRY this code via mixins, and make sure to keep the interfaces compatible when refactoring.\n        if (typeof 'event' != 'string' || !Array.isArray(this.event_hooks[event])) {\n            throw new Error(`LocusZoom attempted to throw an invalid event: ${event.toString()}`);\n        }\n        const sourceID = this.getBaseId();\n        this.event_hooks[event].forEach((hookToRun) => {\n            let eventContext;\n            if (eventData && eventData.sourceID) {\n                // If we detect that an event originated elsewhere (via bubbling or externally), preserve the context\n                //  when re-emitting the event to plot-level listeners\n                eventContext = eventData;\n            } else {\n                eventContext = {sourceID: sourceID, data: eventData || null};\n            }\n            // By default, any handlers fired here (either directly, or bubbled) will see the plot as the\n            //  value of `this`. If a bound function is registered as a handler, the previously bound `this` will\n            //  override anything provided to `call` below.\n            hookToRun.call(this, eventContext);\n        });\n        return this;\n    }\n\n    /**\n     * Create a new panel from a layout, and handle the work of initializing and placing the panel on the plot\n     * @public\n     * @param {Object} layout\n     * @returns {Panel}\n     */\n    addPanel(layout) {\n        // Sanity checks\n        if (typeof layout !== 'object') {\n            throw new Error('Invalid panel layout');\n        }\n\n        // Create the Panel and set its parent\n        const panel = new Panel(layout, this);\n\n        // Store the Panel on the Plot\n        this.panels[panel.id] = panel;\n\n        // If a discrete y_index was set in the layout then adjust other panel y_index values to accommodate this one\n        if (panel.layout.y_index !== null && !isNaN(panel.layout.y_index)\n            && this.panel_ids_by_y_index.length > 0) {\n            // Negative y_index values should count backwards from the end, so convert negatives to appropriate values here\n            if (panel.layout.y_index < 0) {\n                panel.layout.y_index = Math.max(this.panel_ids_by_y_index.length + panel.layout.y_index, 0);\n            }\n            this.panel_ids_by_y_index.splice(panel.layout.y_index, 0, panel.id);\n            this.applyPanelYIndexesToPanelLayouts();\n        } else {\n            const length = this.panel_ids_by_y_index.push(panel.id);\n            this.panels[panel.id].layout.y_index = length - 1;\n        }\n\n        // Determine if this panel was already in the layout.panels array.\n        // If it wasn't, add it. Either way store the layout.panels array index on the panel.\n        let layout_idx = null;\n        this.layout.panels.forEach((panel_layout, idx) => {\n            if (panel_layout.id === panel.id) {\n                layout_idx = idx;\n            }\n        });\n        if (layout_idx === null) {\n            layout_idx = this.layout.panels.push(this.panels[panel.id].layout) - 1;\n        }\n        this.panels[panel.id].layout_idx = layout_idx;\n\n        // Call positionPanels() to keep panels from overlapping and ensure filling all available vertical space\n        if (this.initialized) {\n            this.positionPanels();\n            // Initialize and load data into the new panel\n            this.panels[panel.id].initialize();\n            this.panels[panel.id].reMap();\n            // An extra call to setDimensions with existing discrete dimensions fixes some rounding errors with tooltip\n            // positioning. TODO: make this additional call unnecessary.\n            this.setDimensions(this.layout.width, this.layout.height);\n        }\n        return this.panels[panel.id];\n    }\n\n    /**\n     * Clear all state, tooltips, and other persisted data associated with one (or all) panel(s) in the plot\n     *\n     * This is useful when reloading an existing plot with new data, eg \"click for genome region\" links.\n     *   This is a utility method for custom usage. It is not fired automatically during normal rerender of existing panels\n     *   @public\n     *   @param {String} [panelId] If provided, clear state for only this panel. Otherwise, clear state for all panels.\n     *   @param {('wipe'|'reset')} [mode='wipe'] Optionally specify how state should be cleared. `wipe` deletes all data\n     *     and is useful for when the panel is being removed; `reset` is best when the panel will be reused in place.\n     * @returns {Plot}\n     */\n    clearPanelData(panelId, mode) {\n        mode = mode || 'wipe';\n\n        // TODO: Add unit tests for this method\n        let panelsList;\n        if (panelId) {\n            panelsList = [panelId];\n        } else {\n            panelsList = Object.keys(this.panels);\n        }\n\n        panelsList.forEach((pid) => {\n            this.panels[pid].data_layer_ids_by_z_index.forEach((dlid) => {\n                const layer = this.panels[pid].data_layers[dlid];\n                layer.destroyAllTooltips();\n\n                delete layer.layer_state;\n                delete this.layout.state[layer.state_id];\n                if (mode === 'reset') {\n                    layer._setDefaultState();\n                }\n            });\n        });\n        return this;\n    }\n\n    /**\n     * Remove the panel from the plot, and clear any state, tooltips, or other visual elements belonging to nested content\n     * @public\n     * @param {String} id\n     * @returns {Plot}\n     */\n    removePanel(id) {\n        if (!this.panels[id]) {\n            throw new Error(`Unable to remove panel, ID not found: ${id}`);\n        }\n\n        // Hide all panel boundaries\n        this.panel_boundaries.hide();\n\n        // Destroy all tooltips and state vars for all data layers on the panel\n        this.clearPanelData(id);\n\n        // Remove all panel-level HTML overlay elements\n        this.panels[id].loader.hide();\n        this.panels[id].toolbar.destroy(true);\n        this.panels[id].curtain.hide();\n\n        // Remove the svg container for the panel if it exists\n        if (this.panels[id].svg.container) {\n            this.panels[id].svg.container.remove();\n        }\n\n        // Delete the panel and its presence in the plot layout and state\n        this.layout.panels.splice(this.panels[id].layout_idx, 1);\n        delete this.panels[id];\n        delete this.layout.state[id];\n\n        // Update layout_idx values for all remaining panels\n        this.layout.panels.forEach((panel_layout, idx) => {\n            this.panels[panel_layout.id].layout_idx = idx;\n        });\n\n        // Remove the panel id from the y_index array\n        this.panel_ids_by_y_index.splice(this.panel_ids_by_y_index.indexOf(id), 1);\n        this.applyPanelYIndexesToPanelLayouts();\n\n        // Call positionPanels() to keep panels from overlapping and ensure filling all available vertical space\n        if (this.initialized) {\n            // Allow the plot to shrink when panels are removed, by forcing it to recalculate min dimensions from scratch\n            this.layout.min_height = this._base_layout.min_height;\n            this.layout.min_width = this._base_layout.min_width;\n\n            this.positionPanels();\n            // An extra call to setDimensions with existing discrete dimensions fixes some rounding errors with tooltip\n            // positioning. TODO: make this additional call unnecessary.\n            this.setDimensions(this.layout.width, this.layout.height);\n        }\n\n        this.emit('panel_removed', id);\n\n        return this;\n    }\n\n    /**\n     * Refresh (or fetch) a plot's data from sources, regardless of whether position or state has changed\n     * @public\n     * @returns {Promise}\n     */\n    refresh() {\n        return this.applyState();\n    }\n\n    /**\n     * A user-defined callback function that can receive (and potentially act on) new plot data.\n     * @callback externalDataCallback\n     * @param {Object} new_data The body resulting from a data request. This represents the same information that would be passed to\n     *  a data layer making an equivalent request.\n     */\n\n    /**\n     * A user-defined callback function that can respond to errors received during a previous operation\n     * @callback externalErrorCallback\n     * @param err A representation of the error that occurred\n     */\n\n    /**\n     * Allow newly fetched data to be made available outside the LocusZoom plot. For example, a callback could be\n     *  registered to draw an HTML table of top GWAS hits, and update that table whenever the plot region changes.\n     *\n     * This is a convenience method for external hooks. It registers an event listener and returns parsed data,\n     *  using the same fields syntax and underlying methods as data layers.\n     *\n     * @public\n     * @param {String[]} fields An array of field names and transforms, in the same syntax used by a data layer.\n     *  Different data sources should be prefixed by the source name.\n     * @param {externalDataCallback} success_callback Used defined function that is automatically called any time that\n     *  new data is received by the plot.\n     * @param {Object} [opts] Options\n     * @param {externalErrorCallback} [opts.onerror] User defined function that is automatically called if a problem\n     *  occurs during the data request or subsequent callback operations\n     * @param {boolean} [opts.discrete=false] Normally the callback will subscribe to the combined body from the chain,\n     *  which may not be in a format that matches what the external callback wants to do. If discrete=true, returns the\n     *  uncombined record info\n     *  @return {function} The newly created event listener, to allow for later cleanup/removal\n     */\n    subscribeToData(fields, success_callback, opts) {\n        opts = opts || {};\n\n        // Register an event listener that is notified whenever new data has been rendered\n        const error_callback = opts.onerror || function (err) {\n            console.log('An error occurred while acting on an external callback', err);\n        };\n\n        const listener = () => {\n            try {\n                this.lzd.getData(this.state, fields)\n                    .then((new_data) => success_callback(opts.discrete ? new_data.discrete : new_data.body))\n                    .catch(error_callback);\n            } catch (error) {\n                // In certain cases, errors are thrown before a promise can be generated, and LZ error display seems to rely on these errors bubbling up\n                error_callback(error);\n            }\n        };\n        this.on('data_rendered', listener);\n        return listener;\n    }\n\n    /**\n     * Update state values and trigger a pull for fresh data on all data sources for all data layers\n     * @public\n     * @param state_changes\n     * @returns {Promise} A promise that resolves when all data fetch and update operations are complete\n     */\n    applyState(state_changes) {\n        state_changes = state_changes || {};\n        if (typeof state_changes != 'object') {\n            throw new Error(`applyState only accepts an object; ${typeof state_changes} given`);\n        }\n\n        // Track what parameters will be modified. For bounds checking, we must take some preset values into account.\n        let mods = { chr: this.state.chr, start: this.state.start, end: this.state.end };\n        for (var property in state_changes) {\n            mods[property] = state_changes[property];\n        }\n        mods = _updateStatePosition(mods, this.layout);\n\n        // Apply new state to the actual state\n        for (property in mods) {\n            this.state[property] = mods[property];\n        }\n\n        // Generate requests for all panels given new state\n        this.emit('data_requested');\n        this.remap_promises = [];\n        this.loading_data = true;\n        for (let id in this.panels) {\n            this.remap_promises.push(this.panels[id].reMap());\n        }\n\n        return Promise.all(this.remap_promises)\n            .catch((error) => {\n                console.error(error);\n                this.curtain.show(error.message || error);\n                this.loading_data = false;\n            })\n            .then(() => {\n                // Update toolbar / widgets\n                this.toolbar.update();\n\n                // Apply panel-level state values\n                this.panel_ids_by_y_index.forEach((panel_id) => {\n                    const panel = this.panels[panel_id];\n                    panel.toolbar.update();\n                    // Apply data-layer-level state values\n                    panel.data_layer_ids_by_z_index.forEach((data_layer_id) => {\n                        panel.data_layers[data_layer_id].applyAllElementStatus();\n                    });\n                });\n\n                // Emit events\n                this.emit('layout_changed');\n                this.emit('data_rendered');\n                this.emit('state_changed', state_changes);\n\n                // An interesting quirk of region changing in LZ: the final region is not always the same as the requested region\n                //   (example: zoom out beyond max, or request non-integer position)\n                // Echo the actual plot region as the final source of truth\n                const { chr, start, end } = this.state;\n                const position_changed = Object.keys(state_changes)\n                    .some((key) => ['chr', 'start', 'end'].includes(key));\n\n                if (position_changed) {\n                    this.emit('region_changed', { chr, start, end });\n                }\n\n                this.loading_data = false;\n\n            });\n    }\n\n    /**\n     * Keep a record of event listeners that are defined outside of the LocusZoom boundary (and therefore would not\n     *  get cleaned up when the plot was removed from the DOM). For example, window resize or mouse events.\n     * This allows safe cleanup of the plot on removal from the page\n     * @param {Node} target The node on which the listener has been defined\n     * @param {String} event_name\n     * @param {function} listener The handle for the event listener to be cleaned up\n     */\n    trackExternalListener(target, event_name, listener) {\n        if (!this._external_listeners.has(target)) {\n            this._external_listeners.set(target, new Map());\n        }\n        const container = this._external_listeners.get(target);\n\n        const tracker = container.get(event_name) || [];\n        if (!tracker.includes(listener)) {\n            tracker.push(listener);\n        }\n        container.set(event_name, tracker);\n    }\n\n    /**\n     * Remove the plot from the page, and clean up any globally registered event listeners\n     *\n     * Internally, the plot retains references to some nodes via selectors; it may be useful to delete the plot\n     *  instance after calling this method\n     */\n    destroy() {\n        for (let [target, registered_events] of this._external_listeners.entries()) {\n            for (let [event_name, listeners] of registered_events) {\n                for (let listener of listeners) {\n                    target.removeEventListener(event_name, listener);\n                }\n            }\n        }\n\n        // Clear the SVG, plus other HTML nodes (like toolbar) that live under the same parent\n        const parent = this.svg.node().parentNode;\n        if (!parent) {\n            throw new Error('Plot has already been removed');\n        }\n        while (parent.lastElementChild) {\n            parent.removeChild(parent.lastElementChild);\n        }\n        // Clear toolbar event listeners defined on the parent lz-container. As of 2020 this appears to be the\n        //  state of the art cross-browser DOM API for this task.\n        // eslint-disable-next-line no-self-assign\n        parent.outerHTML = parent.outerHTML;\n\n        this.initialized = false;\n\n        this.svg = null;\n        this.panels = null;\n    }\n\n    /******* The private interface: methods only used by LocusZoom internals */\n    /**\n     * Track whether the target panel can respond to mouse interaction events\n     * @private\n     * @param {String} panel_id\n     * @returns {boolean}\n     */\n    _canInteract(panel_id) {\n        panel_id = panel_id || null;\n        if (panel_id) {\n            return ((typeof this.interaction.panel_id == 'undefined' || this.interaction.panel_id === panel_id) && !this.loading_data);\n        } else {\n            return !(this.interaction.dragging || this.interaction.zooming || this.loading_data);\n        }\n    }\n\n    /**\n     * Get an object with the x and y coordinates of the plot's origin in terms of the entire page\n     *  This returns a result with absolute position relative to the page, regardless of current scrolling\n     * Necessary for positioning any HTML elements over the plot\n     * @private\n     * @returns {{x: Number, y: Number, width: Number, height: Number}}\n     */\n    _getPageOrigin() {\n        const bounding_client_rect = this.svg.node().getBoundingClientRect();\n        let x_offset = document.documentElement.scrollLeft || document.body.scrollLeft;\n        let y_offset = document.documentElement.scrollTop || document.body.scrollTop;\n        let container = this.svg.node();\n        while (container.parentNode !== null) {\n            // TODO: Recursively seeks offsets for highest non-static parent node. This can lead to incorrect\n            //   calculations of, for example, x coordinate relative to the page. Revisit this logic.\n            container = container.parentNode;\n            if (container !== document && d3.select(container).style('position') !== 'static') {\n                x_offset = -1 * container.getBoundingClientRect().left;\n                y_offset = -1 * container.getBoundingClientRect().top;\n                break;\n            }\n        }\n        return {\n            x: x_offset + bounding_client_rect.left,\n            y: y_offset + bounding_client_rect.top,\n            width: bounding_client_rect.width,\n            height: bounding_client_rect.height,\n        };\n    }\n\n    /**\n     * Get the top and left offset values for the plot's container element (the div that was populated)\n     * @private\n     * @returns {{top: number, left: number}}\n     */\n    getContainerOffset() {\n        const offset = { top: 0, left: 0 };\n        let container = this.container.offsetParent || null;\n        while (container !== null) {\n            offset.top += container.offsetTop;\n            offset.left += container.offsetLeft;\n            container = container.offsetParent || null;\n        }\n        return offset;\n    }\n\n    /**\n     * Notify each child panel of the plot of changes in panel ordering/ arrangement\n     * @private\n     */\n    applyPanelYIndexesToPanelLayouts () {\n        this.panel_ids_by_y_index.forEach((pid, idx) => {\n            this.panels[pid].layout.y_index = idx;\n        });\n    }\n\n    /**\n     * Get the qualified ID pathname for the plot\n     * @private\n     * @returns {String}\n     */\n    getBaseId () {\n        return this.id;\n    }\n\n    /**\n     * Helper method to sum the proportional dimensions of panels, a value that's checked often as panels are added/removed\n     * @private\n     * @param {('Height'|'Width')} dimension\n     * @returns {number}\n     */\n    sumProportional(dimension) {\n        if (dimension !== 'height' && dimension !== 'width') {\n            throw new Error('Bad dimension value passed to sumProportional');\n        }\n        let total = 0;\n        for (let id in this.panels) {\n            // Ensure every panel contributing to the sum has a non-zero proportional dimension\n            if (!this.panels[id].layout[`proportional_${dimension}`]) {\n                this.panels[id].layout[`proportional_${dimension}`] = 1 / Object.keys(this.panels).length;\n            }\n            total += this.panels[id].layout[`proportional_${dimension}`];\n        }\n        return total;\n    }\n\n    /**\n     * Resize the plot to fit the bounding container\n     * @private\n     * @returns {Plot}\n     */\n    rescaleSVG() {\n        const clientRect = this.svg.node().getBoundingClientRect();\n        this.setDimensions(clientRect.width, clientRect.height);\n        return this;\n    }\n\n    /**\n     * Prepare the plot for first use by performing parameter validation, setting up panels, and calculating dimensions\n     * @private\n     * @returns {Plot}\n     */\n    initializeLayout() {\n\n        // Sanity check layout values\n        if (isNaN(this.layout.width) || this.layout.width <= 0) {\n            throw new Error('Plot layout parameter `width` must be a positive number');\n        }\n        if (isNaN(this.layout.height) || this.layout.height <= 0) {\n            throw new Error('Plot layout parameter `width` must be a positive number');\n        }\n\n        // Backwards compatible check: there was previously a third option. Anything truthy should thus act as \"responsive_resize: true\"\n        this.layout.responsive_resize = !!this.layout.responsive_resize;\n\n        // If this is a responsive layout then set a namespaced/unique onresize event listener on the window\n        if (this.layout.responsive_resize) {\n            const resize_listener = () => this.rescaleSVG();\n            window.addEventListener('resize', resize_listener);\n            this.trackExternalListener(window, 'resize', resize_listener);\n\n            // Forcing one additional setDimensions() call after the page is loaded clears up\n            // any disagreements between the initial layout and the loaded responsive container's size\n            const load_listener = () => this.setDimensions();\n            window.addEventListener('load', load_listener);\n            this.trackExternalListener(window, 'load', load_listener);\n        }\n\n        // Add panels\n        this.layout.panels.forEach((panel_layout) => {\n            this.addPanel(panel_layout);\n        });\n\n        return this;\n    }\n\n    /**\n     * Set the dimensions for a plot, and ensure that panels are sized and positioned correctly.\n     *\n     * If dimensions are provided, resizes each panel proportionally to match the new plot dimensions. Otherwise,\n     *   calculates the appropriate plot dimensions based on all panels.\n     * @private\n     * @param {Number} [width] If provided and larger than minimum size, set plot to this width\n     * @param {Number} [height] If provided and larger than minimum size, set plot to this height\n     * @returns {Plot}\n     */\n    setDimensions(width, height) {\n\n        let id;\n\n        // Update minimum allowable width and height by aggregating minimums from panels, then apply minimums to containing element.\n        let min_width = parseFloat(this.layout.min_width) || 0;\n        let min_height = parseFloat(this.layout.min_height) || 0;\n        for (id in this.panels) {\n            min_width = Math.max(min_width, this.panels[id].layout.min_width);\n            if (parseFloat(this.panels[id].layout.min_height) > 0 && parseFloat(this.panels[id].layout.proportional_height) > 0) {\n                min_height = Math.max(min_height, (this.panels[id].layout.min_height / this.panels[id].layout.proportional_height));\n            }\n        }\n        this.layout.min_width = Math.max(min_width, 1);\n        this.layout.min_height = Math.max(min_height, 1);\n        d3.select(this.svg.node().parentNode)\n            .style('min-width', `${this.layout.min_width}px`)\n            .style('min-height', `${this.layout.min_height}px`);\n\n        // If width and height arguments were passed then adjust them against plot minimums if necessary.\n        // Then resize the plot and proportionally resize panels to fit inside the new plot dimensions.\n        if (!isNaN(width) && width >= 0 && !isNaN(height) && height >= 0) {\n            this.layout.width = Math.max(Math.round(+width), this.layout.min_width);\n            this.layout.height = Math.max(Math.round(+height), this.layout.min_height);\n            // Override discrete values if resizing responsively\n            if (this.layout.responsive_resize) {\n                // All resize modes will affect width\n                if (this.svg) {\n                    this.layout.width = Math.max(this.svg.node().parentNode.getBoundingClientRect().width, this.layout.min_width);\n                }\n            }\n            // Resize/reposition panels to fit, update proportional origins if necessary\n            let y_offset = 0;\n            this.panel_ids_by_y_index.forEach((panel_id) => {\n                const panel_width = this.layout.width;\n                const panel_height = this.panels[panel_id].layout.proportional_height * this.layout.height;\n                this.panels[panel_id].setDimensions(panel_width, panel_height);\n                this.panels[panel_id].setOrigin(0, y_offset);\n                this.panels[panel_id].layout.proportional_origin.x = 0;\n                this.panels[panel_id].layout.proportional_origin.y = y_offset / this.layout.height;\n                y_offset += panel_height;\n                this.panels[panel_id].toolbar.update();\n            });\n        } else if (Object.keys(this.panels).length) {\n            // If width and height arguments were NOT passed (and panels exist) then determine the plot dimensions\n            // by making it conform to panel dimensions, assuming panels are already positioned correctly.\n            this.layout.width = 0;\n            this.layout.height = 0;\n            for (id in this.panels) {\n                this.layout.width = Math.max(this.panels[id].layout.width, this.layout.width);\n                this.layout.height += this.panels[id].layout.height;\n            }\n            this.layout.width = Math.max(this.layout.width, this.layout.min_width);\n            this.layout.height = Math.max(this.layout.height, this.layout.min_height);\n        }\n\n        // Apply layout width and height as discrete values or viewbox values\n        if (this.svg !== null) {\n            // The viewBox must always be specified in order for \"save as image\" button to work\n            this.svg.attr('viewBox', `0 0 ${this.layout.width} ${this.layout.height}`);\n\n            if (this.layout.responsive_resize) {\n                this.svg\n                    .attr('preserveAspectRatio', 'xMinYMin meet');\n            } else {\n                this.svg\n                    .attr('width', this.layout.width)\n                    .attr('height', this.layout.height);\n            }\n        }\n\n        // If the plot has been initialized then trigger some necessary render functions\n        if (this.initialized) {\n            this.panel_boundaries.position();\n            this.toolbar.update();\n            this.curtain.update();\n            this.loader.update();\n        }\n\n        return this.emit('layout_changed');\n    }\n\n    /**\n     * Automatically position panels based on panel positioning rules and values.\n     * Keep panels from overlapping vertically by adjusting origins, and keep the sum of proportional heights at 1.\n     *\n     * LocusZoom panels can only be stacked vertically (not horizontally)\n     * @private\n     */\n    positionPanels() {\n\n        let id;\n\n        // We want to enforce that all x-linked panels have consistent horizontal margins\n        // (to ensure that aligned items stay aligned despite inconsistent initial layout parameters)\n        // NOTE: This assumes panels have consistent widths already. That should probably be enforced too!\n        const x_linked_margins = { left: 0, right: 0 };\n\n        // Proportional heights for newly added panels default to null unless explicitly set, so determine appropriate\n        // proportional heights for all panels with a null value from discretely set dimensions.\n        // Likewise handle default nulls for proportional widths, but instead just force a value of 1 (full width)\n        for (id in this.panels) {\n            if (this.panels[id].layout.proportional_height === null) {\n                this.panels[id].layout.proportional_height = this.panels[id].layout.height / this.layout.height;\n            }\n            if (this.panels[id].layout.proportional_width === null) {\n                this.panels[id].layout.proportional_width = 1;\n            }\n            if (this.panels[id].layout.interaction.x_linked) {\n                x_linked_margins.left = Math.max(x_linked_margins.left, this.panels[id].layout.margin.left);\n                x_linked_margins.right = Math.max(x_linked_margins.right, this.panels[id].layout.margin.right);\n            }\n        }\n\n        // Sum the proportional heights and then adjust all proportionally so that the sum is exactly 1\n        const total_proportional_height = this.sumProportional('height');\n        if (!total_proportional_height) {\n            return this;\n        }\n        const proportional_adjustment = 1 / total_proportional_height;\n        for (id in this.panels) {\n            this.panels[id].layout.proportional_height *= proportional_adjustment;\n        }\n\n        // Update origins on all panels without changing plot-level dimensions yet\n        // Also apply x-linked margins to x-linked panels, updating widths as needed\n        let y_offset = 0;\n        this.panel_ids_by_y_index.forEach((panel_id) => {\n            this.panels[panel_id].setOrigin(0, y_offset);\n            this.panels[panel_id].layout.proportional_origin.x = 0;\n            y_offset += this.panels[panel_id].layout.height;\n            if (this.panels[panel_id].layout.interaction.x_linked) {\n                const delta = Math.max(x_linked_margins.left - this.panels[panel_id].layout.margin.left, 0)\n                    + Math.max(x_linked_margins.right - this.panels[panel_id].layout.margin.right, 0);\n                this.panels[panel_id].layout.width += delta;\n                this.panels[panel_id].layout.margin.left = x_linked_margins.left;\n                this.panels[panel_id].layout.margin.right = x_linked_margins.right;\n                this.panels[panel_id].layout.cliparea.origin.x = x_linked_margins.left;\n            }\n        });\n        const calculated_plot_height = y_offset;\n        this.panel_ids_by_y_index.forEach((panel_id) => {\n            this.panels[panel_id].layout.proportional_origin.y = this.panels[panel_id].layout.origin.y / calculated_plot_height;\n        });\n\n        // Update dimensions on the plot to accommodate repositioned panels\n        this.setDimensions();\n\n        // Set dimensions on all panels using newly set plot-level dimensions and panel-level proportional dimensions\n        this.panel_ids_by_y_index.forEach((panel_id) => {\n            this.panels[panel_id].setDimensions(this.layout.width * this.panels[panel_id].layout.proportional_width,\n                                                this.layout.height * this.panels[panel_id].layout.proportional_height);\n        });\n\n        return this;\n\n    }\n\n    /**\n     * Prepare the first rendering of the plot. This includes initializing the individual panels, but also creates shared\n     *   elements such as mouse events, panel guides/boundaries, and loader/curtain.\n     * @private\n     * @returns {Plot}\n     */\n    initialize() {\n\n        // Ensure proper responsive class is present on the containing node if called for\n        if (this.layout.responsive_resize) {\n            d3.select(this.container).classed('lz-container-responsive', true);\n        }\n\n        // Create an element/layer for containing mouse guides\n        if (this.layout.mouse_guide) {\n            const mouse_guide_svg = this.svg.append('g')\n                .attr('class', 'lz-mouse_guide')\n                .attr('id', `${this.id}.mouse_guide`);\n            const mouse_guide_vertical_svg = mouse_guide_svg.append('rect')\n                .attr('class', 'lz-mouse_guide-vertical')\n                .attr('x', -1);\n            const mouse_guide_horizontal_svg = mouse_guide_svg.append('rect')\n                .attr('class', 'lz-mouse_guide-horizontal')\n                .attr('y', -1);\n            this.mouse_guide = {\n                svg: mouse_guide_svg,\n                vertical: mouse_guide_vertical_svg,\n                horizontal: mouse_guide_horizontal_svg,\n            };\n        }\n\n        // Add curtain and loader prototpyes to the plot\n        this.curtain = generateCurtain.call(this);\n        this.loader = generateLoader.call(this);\n\n        // Create the panel_boundaries object with show/position/hide methods\n        this.panel_boundaries = {\n            parent: this,\n            hide_timeout: null,\n            showing: false,\n            dragging: false,\n            selectors: [],\n            corner_selector: null,\n            show: function() {\n                // Generate panel boundaries\n                if (!this.showing && !this.parent.curtain.showing) {\n                    this.showing = true;\n                    // Loop through all panels to create a horizontal boundary for each\n                    this.parent.panel_ids_by_y_index.forEach((panel_id, panel_idx) => {\n                        const selector = d3.select(this.parent.svg.node().parentNode).insert('div', '.lz-data_layer-tooltip')\n                            .attr('class', 'lz-panel-boundary')\n                            .attr('title', 'Resize panel');\n                        selector.append('span');\n                        const panel_resize_drag = d3.drag();\n                        panel_resize_drag.on('start', () => {\n                            this.dragging = true;\n                        });\n                        panel_resize_drag.on('end', () => {\n                            this.dragging = false;\n                        });\n                        panel_resize_drag.on('drag', () => {\n                            // First set the dimensions on the panel we're resizing\n                            const this_panel = this.parent.panels[this.parent.panel_ids_by_y_index[panel_idx]];\n                            const original_panel_height = this_panel.layout.height;\n                            this_panel.setDimensions(this_panel.layout.width, this_panel.layout.height + d3.event.dy);\n                            const panel_height_change = this_panel.layout.height - original_panel_height;\n                            const new_calculated_plot_height = this.parent.layout.height + panel_height_change;\n                            // Next loop through all panels.\n                            // Update proportional dimensions for all panels including the one we've resized using discrete heights.\n                            // Reposition panels with a greater y-index than this panel to their appropriate new origin.\n                            this.parent.panel_ids_by_y_index.forEach((loop_panel_id, loop_panel_idx) => {\n                                const loop_panel = this.parent.panels[this.parent.panel_ids_by_y_index[loop_panel_idx]];\n                                loop_panel.layout.proportional_height = loop_panel.layout.height / new_calculated_plot_height;\n                                if (loop_panel_idx > panel_idx) {\n                                    loop_panel.setOrigin(loop_panel.layout.origin.x, loop_panel.layout.origin.y + panel_height_change);\n                                    loop_panel.toolbar.position();\n                                }\n                            });\n                            // Reset dimensions on the entire plot and reposition panel boundaries\n                            this.parent.positionPanels();\n                            this.position();\n                        });\n                        selector.call(panel_resize_drag);\n                        this.parent.panel_boundaries.selectors.push(selector);\n                    });\n                    // Create a corner boundary / resize element on the bottom-most panel that resizes the entire plot\n                    const corner_selector = d3.select(this.parent.svg.node().parentNode)\n                        .insert('div', '.lz-data_layer-tooltip')\n                        .attr('class', 'lz-panel-corner-boundary')\n                        .attr('title', 'Resize plot');\n\n                    corner_selector\n                        .append('span')\n                        .attr('class', 'lz-panel-corner-boundary-outer');\n                    corner_selector\n                        .append('span')\n                        .attr('class', 'lz-panel-corner-boundary-inner');\n\n                    const corner_drag = d3.drag();\n                    corner_drag.on('start', () => {\n                        this.dragging = true;\n                    });\n                    corner_drag.on('end', () => {\n                        this.dragging = false;\n                    });\n                    corner_drag.on('drag', () => {\n                        this.parent.setDimensions(this.layout.width + d3.event.dx, this.layout.height + d3.event.dy);\n                    });\n                    corner_selector.call(corner_drag);\n                    this.parent.panel_boundaries.corner_selector = corner_selector;\n                }\n                return this.position();\n            },\n            position: function() {\n                if (!this.showing) {\n                    return this;\n                }\n                // Position panel boundaries\n                const plot_page_origin = this.parent._getPageOrigin();\n                this.selectors.forEach((selector, panel_idx) => {\n                    const panel_page_origin = this.parent.panels[this.parent.panel_ids_by_y_index[panel_idx]]._getPageOrigin();\n                    const left = plot_page_origin.x;\n                    const top = panel_page_origin.y + this.parent.panels[this.parent.panel_ids_by_y_index[panel_idx]].layout.height - 12;\n                    const width = this.parent.layout.width - 1;\n                    selector\n                        .style('top', `${top}px`)\n                        .style('left', `${left}px`)\n                        .style('width', `${width}px`);\n                    selector.select('span')\n                        .style('width', `${width}px`);\n                });\n                // Position corner selector\n                const corner_padding = 10;\n                const corner_size = 16;\n                this.corner_selector\n                    .style('top', `${plot_page_origin.y + this.parent.layout.height - corner_padding - corner_size}px`)\n                    .style('left', `${plot_page_origin.x + this.parent.layout.width - corner_padding - corner_size}px`);\n                return this;\n            },\n            hide: function() {\n                if (!this.showing) {\n                    return this;\n                }\n                this.showing = false;\n                // Remove panel boundaries\n                this.selectors.forEach((selector) => {\n                    selector.remove();\n                });\n                this.selectors = [];\n                // Remove corner boundary\n                this.corner_selector.remove();\n                this.corner_selector = null;\n                return this;\n            },\n        };\n\n        // Show panel boundaries stipulated by the layout (basic toggle, only show on mouse over plot)\n        if (this.layout.panel_boundaries) {\n            d3.select(this.svg.node().parentNode)\n                .on(`mouseover.${this.id}.panel_boundaries`, () => {\n                    clearTimeout(this.panel_boundaries.hide_timeout);\n                    this.panel_boundaries.show();\n                })\n                .on(`mouseout.${this.id}.panel_boundaries`, () => {\n                    this.panel_boundaries.hide_timeout = setTimeout(() => {\n                        this.panel_boundaries.hide();\n                    }, 300);\n                });\n        }\n\n        // Create the toolbar object and immediately show it\n        this.toolbar = new Toolbar(this).show();\n\n        // Initialize all panels\n        for (let id in this.panels) {\n            this.panels[id].initialize();\n        }\n\n        // Define plot-level mouse events\n        const namespace = `.${this.id}`;\n        if (this.layout.mouse_guide) {\n            const mouseout_mouse_guide = () => {\n                this.mouse_guide.vertical.attr('x', -1);\n                this.mouse_guide.horizontal.attr('y', -1);\n            };\n            const mousemove_mouse_guide = () => {\n                const coords = d3.mouse(this.svg.node());\n                this.mouse_guide.vertical.attr('x', coords[0]);\n                this.mouse_guide.horizontal.attr('y', coords[1]);\n            };\n            this.svg\n                .on(`mouseout${namespace}-mouse_guide`, mouseout_mouse_guide)\n                .on(`touchleave${namespace}-mouse_guide`, mouseout_mouse_guide)\n                .on(`mousemove${namespace}-mouse_guide`, mousemove_mouse_guide);\n        }\n        const mouseup = () => {\n            this.stopDrag();\n        };\n        const mousemove = () => {\n            if (this.interaction.dragging) {\n                const coords = d3.mouse(this.svg.node());\n                if (d3.event) {\n                    d3.event.preventDefault();\n                }\n                this.interaction.dragging.dragged_x = coords[0] - this.interaction.dragging.start_x;\n                this.interaction.dragging.dragged_y = coords[1] - this.interaction.dragging.start_y;\n                this.panels[this.interaction.panel_id].render();\n                this.interaction.linked_panel_ids.forEach((panel_id) => {\n                    this.panels[panel_id].render();\n                });\n            }\n        };\n        this.svg\n            .on(`mouseup${namespace}`, mouseup)\n            .on(`touchend${namespace}`, mouseup)\n            .on(`mousemove${namespace}`, mousemove)\n            .on(`touchmove${namespace}`, mousemove);\n\n        // Add an extra namespaced mouseup handler to the containing body, if there is one\n        // This helps to stop interaction events gracefully when dragging outside of the plot element\n        const body_selector = d3.select('body');\n        const body_node = body_selector.node();\n        if (body_node) {\n            body_node.addEventListener('mouseup', mouseup);\n            body_node.addEventListener('touchend', mouseup);\n\n            this.trackExternalListener(body_node, 'mouseup', mouseup);\n            this.trackExternalListener(body_node, 'touchend', mouseup);\n        }\n\n        this.on('match_requested', (eventData) => {\n            // Layers can broadcast that a specific point has been selected, and the plot will tell every other layer\n            //  to look for that value. Whenever a point is de-selected, it clears the match.\n            const data = eventData.data;\n            const to_send = (data.active ? data.value : null);\n            this.applyState({ lz_match_value: to_send });\n        });\n\n        this.initialized = true;\n\n        // An extra call to setDimensions with existing discrete dimensions fixes some rounding errors with tooltip\n        // positioning. TODO: make this additional call unnecessary.\n        const client_rect = this.svg.node().getBoundingClientRect();\n        var width = client_rect.width ? client_rect.width : this.layout.width;\n        const height = client_rect.height ? client_rect.height : this.layout.height;\n        this.setDimensions(width, height);\n\n        return this;\n\n    }\n\n    /**\n     * Register interactions along the specified axis, provided that the target panel allows interaction.\n     * @private\n     * @param {Panel} panel\n     * @param {('background'|'x_tick'|'y1_tick'|'y2_tick')} method The direction (axis) along which dragging is being performed.\n     * @returns {Plot}\n     */\n    startDrag(panel, method) {\n        panel = panel || null;\n        method = method || null;\n\n        let axis = null;\n        switch (method) {\n        case 'background':\n        case 'x_tick':\n            axis = 'x';\n            break;\n        case 'y1_tick':\n            axis = 'y1';\n            break;\n        case 'y2_tick':\n            axis = 'y2';\n            break;\n        }\n\n        if (!(panel instanceof Panel) || !axis || !this._canInteract()) {\n            return this.stopDrag();\n        }\n\n        const coords = d3.mouse(this.svg.node());\n        this.interaction = {\n            panel_id: panel.id,\n            linked_panel_ids: panel.getLinkedPanelIds(axis),\n            dragging: {\n                method: method,\n                start_x: coords[0],\n                start_y: coords[1],\n                dragged_x: 0,\n                dragged_y: 0,\n                axis: axis,\n            },\n        };\n\n        this.svg.style('cursor', 'all-scroll');\n\n        return this;\n    }\n\n    /**\n     * Process drag interactions across the target panel and synchronize plot state across other panels in sync;\n     *   clear the event when complete\n     * @private\n     * @returns {Plot}\n     */\n    stopDrag() {\n\n        if (!this.interaction.dragging) {\n            return this;\n        }\n\n        if (typeof this.panels[this.interaction.panel_id] != 'object') {\n            this.interaction = {};\n            return this;\n        }\n        const panel = this.panels[this.interaction.panel_id];\n\n        // Helper function to find the appropriate axis layouts on child data layers\n        // Once found, apply the extent as floor/ceiling and remove all other directives\n        // This forces all associated axes to conform to the extent generated by a drag action\n        const overrideAxisLayout = (axis, axis_number, extent) => {\n            panel.data_layer_ids_by_z_index.forEach((id) => {\n                const axis_layout = panel.data_layers[id].layout[`${axis}_axis`];\n                if (axis_layout.axis === axis_number) {\n                    axis_layout.floor = extent[0];\n                    axis_layout.ceiling = extent[1];\n                    delete axis_layout.lower_buffer;\n                    delete axis_layout.upper_buffer;\n                    delete axis_layout.min_extent;\n                    delete axis_layout.ticks;\n                }\n            });\n        };\n\n        switch (this.interaction.dragging.method) {\n        case 'background':\n        case 'x_tick':\n            if (this.interaction.dragging.dragged_x !== 0) {\n                overrideAxisLayout('x', 1, panel.x_extent);\n                this.applyState({ start: panel.x_extent[0], end: panel.x_extent[1] });\n            }\n            break;\n        case 'y1_tick':\n        case 'y2_tick':\n            if (this.interaction.dragging.dragged_y !== 0) {\n                const y_axis_number = parseInt(this.interaction.dragging.method[1]);\n                overrideAxisLayout('y', y_axis_number, panel[`y${y_axis_number}_extent`]);\n            }\n            break;\n        }\n\n        this.interaction = {};\n        this.svg.style('cursor', null);\n\n        return this;\n\n    }\n}\n\nexport {Plot as default};\n\n// Only for testing\nexport { _updateStatePosition };\n","/**\n * Define functions used by Scalable Layout Directives.\n *\n * These \"scaling functions\" are used during rendering to return output (eg color) based on input value\n * @module\n */\n\nimport * as d3 from 'd3';\n\n/**\n * Basic conditional function to evaluate the value of the input field and return based on equality.\n * @param {Object} parameters\n * @param {*} parameters.field_value The value against which to test the input value.\n * @param {*} parameters.then The value to return if the input value matches the field value\n * @param {*} parameters.else  The value to return if the input value does not match the field value. Optional. If not\n *   defined this scale function will return null (or value of null_value parameter, if defined) when input value fails\n *   to match field_value.\n * @param {*} input value\n */\nconst if_value = (parameters, input) => {\n    if (typeof input == 'undefined' || parameters.field_value !== input) {\n        if (typeof parameters.else != 'undefined') {\n            return parameters.else;\n        } else {\n            return null;\n        }\n    } else {\n        return parameters.then;\n    }\n};\n\n/**\n * Function to sort numerical values into bins based on numerical break points. Will only operate on numbers and\n *   return null (or value of null_value parameter, if defined) if provided a non-numeric input value. Parameters:\n * @function numerical_bin\n * @param {Object} parameters\n * @param {Number[]} parameters.breaks  Array of numerical break points against which to evaluate the input value.\n *   Must be of equal length to values parameter. If the input value is greater than or equal to break n and less than\n *   or equal to break n+1 (or break n+1 doesn't exist) then returned value is the nth entry in the values parameter.\n * @param {Array} parameters.values  Array of values to return given evaluations against break points. Must be of\n *   equal length to breaks parameter. Each entry n represents the value to return if the input value is greater than\n *   or equal to break n and less than or equal to break n+1 (or break n+1 doesn't exist).\n * @param {*} parameters.null_value\n * @param {*} input value\n * @returns {*}\n */\nconst numerical_bin = (parameters, input) => {\n    const breaks = parameters.breaks || [];\n    const values = parameters.values || [];\n    if (typeof input == 'undefined' || input === null || isNaN(+input)) {\n        return (parameters.null_value ? parameters.null_value : null);\n    }\n    const threshold = breaks.reduce(function (prev, curr) {\n        if (+input < prev || (+input >= prev && +input < curr)) {\n            return prev;\n        } else {\n            return curr;\n        }\n    });\n    return values[breaks.indexOf(threshold)];\n};\n\n/**\n * Function to sort values of any type into bins based on direct equality testing with a list of categories.\n *   Will return null if provided an input value that does not match to a listed category.\n * @function categorical_bin\n * @param {Object} parameters\n * @param {Array} parameters.categories  Array of values against which to evaluate the input value. Must be of equal\n *   length to values parameter. If the input value is equal to category n then returned value is the nth entry in the\n *   values parameter.\n * @param {Array} parameters.values  Array of values to return given evaluations against categories. Must be of equal\n *   length to categories parameter. Each entry n represents the value to return if the input value is equal to the nth\n *   value in the categories parameter.\n * @param {*} parameters.null_value  Value to return if the input value fails to match to any categories. Optional.\n */\nconst categorical_bin = (parameters, value) => {\n    if (typeof value == 'undefined' || !parameters.categories.includes(value)) {\n        return (parameters.null_value ? parameters.null_value : null);\n    } else {\n        return parameters.values[parameters.categories.indexOf(value)];\n    }\n};\n/**\n * Cycle through a set of options, so that the each element in a set of data receives a value different than the\n *  element before it. For example: \"use this palette of 10 colors to visually distinguish 100 adjacent items\"\n *  @param {Object} parameters\n *  @param {Array} parameters.values A list of option values\n * @return {*}\n */\nconst ordinal_cycle = (parameters, value, index) => {\n    var options = parameters.values;\n    return options[index % options.length];\n};\n/**\n * Function for continuous interpolation of numerical values along a gradient with arbitrarily many break points.\n * @function interpolate\n * @parameters {Object} parameters\n * @parameters {Number[]} parameters.breaks  Array of numerical break points against which to evaluate the input value.\n *   Must be of equal length to values parameter and contain at least two elements. Input value will be evaluated for\n *   relative position between two break points n and n+1 and the returned value will be interpolated at a relative\n *   position between values n and n+1.\n * @parameters {*[]} parameters.values  Array of values to interpolate and return given evaluations against break\n *   points. Must be of equal length to breaks parameter and contain at least two elements. Each entry n represents\n *   the value to return if the input value matches the nth entry in breaks exactly. Note that this scale function\n *   uses d3.interpolate to provide for effective interpolation of many different value types, including numbers,\n *   colors, shapes, etc.\n * @parameters {*} parameters.null_value\n */\nconst interpolate = (parameters, input) => {\n    var breaks = parameters.breaks || [];\n    var values = parameters.values || [];\n    var nullval = (parameters.null_value ? parameters.null_value : null);\n    if (breaks.length < 2 || breaks.length !== values.length) {\n        return nullval;\n    }\n    if (typeof input == 'undefined' || input === null || isNaN(+input)) {\n        return nullval;\n    }\n    if (+input <= parameters.breaks[0]) {\n        return values[0];\n    } else if (+input >= parameters.breaks[parameters.breaks.length - 1]) {\n        return values[breaks.length - 1];\n    } else {\n        var upper_idx = null;\n        breaks.forEach(function (brk, idx) {\n            if (!idx) {\n                return;\n            }\n            if (breaks[idx - 1] <= +input && breaks[idx] >= +input) {\n                upper_idx = idx;\n            }\n        });\n        if (upper_idx === null) {\n            return nullval;\n        }\n        const normalized_input = (+input - breaks[upper_idx - 1]) / (breaks[upper_idx] - breaks[upper_idx - 1]);\n        if (!isFinite(normalized_input)) {\n            return nullval;\n        }\n        return d3.interpolate(values[upper_idx - 1], values[upper_idx])(normalized_input);\n    }\n};\n\n\nexport { categorical_bin, if_value, interpolate, numerical_bin, ordinal_cycle };\n","/**\n * @module\n * @private\n */\nimport {RegistryBase} from './base';\nimport * as scalable from '../helpers/scalable';\n\nconst registry = new RegistryBase();\nfor (let [name, type] of Object.entries(scalable)) {\n    registry.add(name, type);\n}\n\n// Alias for the \"if_value\" function (can't export reserved language keywords directly)\nregistry.add('if', scalable.if_value);\n\n\nexport default registry;\n","/** @module */\nimport * as d3 from 'd3';\n\nimport {STATUSES} from '../constants';\nimport Field from '../../data/field';\nimport {parseFields} from '../../helpers/display';\nimport {deepCopy, merge} from '../../helpers/layouts';\nimport scalable from '../../registry/scalable';\n\n\n/**\n * A basic description of keys expected in a layout. Not intended to be directly used or modified by an end user.\n * @protected\n * @type {{type: string, fields: Array, x_axis: {}, y_axis: {}}}\n */\nconst default_layout = {\n    type: '',\n    fields: [],\n    x_axis: {},\n    y_axis: {},\n    // Not every layer allows this attribute, but it is available for the default implementation\n    tooltip_positioning: 'horizontal',\n};\n\n\n/**\n * A data layer is an abstract class representing a data set and its graphical representation within a panel\n * @public\n * @param {Object} layout A JSON-serializable object describing the layout for this layer\n * @param {Panel|null} parent Where this layout is used\n*/\nclass BaseDataLayer {\n    constructor(layout, parent) {\n        /**\n         * @private\n         * @member {Boolean}\n         */\n        this.initialized = false;\n        /**\n         * @private\n         * @member {Number}\n         */\n        this.layout_idx = null;\n\n        /**\n         * The unique identifier for this layer. Should be unique within this layer.\n         * @public\n         * @member {String}\n         */\n        this.id     = null;\n        /**\n         * @protected\n         * @member {Panel}\n         */\n        this.parent = parent || null;\n        /**\n         * @private\n         * @member {{group: d3.selection, container: d3.selection, clipRect: d3.selection}}\n         */\n        this.svg    = {};\n\n        /**\n         * @protected\n         * @member {Plot}\n         */\n        this.parent_plot = null;\n        if (parent) {\n            this.parent_plot = parent.parent;\n        }\n\n        /**\n         * The current layout configuration for this data layer. This reflects any resizing or dynamically generated\n         *  config options produced during rendering. Direct layout mutations are a powerful way to dynamically\n         *  modify the plot in response to user interactions, but require a deep knowledge of LZ internals to use\n         *  effectively.\n         * @public\n         * @member {Object}\n         */\n        this.layout = merge(layout || {}, default_layout);\n        if (this.layout.id) {\n            this.id = this.layout.id;\n        }\n\n        // Ensure any axes defined in the layout have an explicit axis number (default: 1)\n        if (this.layout.x_axis !== {} && typeof this.layout.x_axis.axis !== 'number') {\n            this.layout.x_axis.axis = 1;\n        }\n        if (this.layout.y_axis !== {} && typeof this.layout.y_axis.axis !== 'number') {\n            this.layout.y_axis.axis = 1;\n        }\n\n        /**\n         * Values in the layout object may change during rendering etc. Retain a copy of the original data layer state\n         * @protected\n         * @member {Object}\n         */\n        this._base_layout = deepCopy(this.layout);\n\n        /**\n         * @private\n         * @member {Object}\n         */\n        this.state = {};\n        /**\n         * @private\n         * @member {String}\n         */\n        this.state_id = null;\n\n        /**\n         * @private\n         * @member {Object}\n         * */\n        this.layer_state = null;\n        // Create a default state (and set any references to the parent as appropriate)\n        this._setDefaultState();\n\n        // Initialize parameters for storing data and tool tips\n        /**\n         * The data retrieved from a region request. This field is useful for debugging, but will be overridden on\n         *  re-render; do not modify it directly. The point annotation cache can be used to preserve markings\n         *  after re-render.\n         * @protected\n         * @member {Array}\n         */\n        this.data = [];\n        if (this.layout.tooltip) {\n            /**\n             * @private\n             * @member {Object}\n             */\n            this.tooltips = {};\n        }\n\n        // Initialize flags for tracking global statuses\n        this.global_statuses = {\n            'highlighted': false,\n            'selected': false,\n            'faded': false,\n            'hidden': false,\n        };\n    }\n\n    /****** Public interface: methods for external manipulation */\n    /**\n     * Instruct this datalayer to begin tracking additional fields from data sources (does not guarantee that such a field actually exists)\n     *\n     * Custom plots can use this to dynamically extend datalayer functionality after the plot is drawn. In practice,\n     * it is usually better to define the required fields up front; this function is rarely used.\n     *\n     *  (since removing core fields may break layer functionality, there is presently no hook for the inverse behavior)\n     * @public\n     * @deprecated\n     * @param fieldName\n     * @param namespace\n     * @param {String|String[]} transformations The name (or array of names) of transformations to apply to this field\n     * @returns {String} The raw string added to the fields array\n     */\n    addField (fieldName, namespace, transformations) {\n        if (!fieldName || !namespace) {\n            throw new Error('Must specify field name and namespace to use when adding field');\n        }\n        let fieldString = `${namespace}:${fieldName}`;\n        if (transformations) {\n            fieldString += '|';\n            if (typeof transformations === 'string') {\n                fieldString += transformations;\n            } else if (Array.isArray(transformations)) {\n                fieldString += transformations.join('|');\n            } else {\n                throw new Error('Must provide transformations as either a string or array of strings');\n            }\n        }\n        const fields = this.layout.fields;\n        if (!fields.includes(fieldString)) {\n            fields.push(fieldString);\n        }\n        return fieldString;\n    }\n\n    /**\n     * Move a data layer up relative to others by z-index\n     * @public\n     * @returns {BaseDataLayer}\n     */\n    moveUp() {\n        if (this.parent.data_layer_ids_by_z_index[this.layout.z_index + 1]) {\n            this.parent.data_layer_ids_by_z_index[this.layout.z_index] = this.parent.data_layer_ids_by_z_index[this.layout.z_index + 1];\n            this.parent.data_layer_ids_by_z_index[this.layout.z_index + 1] = this.id;\n            this.parent.resortDataLayers();\n        }\n        return this;\n    }\n\n    /**\n     * Move a data layer down relative to others by z-index\n     * @public\n     * @returns {BaseDataLayer}\n     */\n    moveDown() {\n        if (this.parent.data_layer_ids_by_z_index[this.layout.z_index - 1]) {\n            this.parent.data_layer_ids_by_z_index[this.layout.z_index] = this.parent.data_layer_ids_by_z_index[this.layout.z_index - 1];\n            this.parent.data_layer_ids_by_z_index[this.layout.z_index - 1] = this.id;\n            this.parent.resortDataLayers();\n        }\n        return this;\n    }\n\n    /**\n     * Set an \"annotation\": a piece of additional information about a point that is preserved across re-render,\n     *  or as the user pans and zooms near this region.\n     *\n     * Annotations can be referenced as a named pseudo-field in any filters and scalable parameters. (template support\n     *  may be added in the future)\n     * Sample use case: user clicks a tooltip to \"label this specific point\". (or change any other display property)\n     *\n     * @public\n     * @param {String|Object} element The data object or ID string for the element\n     * @param {String} key The name of the annotation to track\n     * @param {*} value The value of the marked field\n     */\n    setElementAnnotation (element, key, value) {\n        const id = this.getElementId(element);\n        if (!this.layer_state.extra_fields[id]) {\n            this.layer_state.extra_fields[id] = {};\n        }\n        this.layer_state.extra_fields[id][key] = value;\n        return this;\n    }\n\n    /********** Protected methods: useful in subclasses to manipulate data layer behaviors */\n    /**\n     * Implementation hook for fetching the min and max values of available data. Used to determine axis range, if no other\n     *   explicit axis settings override. Useful for data layers where the data extent depends on more than one field.\n     *   (eg confidence intervals in a forest plot)\n     *\n     * @protected\n     * @param data\n     * @param axis_config The configuration object for the specified axis.\n     * @returns {Array} [min, max] without any padding applied\n     */\n    _getDataExtent (data, axis_config) {\n        data = data || this.data;\n        // By default this depends only on a single field.\n        return d3.extent(data, (d) => {\n            const f = new Field(axis_config.field);\n            return +f.resolve(d);\n        });\n    }\n\n    /**\n     * Fetch the fully qualified ID to be associated with a specific visual element, based on the data to which that\n     *   element is bound. In general this element ID will be unique, allowing it to be addressed directly via selectors.\n     * @protected\n     * @param {String|Object} element\n     * @returns {String}\n     */\n    getElementId (element) {\n        let element_id = 'element';\n        if (typeof element == 'string') {\n            element_id = element;\n        } else if (typeof element == 'object') {\n            const id_field = this.layout.id_field || 'id';\n            if (typeof element[id_field] == 'undefined') {\n                throw new Error('Unable to generate element ID');\n            }\n            element_id = element[id_field].toString().replace(/\\W/g, '');\n        }\n        return (`${this.getBaseId()}-${element_id}`).replace(/([:.[\\],])/g, '_');\n    }\n\n    /**\n     * Fetch an ID that may bind a data element to a separate visual node for displaying status\n     * Examples of this might be seperate visual nodes to show select/highlight statuses, or\n     * even a common/shared node to show status across many elements in a set.\n     * Abstract method. It should be overridden by data layers that implement seperate status\n     * nodes specifically to the use case of the data layer type.\n     * @protected\n     * @param {String|Object} element\n     * @returns {String|null}\n     */\n    getElementStatusNodeId (element) {\n        return null;\n    }\n\n    /**\n     * Returns a reference to the underlying data associated with a single visual element in the data layer, as\n     *   referenced by the unique identifier for the element\n     *\n     * @protected\n     * @param {String} id The unique identifier for the element, as defined by `getElementId`\n     * @returns {Object|null} The data bound to that element\n     */\n    getElementById(id) {\n        const selector = d3.select(`#${id.replace(/([:.[\\],])/g, '\\\\$1')}`); // escape special characters\n        if (!selector.empty() && selector.data() && selector.data().length) {\n            return selector.data()[0];\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Basic method to apply arbitrary methods and properties to data elements.\n     *   This is called on all data immediately after being fetched.\n     * @protected\n     * @returns {BaseDataLayer}\n     */\n    applyDataMethods() {\n        const field_to_match = (this.layout.match && this.layout.match.receive);\n        const broadcast_value = this.parent_plot.state.lz_match_value;\n\n        this.data.forEach((item, i) => {\n            // Basic toHTML() method - return the stringified value in the id_field, if defined.\n\n            // When this layer receives data, mark whether points match (via a synthetic boolean field)\n            //   Any field-based layout directives (color, size, shape) can then be used to control display\n            if (field_to_match && broadcast_value !== null && broadcast_value !== undefined) {\n                item.lz_highlight_match = (item[field_to_match] === broadcast_value);\n            }\n\n            item.toHTML = () => {\n                const id_field = this.layout.id_field || 'id';\n                let html = '';\n                if (item[id_field]) {\n                    html = item[id_field].toString();\n                }\n                return html;\n            };\n            // Helper methods - return a reference to various plot levels. Useful for interactive tooltips.\n            item.getDataLayer = () => this;\n            item.getPanel = () => this.parent || null;\n            item.getPlot = () => {\n                // For unit testing etc, this layer may be created without a parent.\n                const panel = this.parent;\n                return panel ? panel.parent : null;\n            };\n            // deselect() method - shortcut method to deselect the element\n            item.deselect = () => {\n                const data_layer = this.getDataLayer();\n                data_layer.unselectElement(this); // dynamically generated method name. It exists, honest.\n            };\n        });\n        this.applyCustomDataMethods();\n        return this;\n    }\n\n    /**\n     * Hook that allows custom datalayers to apply additional methods and properties to data elements as needed\n     * @protected\n     * @returns {BaseDataLayer}\n     */\n    applyCustomDataMethods() {\n        return this;\n    }\n\n    /**\n     * Apply scaling functions to an element as needed, based on the layout rules governing display + the element's data\n     * If the layout parameter is already a primitive type, simply return the value as given\n     *\n     * In the future this may be further expanded, so that scaling functions can operate similar to mappers\n     *  (item, index, array). Additional arguments would be added as the need arose.\n     *\n     * @protected\n     * @param {Array|Number|String|Object} layout Either a scalar (\"color is red\") or a configuration object\n     *  (\"rules for how to choose color based on item value\")\n     * @param {*} element_data The value to be used with the filter. May be a primitive value, or a data object for a single item\n     * @param {Number} data_index The array index for the data element\n     * @returns {*} The transformed value\n     */\n    resolveScalableParameter (layout, element_data, data_index) {\n        let ret = null;\n        if (Array.isArray(layout)) {\n            let idx = 0;\n            while (ret === null && idx < layout.length) {\n                ret = this.resolveScalableParameter(layout[idx], element_data, data_index);\n                idx++;\n            }\n        } else {\n            switch (typeof layout) {\n            case 'number':\n            case 'string':\n                ret = layout;\n                break;\n            case 'object':\n                if (layout.scale_function) {\n                    const func = scalable.get(layout.scale_function);\n                    if (layout.field) {\n                        const f = new Field(layout.field);\n                        let extra;\n                        try {\n                            extra = this.layer_state && this.layer_state.extra_fields[this.getElementId(element_data)];\n                        } catch (e) {\n                            extra = null;\n                        }\n                        ret = func(layout.parameters || {}, f.resolve(element_data, extra), data_index);\n                    } else {\n                        ret = func(layout.parameters || {}, element_data, data_index);\n                    }\n                }\n                break;\n            }\n        }\n        return ret;\n    }\n\n    /**\n     * Generate dimension extent function based on layout parameters\n     * @protected\n     * @param {('x'|'y')} dimension\n     */\n    getAxisExtent (dimension) {\n\n        if (!['x', 'y'].includes(dimension)) {\n            throw new Error('Invalid dimension identifier');\n        }\n\n        const axis_name = `${dimension}_axis`;\n        const axis_layout = this.layout[axis_name];\n\n        // If a floor AND a ceiling are explicitly defined then just return that extent and be done\n        if (!isNaN(axis_layout.floor) && !isNaN(axis_layout.ceiling)) {\n            return [+axis_layout.floor, +axis_layout.ceiling];\n        }\n\n        // If a field is defined for the axis and the data layer has data then generate the extent from the data set\n        let data_extent = [];\n        if (axis_layout.field && this.data) {\n            if (!this.data.length) {\n                // If data has been fetched (but no points in region), enforce the min_extent (with no buffers,\n                //  because we don't need padding around an empty screen)\n                data_extent = axis_layout.min_extent || [];\n                return data_extent;\n            } else {\n                data_extent = this._getDataExtent(this.data, axis_layout);\n\n                // Apply upper/lower buffers, if applicable\n                const original_extent_span = data_extent[1] - data_extent[0];\n                if (!isNaN(axis_layout.lower_buffer)) {\n                    data_extent[0] -= original_extent_span * axis_layout.lower_buffer;\n                }\n                if (!isNaN(axis_layout.upper_buffer)) {\n                    data_extent[1] += original_extent_span * axis_layout.upper_buffer;\n                }\n\n                if (typeof axis_layout.min_extent == 'object') {\n                    // The data should span at least the range specified by min_extent, an array with [low, high]\n                    const range_min = axis_layout.min_extent[0];\n                    const range_max = axis_layout.min_extent[1];\n                    if (!isNaN(range_min) && !isNaN(range_max)) {\n                        data_extent[0] = Math.min(data_extent[0], range_min);\n                    }\n                    if (!isNaN(range_max)) {\n                        data_extent[1] = Math.max(data_extent[1], range_max);\n                    }\n                }\n                // If specified, floor and ceiling will override the actual data range\n                return [\n                    isNaN(axis_layout.floor) ? data_extent[0] : axis_layout.floor,\n                    isNaN(axis_layout.ceiling) ? data_extent[1] : axis_layout.ceiling,\n                ];\n            }\n        }\n\n        // If this is for the x axis and no extent could be generated yet but state has a defined start and end\n        // then default to using the state-defined region as the extent\n        if (dimension === 'x' && !isNaN(this.state.start) && !isNaN(this.state.end)) {\n            return [this.state.start, this.state.end];\n        }\n\n        // No conditions met for generating a valid extent, return an empty array\n        return [];\n\n    }\n\n    /**\n     * Allow this data layer to tell the panel what axis ticks it thinks it will require. The panel may choose whether\n     *   to use some, all, or none of these when rendering, either alone or in conjunction with other data layers.\n     *\n     *   This method is a stub and should be overridden in data layers that need to specify custom behavior.\n     *\n     * @protected\n     * @param {('x'|'y1'|'y2')} dimension\n     * @param {Object} [config] Additional parameters for the panel to specify how it wants ticks to be drawn. The names\n     *   and meanings of these parameters may vary between different data layers.\n     * @returns {Object[]}\n     *   An array of objects: each object must have an 'x' attribute to position the tick.\n     *   Other supported object keys:\n     *     * text: string to render for a given tick\n     *     * style: d3-compatible CSS style object\n     *     * transform: SVG transform attribute string\n     *     * color: string or LocusZoom scalable parameter object\n     */\n    getTicks (dimension, config) {\n        if (!['x', 'y1', 'y2'].includes(dimension)) {\n            throw new Error(`Invalid dimension identifier ${dimension}`);\n        }\n        return [];\n    }\n\n    /**\n     * Determine the coordinates for where to point the tooltip at. Typically, this is the center of a datum element (eg,\n     *  the middle of a scatter plot point). Also provide an offset if the tooltip should not be at that center (most\n     *  elements are not single points, eg a scatter plot point has a radius and a gene is a rectangle).\n     *  The default implementation is quite naive: it places the tooltip at the origin for that layer. Individual layers\n     *    should override this method to position relative to the chosen data element or mouse event.\n     * @protected\n     * @param {Object} tooltip A tooltip object (including attribute tooltip.data)\n     * @returns {Object} as {x_min, x_max, y_min, y_max} in px, representing bounding box of a rectangle around the data pt\n     *  Note that these pixels are in the SVG coordinate system\n     */\n    _getTooltipPosition(tooltip) {\n        const panel = this.parent;\n\n        const y_scale = panel[`y${this.layout.y_axis.axis}_scale`];\n        const y_extent = panel[`y${this.layout.y_axis.axis}_extent`];\n\n        const x = panel.x_scale(panel.x_extent[0]);\n        const y = y_scale(y_extent[0]);\n\n        return { x_min: x, x_max: x, y_min: y, y_max: y };\n    }\n\n    /**\n     * Draw a tooltip on the data layer pointed at the specified coordinates, in the specified orientation.\n     *  Tooltip will be drawn on the edge of the major axis, and centered along the minor axis- see diagram.\n     *   v\n     * > o <\n     *   ^\n     *\n     * @protected\n     * @param tooltip {Object} The object representing all data for the tooltip to be drawn\n     * @param {'vertical'|'horizontal'|'top'|'bottom'|'left'|'right'} position Where to draw the tooltip relative to\n     *  the data\n     * @param {Number} x_min The min x-coordinate for the bounding box of the data element\n     * @param {Number} x_max The max x-coordinate for the bounding box of the data element\n     * @param {Number} y_min The min y-coordinate for the bounding box of the data element\n     * @param {Number} y_max The max y-coordinate for the bounding box of the data element\n     */\n    _drawTooltip(tooltip, position, x_min, x_max, y_min, y_max) {\n        const panel_layout = this.parent.layout;\n        const layer_layout = this.layout;\n\n        // Tooltip position params: as defined in the default stylesheet, used in calculations\n        const arrow_size = 7;\n        const stroke_width = 1;\n        const arrow_total = arrow_size + stroke_width;  // Tooltip pos should account for how much space the arrow takes up\n\n        const tooltip_padding = 6;  // bbox size must account for any internal padding applied between data and border\n\n        const page_origin = this._getPageOrigin();\n        const tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        const data_layer_height = panel_layout.height - (panel_layout.margin.top + panel_layout.margin.bottom);\n        const data_layer_width = panel_layout.width - (panel_layout.margin.left + panel_layout.margin.right);\n\n        // Clip the edges of the datum to the available plot area\n        x_min = Math.max(x_min, 0);\n        x_max = Math.min(x_max, data_layer_width);\n        y_min = Math.max(y_min, 0);\n        y_max = Math.min(y_max, data_layer_height);\n\n        const x_center = (x_min + x_max) / 2;\n        const y_center = (y_min + y_max) / 2;\n        // Default offsets are the far edge of the datum bounding box\n        let x_offset = x_max - x_center;\n        let y_offset = y_max - y_center;\n        let placement = layer_layout.tooltip_positioning;\n\n        // Coordinate system note: the tooltip is positioned relative to the plot/page; the arrow is positioned relative to\n        //  the tooltip boundaries\n        let tooltip_top, tooltip_left, arrow_type, arrow_top, arrow_left;\n\n        // The user can specify a generic orientation, and LocusZoom will autoselect whether to place the tooltip above or below\n        if (placement === 'vertical') {\n            // Auto-select whether to position above the item, or below\n            x_offset = 0;\n            if (tooltip_box.height + arrow_total > data_layer_height - (y_center + y_offset)) {\n                placement = 'top';\n            } else {\n                placement = 'bottom';\n            }\n        } else if (placement === 'horizontal') {\n            // Auto select whether to position to the left of the item, or to the right\n            y_offset = 0;\n            if (x_center <= panel_layout.width / 2) {\n                placement = 'left';\n            } else {\n                placement = 'right';\n            }\n        }\n\n        if (placement === 'top' || placement === 'bottom') {\n            // Position horizontally centered above the point\n            const offset_right = Math.max((tooltip_box.width / 2) - x_center, 0);\n            const offset_left = Math.max((tooltip_box.width / 2) + x_center - data_layer_width, 0);\n            tooltip_left = page_origin.x + x_center - (tooltip_box.width / 2) - offset_left + offset_right;\n            arrow_left =  page_origin.x + x_center - tooltip_left - arrow_size;  // Arrow should be centered over the data\n            // Position vertically above the point unless there's insufficient space, then go below\n            if (placement === 'top') {\n                tooltip_top = page_origin.y + y_center - (y_offset + tooltip_box.height + arrow_total);\n                arrow_type = 'down';\n                arrow_top = tooltip_box.height - stroke_width;\n            } else {\n                tooltip_top = page_origin.y + y_center + y_offset + arrow_total;\n                arrow_type = 'up';\n                arrow_top = 0 - arrow_total;\n            }\n        } else if (placement === 'left' || placement === 'right') {\n            // Position tooltip horizontally on the left or the right depending on which side of the plot the point is on\n            if (placement === 'left') {\n                tooltip_left = page_origin.x + x_center + x_offset + arrow_total;\n                arrow_type = 'left';\n                arrow_left = -1 * (arrow_size + stroke_width);\n            } else {\n                tooltip_left = page_origin.x + x_center - tooltip_box.width - x_offset - arrow_total;\n                arrow_type = 'right';\n                arrow_left = tooltip_box.width - stroke_width;\n            }\n            // Position with arrow vertically centered along tooltip edge unless we're at the top or bottom of the plot\n            if (y_center - (tooltip_box.height / 2) <= 0) { // Too close to the top, push it down\n                tooltip_top = page_origin.y + y_center - (1.5 * arrow_size) - tooltip_padding;\n                arrow_top = tooltip_padding;\n            } else if (y_center + (tooltip_box.height / 2) >= data_layer_height) { // Too close to the bottom, pull it up\n                tooltip_top = page_origin.y + y_center + arrow_size + tooltip_padding - tooltip_box.height;\n                arrow_top = tooltip_box.height - (2 * arrow_size) - tooltip_padding;\n            } else { // vertically centered\n                tooltip_top = page_origin.y + y_center - (tooltip_box.height / 2);\n                arrow_top = (tooltip_box.height / 2) - arrow_size;\n            }\n        } else {\n            throw new Error('Unrecognized placement value');\n        }\n\n        // Position the div itself, relative to the layer origin\n        tooltip.selector\n            .style('left', `${tooltip_left}px`)\n            .style('top', `${tooltip_top}px`);\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow) {\n            tooltip.arrow = tooltip.selector.append('div')\n                .style('position', 'absolute');\n        }\n        tooltip.arrow\n            .attr('class', `lz-data_layer-tooltip-arrow_${arrow_type}`)\n            .style('left', `${arrow_left}px`)\n            .style('top', `${arrow_top}px`);\n        return this;\n    }\n\n    /**\n     * Find the elements (or indices) that match any of a set of provided filters\n     * @protected\n     * @param {Array[]} filters A list of filter entries: [field, value] (for equivalence testing) or\n     *   [field, operator, value] for other operators\n     * @param {('indexes'|'elements')} [return_type='indexes'] Specify whether to return either the indices of the matching\n     *   elements, or references to the elements themselves\n     * @returns {Array}\n     */\n    filter(filters, return_type) {\n        if (typeof return_type == 'undefined' || !['indexes', 'elements'].includes(return_type)) {\n            return_type = 'indexes';\n        }\n        if (!Array.isArray(filters)) {\n            return [];\n        }\n        const test = (element, filter) => {\n            const operators = {\n                '=': (a, b) => a === b,\n                // eslint-disable-next-line eqeqeq\n                '!=': (a, b) => a != b, // For absence of a value, deliberately allow weak comparisons (eg undefined/null)\n                '<': (a, b) => a < b,\n                '<=': (a, b) => a <= b,\n                '>': (a, b) => a > b,\n                '>=': (a, b) => a >= b,\n                '%': (a, b) => a % b,\n            };\n\n            if (!Array.isArray(filter)) {\n                return false;\n            }\n            if (filter.length === 2) {\n                return element[filter[0]] === filter[1];\n            } else if (filter.length === 3 && operators[filter[1]]) {\n                return operators[filter[1]](element[filter[0]], filter[2]);\n            } else {\n                return false;\n            }\n        };\n        const matches = [];\n        this.data.forEach((element, idx) => {\n            let match = true;\n            filters.forEach((filter) => {\n                if (!test(element, filter)) {\n                    match = false;\n                }\n            });\n            if (match) {\n                matches.push(return_type === 'indexes' ? idx : element);\n            }\n        });\n        return matches;\n    }\n\n    /**\n     * Get \"annotation\" metadata associated with a particular point.\n     *\n     * @protected\n     * @param {String|Object} element The data object or ID string for the element\n     * @param {String} key The name of the annotation to track\n     * @return {*}\n     */\n    getElementAnnotation (element, key) {\n        const id = this.getElementId(element);\n        const extra = this.layer_state.extra_fields[id];\n        return extra && extra[key];\n    }\n\n    /****** Private methods: rarely overridden or modified by external usages */\n\n    /**\n     * Define default state that should get tracked during the lifetime of this layer.\n     *\n     * In some special custom usages, it may be useful to completely reset a panel (eg \"click for\n     *   genome region\" links), plotting new data that invalidates any previously tracked state.  This hook makes it\n     *   possible to reset without destroying the panel entirely. It is used by `Plot.clearPanelData`.\n     * @private\n     */\n    _setDefaultState() {\n        // Each datalayer tracks two kinds of status: flags for internal state (highlighted, selected, tooltip),\n        //  and \"extra fields\" (annotations like \"show a tooltip\" that are not determined by the server, but need to\n        //  persist across re-render)\n        const layer_state = { status_flags: {}, extra_fields: {} };\n        const status_flags = layer_state.status_flags;\n        STATUSES.adjectives.forEach((status) => {\n            status_flags[status] = status_flags[status] || [];\n        });\n        // Also initialize \"internal-only\" state fields (things that are tracked, but not set directly by external events)\n        status_flags['has_tooltip'] = status_flags['has_tooltip'] || [];\n\n        if (this.parent) {\n            // If layer has a parent, store a reference in the overarching plot.state object\n            this.state_id = `${this.parent.id}.${this.id}`;\n            this.state = this.parent.state;\n            this.state[this.state_id] = layer_state;\n        }\n        this.layer_state = layer_state;\n    }\n\n    /**\n     * Get the fully qualified identifier for the data layer, prefixed by any parent or container elements\n     *\n     * @private\n     * @returns {string} A dot-delimited string of the format <plot>.<panel>.<data_layer>\n     */\n    getBaseId () {\n        if (this.parent) {\n            return `${this.parent_plot.id}.${this.parent.id}.${this.id}`;\n        } else {\n            return '';\n        }\n    }\n\n    /**\n     * Determine the pixel height of data-bound objects represented inside this data layer. (excluding elements such as axes)\n     *\n     * May be used by operations that resize the data layer to fit available data\n     *\n     * @private\n     * @returns {number}\n     */\n    getAbsoluteDataHeight() {\n        const dataBCR = this.svg.group.node().getBoundingClientRect();\n        return dataBCR.height;\n    }\n\n    /**\n     * Initialize a data layer\n     * @private\n     * @returns {BaseDataLayer}\n     */\n    initialize() {\n\n        // Append a container group element to house the main data layer group element and the clip path\n        const base_id = this.getBaseId();\n        this.svg.container = this.parent.svg.group.append('g')\n            .attr('class', 'lz-data_layer-container')\n            .attr('id', `${base_id}.data_layer_container`);\n\n        // Append clip path to the container element\n        this.svg.clipRect = this.svg.container.append('clipPath')\n            .attr('id', `${base_id}.clip`)\n            .append('rect');\n\n        // Append svg group for rendering all data layer elements, clipped by the clip path\n        this.svg.group = this.svg.container.append('g')\n            .attr('id', `${base_id}.data_layer`)\n            .attr('clip-path', `url(#${base_id}.clip)`);\n\n        return this;\n\n    }\n\n    /**\n     * Generate a tool tip for a given element\n     * @private\n     * @param {String|Object} data Data for the element associated with the tooltip\n     */\n    createTooltip (data) {\n        if (typeof this.layout.tooltip != 'object') {\n            throw new Error(`DataLayer [${this.id}] layout does not define a tooltip`);\n        }\n        const id = this.getElementId(data);\n        if (this.tooltips[id]) {\n            this.positionTooltip(id);\n            return;\n        }\n        this.tooltips[id] = {\n            data: data,\n            arrow: null,\n            selector: d3.select(this.parent_plot.svg.node().parentNode).append('div')\n                .attr('class', 'lz-data_layer-tooltip')\n                .attr('id', `${id}-tooltip`),\n        };\n        this.layer_state.status_flags['has_tooltip'].push(id);\n        this.updateTooltip(data);\n        return this;\n    }\n\n    /**\n     * Update a tool tip (generate its inner HTML)\n     *\n     * @private\n     * @param {String|Object} d The element associated with the tooltip\n     * @param {String} [id] An identifier to the tooltip\n     */\n    updateTooltip(d, id) {\n        if (typeof id == 'undefined') {\n            id = this.getElementId(d);\n        }\n        // Empty the tooltip of all HTML (including its arrow!)\n        this.tooltips[id].selector.html('');\n        this.tooltips[id].arrow = null;\n        // Set the new HTML\n        if (this.layout.tooltip.html) {\n            this.tooltips[id].selector.html(parseFields(d, this.layout.tooltip.html));\n        }\n        // If the layout allows tool tips on this data layer to be closable then add the close button\n        // and add padding to the tooltip to accommodate it\n        if (this.layout.tooltip.closable) {\n            this.tooltips[id].selector.insert('button', ':first-child')\n                .attr('class', 'lz-tooltip-close-button')\n                .attr('title', 'Close')\n                .text('×')\n                .on('click', () => {\n                    this.destroyTooltip(id);\n                });\n        }\n        // Apply data directly to the tool tip for easier retrieval by custom UI elements inside the tool tip\n        this.tooltips[id].selector.data([d]);\n        // Reposition and draw a new arrow\n        this.positionTooltip(id);\n        return this;\n    }\n\n    /**\n     * Destroy tool tip - remove the tool tip element from the DOM and delete the tool tip's record on the data layer\n     *\n     * @private\n     * @param {String|Object} element_or_id The element (or id) associated with the tooltip\n     * @param {boolean} [temporary=false] Whether this is temporary (not to be tracked in state). Differentiates\n     *  \"recreate tooltips on re-render\" (which is temporary) from \"user has closed this tooltip\" (permanent)\n     * @returns {BaseDataLayer}\n     */\n    destroyTooltip(element_or_id, temporary) {\n        let id;\n        if (typeof element_or_id == 'string') {\n            id = element_or_id;\n        } else {\n            id = this.getElementId(element_or_id);\n        }\n        if (this.tooltips[id]) {\n            if (typeof this.tooltips[id].selector == 'object') {\n                this.tooltips[id].selector.remove();\n            }\n            delete this.tooltips[id];\n        }\n        // When a tooltip is removed, also remove the reference from the state\n        if (!temporary) {\n            const state = this.layer_state.status_flags['has_tooltip'];\n            const label_mark_position = state.indexOf(id);\n            state.splice(label_mark_position, 1);\n        }\n        return this;\n    }\n\n    /**\n     * Loop through and destroy all tool tips on this data layer\n     *\n     * @private\n     * @returns {BaseDataLayer}\n     */\n    destroyAllTooltips() {\n        for (let id in this.tooltips) {\n            this.destroyTooltip(id, true);\n        }\n        return this;\n    }\n\n    /**\n     * Position and then redraw tool tip - naïve function to place a tool tip in the data layer. By default, positions wrt\n     *   the top-left corner of the data layer.\n     *\n     * Each layer type may have more specific logic. Consider overriding the provided hooks `_getTooltipPosition` or\n     *  `_drawTooltip` as appropriate\n     *\n     * @private\n     * @param {String} id The identifier of the tooltip to position\n     * @returns {BaseDataLayer}\n     */\n    positionTooltip(id) {\n        if (typeof id != 'string') {\n            throw new Error('Unable to position tooltip: id is not a string');\n        }\n        if (!this.tooltips[id]) {\n            throw new Error('Unable to position tooltip: id does not point to a valid tooltip');\n        }\n        const tooltip = this.tooltips[id];\n        const coords = this._getTooltipPosition(tooltip);\n\n        if (!coords) {\n            // Special cutout: normally, tooltips are positioned based on the datum element. Some, like lines/curves,\n            //  work better if based on a mouse event. Since not every redraw contains a mouse event, we can just skip\n            //  calculating position when no position information is available.\n            return null;\n        }\n        this._drawTooltip(tooltip, this.layout.tooltip_positioning, coords.x_min, coords.x_max, coords.y_min, coords.y_max);\n    }\n\n    /**\n     * Loop through and position all tool tips on this data layer\n     *\n     * @private\n     * @returns {BaseDataLayer}\n     */\n    positionAllTooltips() {\n        for (let id in this.tooltips) {\n            this.positionTooltip(id);\n        }\n        return this;\n    }\n\n    /**\n     * Show or hide a tool tip by ID depending on directives in the layout and state values relative to the ID\n     *\n     * @private\n     * @param {String|Object} element The element associated with the tooltip\n     * @param {boolean} first_time Because panels can re-render, the rules for showing a tooltip\n     *  depend on whether this is the first time a status change affecting display has been applied.\n     * @returns {BaseDataLayer}\n     */\n    showOrHideTooltip(element, first_time) {\n        if (typeof this.layout.tooltip != 'object') {\n            return this;\n        }\n        const id = this.getElementId(element);\n\n        /**\n         * Apply rules and decide whether to show or hide the tooltip\n         * @param {Object} statuses All statuses that apply to an element\n         * @param {String[]|object} directive A layout directive object\n         * @param operator\n         * @returns {null|bool}\n         */\n        const resolveStatus = (statuses, directive, operator) => {\n            let status = null;\n            if (typeof statuses != 'object' || statuses === null) {\n                return null;\n            }\n            if (Array.isArray(directive)) {\n                // This happens when the function is called on the inner part of the directive\n                operator = operator || 'and';\n                if (directive.length === 1) {\n                    status = statuses[directive[0]];\n                } else {\n                    status = directive.reduce((previousValue, currentValue) => {\n                        if (operator === 'and') {\n                            return statuses[previousValue] && statuses[currentValue];\n                        } else if (operator === 'or') {\n                            return statuses[previousValue] || statuses[currentValue];\n                        }\n                        return null;\n                    });\n                }\n            } else if (typeof directive == 'object') {\n                let sub_status;\n                for (let sub_operator in directive) {\n                    sub_status = resolveStatus(statuses, directive[sub_operator], sub_operator);\n                    if (status === null) {\n                        status = sub_status;\n                    } else if (operator === 'and') {\n                        status = status && sub_status;\n                    } else if (operator === 'or') {\n                        status = status || sub_status;\n                    }\n                }\n            } else {\n                return false;\n            }\n            return status;\n        };\n\n        let show_directive = {};\n        if (typeof this.layout.tooltip.show == 'string') {\n            show_directive = { and: [ this.layout.tooltip.show ] };\n        } else if (typeof this.layout.tooltip.show == 'object') {\n            show_directive = this.layout.tooltip.show;\n        }\n\n        let hide_directive = {};\n        if (typeof this.layout.tooltip.hide == 'string') {\n            hide_directive = { and: [ this.layout.tooltip.hide ] };\n        } else if (typeof this.layout.tooltip.hide == 'object') {\n            hide_directive = this.layout.tooltip.hide;\n        }\n\n        // Find all the statuses that apply to just this single element\n        const layer_state = this.layer_state;\n        var status_flags = {};  // {status_name: bool}\n        STATUSES.adjectives.forEach((status) => {\n            const antistatus = `un${status}`;\n            status_flags[status] = (layer_state.status_flags[status].includes(id));\n            status_flags[antistatus] = !status_flags[status];\n        });\n\n        // Decide whether to show/hide the tooltip based solely on the underlying element\n        const show_resolved = resolveStatus(status_flags, show_directive);\n        const hide_resolved = resolveStatus(status_flags, hide_directive);\n\n        // Most of the tooltip display logic depends on behavior layouts: was point (un)selected, (un)highlighted, etc.\n        // But sometimes, a point is selected, and the user then closes the tooltip. If the panel is re-rendered for\n        //  some outside reason (like state change), we must track this in the create/destroy events as tooltip state.\n        const has_tooltip = (layer_state.status_flags['has_tooltip'].includes(id));\n        const tooltip_was_closed = first_time ? false : !has_tooltip;\n        if (show_resolved && !tooltip_was_closed && !hide_resolved) {\n            this.createTooltip(element);\n        } else {\n            this.destroyTooltip(element);\n        }\n\n        return this;\n    }\n\n    /**\n     * @private\n     * @param filters\n     * @returns {Array}\n     */\n    filterIndexes(filters) {\n        return this.filter(filters, 'indexes');\n    }\n\n    /**\n     * @private\n     * @param filters\n     * @returns {Array}\n     */\n    filterElements(filters) {\n        return this.filter(filters, 'elements');\n    }\n\n    /**\n     * Toggle a status (e.g. highlighted, selected, identified) on an element\n     *\n     * @private\n     *\n     * @param {String} status The name of a recognized status to be added/removed on an appropriate element\n     * @param {String|Object} element The data bound to the element of interest\n     * @param {Boolean} active True to add the status (and associated CSS styles); false to remove it\n     * @param {Boolean} exclusive Whether to only allow a state for a single element at a time\n     * @returns {BaseDataLayer}\n     */\n    setElementStatus(status, element, active, exclusive) {\n        if (status === 'has_tooltip') {\n            // This is a special adjective that exists solely to track tooltip state. It has no CSS and never gets set\n            //  directly. It is invisible to the official enums.\n            return this;\n        }\n        if (typeof active == 'undefined') {\n            active = true;\n        }\n\n        // Get an ID for the element or return having changed nothing\n        let element_id;\n        try {\n            element_id = this.getElementId(element);\n        } catch (get_element_id_error) {\n            return this;\n        }\n\n        // Enforce exclusivity (force all elements to have the opposite of toggle first)\n        if (exclusive) {\n            this.setAllElementStatus(status, !active);\n        }\n\n        // Set/unset the proper status class on the appropriate DOM element(s)\n        d3.select(`#${element_id}`).classed(`lz-data_layer-${this.layout.type}-${status}`, active);\n        const element_status_node_id = this.getElementStatusNodeId(element);\n        if (element_status_node_id !== null) {\n            d3.select(`#${element_status_node_id}`).classed(`lz-data_layer-${this.layout.type}-statusnode-${status}`, active);\n        }\n\n        // Track element ID in the proper status state array\n        const element_status_idx = this.layer_state.status_flags[status].indexOf(element_id);\n        const added_status = (element_status_idx === -1);  // On a re-render, existing statuses will be reapplied.\n        if (active && added_status) {\n            this.layer_state.status_flags[status].push(element_id);\n        }\n        if (!active && !added_status) {\n            this.layer_state.status_flags[status].splice(element_status_idx, 1);\n        }\n\n        // Trigger tool tip show/hide logic\n        this.showOrHideTooltip(element, added_status);\n\n        // Trigger layout changed event hook\n        if (added_status) {\n            this.parent.emit('layout_changed', true);\n        }\n\n        const is_selected = (status === 'selected');\n        if (is_selected && (added_status || !active)) {\n            // Notify parents that an element has changed selection status (either active, or inactive)\n            this.parent.emit('element_selection', { element: element, active: active }, true);\n        }\n\n        const value_to_broadcast = (this.layout.match && this.layout.match.send);\n        if (is_selected && value_to_broadcast && (added_status || !active)) {\n            this.parent.emit(\n                'match_requested',\n                { value: element[value_to_broadcast], active: active },\n                true\n            );\n        }\n        return this;\n    }\n\n    /**\n     * Toggle a status on elements in the data layer based on a set of filters\n     *\n     * @private\n     * @param {String} status\n     * @param {Boolean} toggle\n     * @param {Array} filters\n     * @param {Boolean} exclusive\n     * @returns {BaseDataLayer}\n     */\n    setElementStatusByFilters(status, toggle, filters, exclusive) {\n\n        // Sanity check\n        if (typeof status == 'undefined' || !STATUSES.adjectives.includes(status)) {\n            throw new Error('Invalid status');\n        }\n        if (typeof this.layer_state.status_flags[status] == 'undefined') {\n            return this;\n        }\n        if (typeof toggle == 'undefined') {\n            toggle = true;\n        } else {\n            toggle = !!toggle;\n        }\n        if (typeof exclusive == 'undefined') {\n            exclusive = false;\n        } else {\n            exclusive = !!exclusive;\n        }\n        if (!Array.isArray(filters)) {\n            filters = [];\n        }\n\n        // Enforce exclusivity (force all elements to have the opposite of toggle first)\n        if (exclusive) {\n            this.setAllElementStatus(status, !toggle);\n        }\n\n        // Apply statuses\n        this.filterElements(filters).forEach((element) => {\n            this.setElementStatus(status, element, toggle);\n        });\n\n        return this;\n    }\n\n    /**\n     * Toggle a status on all elements in the data layer\n     *\n     * @private\n     * @param {String} status\n     * @param {Boolean} toggle\n     * @returns {BaseDataLayer}\n     */\n    setAllElementStatus(status, toggle) {\n\n        // Sanity check\n        if (typeof status == 'undefined' || !STATUSES.adjectives.includes(status)) {\n            throw new Error('Invalid status');\n        }\n        if (typeof this.layer_state.status_flags[status] == 'undefined') {\n            return this;\n        }\n        if (typeof toggle == 'undefined') {\n            toggle = true;\n        }\n\n        // Apply statuses\n        if (toggle) {\n            this.data.forEach((element) => this.setElementStatus(status, element, true));\n        } else {\n            const status_ids = this.layer_state.status_flags[status].slice();\n            status_ids.forEach((id) => {\n                const element = this.getElementById(id);\n                if (typeof element == 'object' && element !== null) {\n                    this.setElementStatus(status, element, false);\n                }\n            });\n            this.layer_state.status_flags[status] = [];\n        }\n\n        // Update global status flag\n        this.global_statuses[status] = toggle;\n\n        return this;\n    }\n\n    /**\n     * Apply all layout-defined behaviors (DOM event handlers) to a selection of elements\n     *\n     * @private\n     * @param {d3.selection} selection\n     */\n    applyBehaviors(selection) {\n        if (typeof this.layout.behaviors != 'object') {\n            return;\n        }\n        Object.keys(this.layout.behaviors).forEach((directive) => {\n            const event_match = /(click|mouseover|mouseout)/.exec(directive);\n            if (!event_match) {\n                return;\n            }\n            selection.on(`${event_match[0]}.${directive}`, this.executeBehaviors(directive, this.layout.behaviors[directive]));\n        });\n    }\n\n    /**\n     * Generate a function that executes an arbitrary list of behaviors on an element during an event\n     *\n     * @private\n     * @param {String} directive The name of the event, as described in layout.behaviors for this datalayer\n     * @param {Object[]} behaviors An object describing the behavior to attach to this single element\n     * @param {string} behaviors.action The name of the action that would trigger this behavior (eg click, mouseover, etc)\n     * @param {string} behaviors.status What status to apply to the element when this behavior is triggered (highlighted,\n     *  selected, etc)\n     * @param {boolean} [behaviors.exclusive] Whether triggering the event for this element should unset the relevant status\n     *   for all other elements. Useful for, eg, click events that exclusively highlight one thing.\n     * @returns {function(this:BaseDataLayer)} Return a function that handles the event in context with the behavior\n     *   and the element- can be attached as an event listener\n     */\n    executeBehaviors(directive, behaviors) {\n\n        // Determine the required state of control and shift keys during the event\n        const requiredKeyStates = {\n            'ctrl': (directive.includes('ctrl')),\n            'shift': (directive.includes('shift')),\n        };\n        const self = this;\n        return function(element) {\n\n            // Do nothing if the required control and shift key presses (or lack thereof) doesn't match the event\n            if (requiredKeyStates.ctrl !== !!d3.event.ctrlKey || requiredKeyStates.shift !== !!d3.event.shiftKey) {\n                return;\n            }\n\n            // Loop through behaviors making each one go in succession\n            behaviors.forEach((behavior) => {\n\n                // Route first by the action, if defined\n                if (typeof behavior != 'object' || behavior === null) {\n                    return;\n                }\n\n                const current_status_boolean = (self.layer_state.status_flags[behavior.status].includes(self.getElementId(element)));\n                const exclusive = behavior.exclusive && !current_status_boolean;\n\n                switch (behavior.action) {\n\n                // Set a status (set to true regardless of current status, optionally with exclusivity)\n                case 'set':\n                    self.setElementStatus(behavior.status, element, true, behavior.exclusive);\n                    break;\n\n                // Unset a status (set to false regardless of current status, optionally with exclusivity)\n                case 'unset':\n                    self.setElementStatus(behavior.status, element, false, behavior.exclusive);\n                    break;\n\n                // Toggle a status\n                case 'toggle':\n                    self.setElementStatus(behavior.status, element, !current_status_boolean, exclusive);\n                    break;\n\n                // Link to a dynamic URL\n                case 'link':\n                    if (typeof behavior.href == 'string') {\n                        const url = parseFields(element, behavior.href);\n                        if (typeof behavior.target == 'string') {\n                            window.open(url, behavior.target);\n                        } else {\n                            window.location.href = url;\n                        }\n                    }\n                    break;\n\n                // Action not defined, just return\n                default:\n                    break;\n                }\n            });\n        };\n    }\n\n    /**\n     * Get an object with the x and y coordinates of the panel's origin in terms of the entire page\n     *   Necessary for positioning any HTML elements over the panel\n     *\n     * @private\n     * @returns {{x: Number, y: Number}}\n     */\n    _getPageOrigin() {\n        const panel_origin = this.parent._getPageOrigin();\n        return {\n            x: panel_origin.x + this.parent.layout.margin.left,\n            y: panel_origin.y + this.parent.layout.margin.top,\n        };\n    }\n\n    /**\n     * Apply all tracked element statuses. This is primarily intended for re-rendering the plot, in order to preserve\n     *  behaviors when items are updated.\n     *  @private\n     */\n    applyAllElementStatus () {\n        const status_flags = this.layer_state.status_flags;\n        const self = this;\n        for (let property in status_flags) {\n            if (!Object.prototype.hasOwnProperty.call(status_flags, property)) {\n                continue;\n            }\n            if (Array.isArray(status_flags[property])) {\n                status_flags[property].forEach((element_id) => {\n                    try {\n                        this.setElementStatus(property, this.getElementById(element_id), true);\n                    } catch (e) {\n                        console.warn(`Unable to apply state: ${self.state_id}, ${property}`);\n                        console.error(e);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * Position the datalayer and all tooltips\n     * @private\n     * @returns {BaseDataLayer}\n     */\n    draw() {\n        this.svg.container\n            .attr('transform', `translate(${this.parent.layout.cliparea.origin.x}, ${this.parent.layout.cliparea.origin.y})`);\n        this.svg.clipRect\n            .attr('width', this.parent.layout.cliparea.width)\n            .attr('height', this.parent.layout.cliparea.height);\n        this.positionAllTooltips();\n        return this;\n    }\n\n    /**\n     * Re-Map a data layer to reflect changes in the state of a plot (such as viewing region/ chromosome range)\n     *\n     * @private\n     * @return {Promise}\n     */\n    reMap() {\n        this.destroyAllTooltips(); // hack - only non-visible tooltips should be destroyed\n        // and then recreated if returning to visibility\n\n        // Fetch new data. Datalayers are only given access to the final consolidated data from the chain (not headers or raw payloads)\n        const promise = this.parent_plot.lzd.getData(this.state, this.layout.fields);\n        promise.then((new_data) => {\n            this.data = new_data.body;\n            this.applyDataMethods();\n            this.initialized = true;\n        });\n\n        return promise;\n    }\n}\n\nSTATUSES.verbs.forEach((verb, idx) => {\n    const adjective = STATUSES.adjectives[idx];\n    const antiverb = `un${verb}`;\n    // Set/unset a single element's status\n\n    /**\n     * @private\n     * @function highlightElement\n     */\n    /**\n     * @private\n     * @function selectElement\n     */\n    /**\n     *  @private\n     *  @function fadeElement\n     */\n    /**\n     *  @private\n     *  @function hideElement\n     */\n    BaseDataLayer.prototype[`${verb}Element`] = function(element, exclusive) {\n        if (typeof exclusive == 'undefined') {\n            exclusive = false;\n        } else {\n            exclusive = !!exclusive;\n        }\n        this.setElementStatus(adjective, element, true, exclusive);\n        return this;\n    };\n\n    /**\n     * @private\n     * @function unhighlightElement\n     */\n    /**\n     *  @private\n     *  @function unselectElement\n     */\n    /**\n     *  @private\n     *  @function unfadeElement\n     */\n    /**\n     *  @private\n     *  @function unhideElement\n     */\n    BaseDataLayer.prototype[`${antiverb}Element`] = function(element, exclusive) {\n        if (typeof exclusive == 'undefined') {\n            exclusive = false;\n        } else {\n            exclusive = !!exclusive;\n        }\n        this.setElementStatus(adjective, element, false, exclusive);\n        return this;\n    };\n\n\n    /**\n     * @private\n     * @function highlightElementsByFilters\n     */\n    /**\n     *  @private\n     *  @function selectElementsByFilters\n     */\n    /**\n     *  @private\n     *  @function fadeElementsByFilters\n     */\n    /**\n     *  @private\n     *  @function hideElementsByFilters\n     */\n    // Set/unset status for arbitrarily many elements given a set of filters\n    BaseDataLayer.prototype[`${verb}ElementsByFilters`] = function(filters, exclusive) {\n        if (typeof exclusive == 'undefined') {\n            exclusive = false;\n        } else {\n            exclusive = !!exclusive;\n        }\n        return this.setElementStatusByFilters(adjective, true, filters, exclusive);\n    };\n\n    /**\n     *  @private\n     *  @function unhighlightElementsByFilters\n     */\n    /**\n     *  @private\n     *  @function unselectElementsByFilters\n     */\n    /**\n     *  @private\n     *  @function unfadeElementsByFilters\n     */\n    /**\n     * @private\n     * @function unhideElementsByFilters\n     */\n    BaseDataLayer.prototype[`${antiverb}ElementsByFilters`] = function(filters, exclusive) {\n        if (typeof exclusive == 'undefined') {\n            exclusive = false;\n        } else {\n            exclusive = !!exclusive;\n        }\n        return this.setElementStatusByFilters(adjective, false, filters, exclusive);\n    };\n\n    /**\n     * @private\n     * @function highlightAllElements\n     */\n    /**\n     *  @private\n     *  @function selectAllElements\n     */\n    /**\n     *  @private\n     *  @function fadeAllElements\n     */\n    /**\n     *  @private\n     *  @function hideAllElements\n     */\n    // Set/unset status for all elements\n    BaseDataLayer.prototype[`${verb}AllElements`] = function() {\n        this.setAllElementStatus(adjective, true);\n        return this;\n    };\n\n    /**\n     * @private\n     * @function unhighlightAllElements\n     */\n    /**\n     *  @private\n     *  @function unselectAllElements\n     */\n    /**\n     * @private\n     * @function unfadeAllElements\n     * */\n    /**\n     * @private\n     * @function unhideAllElements\n     */\n    BaseDataLayer.prototype[`${antiverb}AllElements`] = function() {\n        this.setAllElementStatus(adjective, false);\n        return this;\n    };\n});\n\nexport {BaseDataLayer as default};\n","/** @module */\nimport BaseDataLayer from './base';\nimport {merge} from '../../helpers/layouts';\n\nconst default_layout = {\n    color: '#000000',\n    filters: [],\n    tooltip_positioning: 'vertical', // Allowed values: top, middle, bottom\n    hitarea_width: 8,\n};\n\n/**\n * Create a single continuous 2D track that provides information about each datapoint\n *\n * For example, this can be used to color by membership in a group, alongside information in other panels\n *\n * @param {Object} layout\n * @param {Object|String} [layout.color]\n * @param {Array[]} An array of filter entries specifying which points to draw annotations for.\n *  See `BaseDataLayer.filter` for details\n */\n\nclass AnnotationTrack extends BaseDataLayer {\n    constructor(layout) {\n        if (!Array.isArray(layout.filters)) {\n            throw new Error('Annotation track must specify array of filters for selecting points to annotate');\n        }\n        merge(layout, default_layout);\n        super(...arguments);\n    }\n\n    render() {\n        // Only render points that currently satisfy all provided filter conditions.\n        const trackData = this.filter(this.layout.filters, 'elements');\n\n        // Put the <g> containing visible lines before the one containing hit areas, so that the hit areas will be on top.\n        let visible_lines_group = this.svg.group.select(`g.lz-data_layer-${this.layout.type}-visible_lines`);\n        if (visible_lines_group.size() === 0) {\n            visible_lines_group = this.svg.group.append('g')\n                .attr('class', `lz-data_layer-${this.layout.type}-visible_lines`);\n        }\n        const selection = visible_lines_group.selectAll(`rect.lz-data_layer-${this.layout.type}`)\n            .data(trackData, (d) => d[this.layout.id_field]);\n\n        const width = 1;\n        // Draw rectangles (visual and tooltip positioning)\n        selection.enter()\n            .append('rect')\n            .attr('class', `lz-data_layer-${this.layout.type}`)\n            .attr('id', (d) => this.getElementId(d))\n            .merge(selection)\n            .attr('x', (d) => this.parent['x_scale'](d[this.layout.x_axis.field]) - width / 2)\n            .attr('width', width)\n            .attr('height', this.parent.layout.height)\n            .attr('fill', (d, i) => this.resolveScalableParameter(this.layout.color, d, i));\n\n        // Remove unused elements\n        selection.exit()\n            .remove();\n\n        let hit_areas_group = this.svg.group.select(`g.lz-data_layer-${this.layout.type}-hit_areas`);\n        if (hit_areas_group.size() === 0) {\n            hit_areas_group = this.svg.group.append('g')\n                .attr('class', `lz-data_layer-${this.layout.type}-hit_areas`);\n        }\n        const hit_areas_selection = hit_areas_group.selectAll(`rect.lz-data_layer-${this.layout.type}`)\n            .data(trackData, (d) => d[this.layout.id_field]);\n\n        const _getX = (d, i) => { // Helper for position calcs below\n            const x_center = this.parent['x_scale'](d[this.layout.x_axis.field]);\n            let x_left = x_center - this.layout.hitarea_width / 2;\n            if (i >= 1) {\n                // This assumes that the data are in sorted order.\n                const left_node = trackData[i - 1];\n                const left_node_x_center = this.parent['x_scale'](left_node[this.layout.x_axis.field]);\n                x_left = Math.max(x_left, (x_center + left_node_x_center) / 2);\n            }\n            return [x_left, x_center];\n        };\n\n        // Add new elements as needed\n        hit_areas_selection.enter()\n            .append('rect')\n            .attr('class', `lz-data_layer-${this.layout.type}`)\n            .attr('id', (d) => this.getElementId(d))\n            // Update the set of elements to reflect new data\n            .merge(hit_areas_selection)\n            .attr('height', this.parent.layout.height)\n            .attr('opacity', 0)\n            .attr('x', (d, i) => {\n                const crds = _getX(d, i);\n                return crds[0];\n            }).attr('width', (d, i) => {\n                const crds = _getX(d, i);\n                return (crds[1] - crds[0]) + this.layout.hitarea_width / 2;\n            })\n            // Set up tooltips and mouse interaction\n            .call(this.applyBehaviors.bind(this));\n\n        // Remove unused elements\n        hit_areas_selection.exit()\n            .remove();\n    }\n\n    _getTooltipPosition(tooltip) {\n        const panel = this.parent;\n        const data_layer_height = panel.layout.height - (panel.layout.margin.top + panel.layout.margin.bottom);\n        const stroke_width = 1; // as defined in the default stylesheet\n\n        const x_center = panel.x_scale(tooltip.data[this.layout.x_axis.field]);\n        const y_center = data_layer_height / 2;\n        return {\n            x_min: x_center - stroke_width,\n            x_max: x_center + stroke_width,\n            y_min: y_center - panel.layout.margin.top,\n            y_max: y_center + panel.layout.margin.bottom,\n        };\n    }\n}\n\nexport {AnnotationTrack as default};\n","/**\n * Arc Data Layer\n * Implements a data layer that will render chromatin accessibility tracks.\n * This layer draws arcs (one per datapoint) that connect two endpoints (x.field1 and x.field2) by means of an arc,\n *  with a height determined by y.field.\n * @module\n */\nimport * as d3 from 'd3';\n\nimport BaseDataLayer from './base';\nimport {merge} from '../../helpers/layouts';\nimport {applyStyles} from '../../helpers/common';\n\nconst default_layout = {\n    color: 'seagreen',\n    hitarea_width: '10px',\n    style: {\n        fill: 'none',\n        'stroke-width': '1px',\n        'stroke-opacity': '100%',\n    },\n    tooltip_positioning: 'top',\n};\n\nclass Arcs extends BaseDataLayer {\n    constructor(layout) {\n        layout = merge(layout, default_layout);\n        super(...arguments);\n    }\n\n    // Implement the main render function\n    render() {\n        const self = this;\n        const layout = self.layout;\n        const x_scale = self.parent['x_scale'];\n        const y_scale = self.parent[`y${layout.y_axis.axis}_scale`];\n\n        // Optionally restrict the data to a specific set of filters\n        const filters = layout.filters || [];\n        const trackData = this.filter(filters, 'elements');\n\n        // Helper: Each individual data point describes a path composed of 3 points, with a spline to smooth the line\n        function _make_line(d) {\n            const x1 = d[layout.x_axis.field1];\n            const x2 = d[layout.x_axis.field2];\n            const xmid = (x1 + x2) / 2;\n            const coords = [\n                [x_scale(x1), y_scale(0)],\n                [x_scale(xmid), y_scale(d[layout.y_axis.field])],\n                [x_scale(x2), y_scale(0)],\n            ];\n            // Smoothing options: https://bl.ocks.org/emmasaunders/f7178ed715a601c5b2c458a2c7093f78\n            const line = d3.line()\n                .x((d) => d[0])\n                .y((d) => d[1])\n                .curve(d3.curveNatural);\n            return line(coords);\n        }\n\n        // Draw real lines, and also invisible hitareas for easier mouse events\n        const selection = this.svg.group\n            .selectAll('path.lz-data_layer-arcs')\n            .data(trackData, (d) => this.getElementId(d));\n\n        const hitareas = this.svg.group\n            .selectAll('path.lz-data_layer-arcs-hitarea')\n            .data(trackData, (d) => this.getElementId(d));\n\n        // Add new points as necessary\n        selection\n            .enter()\n            .append('path')\n            .attr('class', 'lz-data_layer-arcs')\n            .attr('id', (d) => this.getElementId(d))\n            .merge(selection)\n            .attr('stroke', (d, i) => this.resolveScalableParameter(this.layout.color, d, i))\n            .attr('d', (d, i) => _make_line(d))\n            .call(applyStyles, layout.style);\n\n        hitareas\n            .enter()\n            .append('path')\n            .attr('class', 'lz-data_layer-arcs-hitarea')\n            .attr('id', (d) => this.getElementId(d))\n            .merge(hitareas)\n            .style('fill', 'none')\n            .style('stroke-width', layout.hitarea_width)\n            .style('stroke-opacity', 0)\n            .style('stroke', 'transparent')\n            .attr('d', (d) => _make_line(d))\n            // Apply mouse behaviors to hitareas\n            .call(this.applyBehaviors.bind(this));\n\n        // Remove old elements as needed\n        selection.exit()\n            .remove();\n\n        hitareas.exit()\n            .remove();\n        return this;\n    }\n\n    _getTooltipPosition(tooltip) {\n        // Center the tooltip arrow at the apex of the arc. Sometimes, only part of an arc shows on the screen, so we\n        //  clean up these values to ensure that the tooltip will appear within the window.\n        const panel = this.parent;\n        const layout = this.layout;\n\n        const x1 = tooltip.data[layout.x_axis.field1];\n        const x2 = tooltip.data[layout.x_axis.field2];\n\n        const y_scale = panel[`y${layout.y_axis.axis}_scale`];\n\n        return {\n            x_min: panel.x_scale(Math.min(x1, x2)),\n            x_max: panel.x_scale(Math.max(x1, x2)),\n            y_min: y_scale(tooltip.data[layout.y_axis.field]),\n            y_max: y_scale(0),\n        };\n    }\n\n}\n\nexport {Arcs as default};\n","/** @module */\nimport * as d3 from 'd3';\n\nimport BaseDataLayer from './base';\nimport Field from '../../data/field';\nimport {merge, nameToSymbol} from '../../helpers/layouts';\n\n\nconst default_layout = {\n    point_size: 40,\n    point_shape: 'square',\n    color: '#888888',\n    fill_opacity: 1,\n    y_axis: {\n        axis: 2,\n    },\n    id_field: 'id',\n    confidence_intervals: {\n        start_field: 'ci_start',\n        end_field: 'ci_end',\n    },\n    show_no_significance_line: true,\n};\n\n/**\n * Forest Data Layer\n * Implements a standard forest plot. In order to space out points, any layout using this must specify axis ticks\n *  and extent in advance.\n *\n * If you are using dynamically fetched data, consider using `category_forest` instead.\n *\n */\nclass Forest extends BaseDataLayer {\n    constructor(layout) {\n        layout = merge(layout, default_layout);\n        super(...arguments);\n    }\n\n    _getTooltipPosition(tooltip) {\n        const x_center = this.parent.x_scale(tooltip.data[this.layout.x_axis.field]);\n        const y_scale = `y${this.layout.y_axis.axis}_scale`;\n        const y_center = this.parent[y_scale](tooltip.data[this.layout.y_axis.field]);\n\n        const point_size = this.resolveScalableParameter(this.layout.point_size, tooltip.data);\n        const offset = Math.sqrt(point_size / Math.PI);\n        return {\n            x_min: x_center - offset,\n            x_max: x_center + offset,\n            y_min: y_center - offset,\n            y_max: y_center + offset,\n        };\n    }\n\n    // Implement the main render function\n    render() {\n\n        const x_scale = 'x_scale';\n        const y_scale = `y${this.layout.y_axis.axis}_scale`;\n\n        // Generate confidence interval paths if fields are defined\n        if (this.layout.confidence_intervals\n            && this.layout.fields.includes(this.layout.confidence_intervals.start_field)\n            && this.layout.fields.includes(this.layout.confidence_intervals.end_field)) {\n            // Generate a selection for all forest plot confidence intervals\n            const ci_selection = this.svg.group\n                .selectAll('rect.lz-data_layer-forest.lz-data_layer-forest-ci')\n                .data(this.data, (d) => {\n                    return d[this.layout.id_field];\n                });\n\n            const ci_transform = (d) => {\n                let x = this.parent[x_scale](d[this.layout.confidence_intervals.start_field]);\n                let y = this.parent[y_scale](d[this.layout.y_axis.field]);\n                if (isNaN(x)) {\n                    x = -1000;\n                }\n                if (isNaN(y)) {\n                    y = -1000;\n                }\n                return `translate(${x}, ${y})`;\n            };\n            const ci_width = (d) => {\n                return this.parent[x_scale](d[this.layout.confidence_intervals.end_field])\n                    - this.parent[x_scale](d[this.layout.confidence_intervals.start_field]);\n            };\n            const ci_height = 1;\n            // Create confidence interval rect elements\n            ci_selection.enter()\n                .append('rect')\n                .attr('class', 'lz-data_layer-forest lz-data_layer-forest-ci')\n                .attr('id', (d) => `${this.getElementId(d)}_ci`)\n                .attr('transform', `translate(0, ${isNaN(this.parent.layout.height) ? 0 : this.parent.layout.height})`)\n                .merge(ci_selection)\n                .attr('transform', ci_transform)\n                .attr('width', ci_width)\n                .attr('height', ci_height);\n\n            // Remove old elements as needed\n            ci_selection.exit()\n                .remove();\n        }\n\n        // Generate a selection for all forest plot points\n        const points_selection = this.svg.group\n            .selectAll('path.lz-data_layer-forest.lz-data_layer-forest-point')\n            .data(this.data, (d) => {\n                return d[this.layout.id_field];\n            });\n\n        // Create elements, apply class, ID, and initial position\n        const initial_y = isNaN(this.parent.layout.height) ? 0 : this.parent.layout.height;\n\n        // Generate new values (or functions for them) for position, color, size, and shape\n        const transform = (d) => {\n            let x = this.parent[x_scale](d[this.layout.x_axis.field]);\n            let y = this.parent[y_scale](d[this.layout.y_axis.field]);\n            if (isNaN(x)) {\n                x = -1000;\n            }\n            if (isNaN(y)) {\n                y = -1000;\n            }\n            return `translate(${x}, ${y})`;\n        };\n\n        const fill = (d, i) => this.resolveScalableParameter(this.layout.color, d, i);\n        const fill_opacity = (d, i) => this.resolveScalableParameter(this.layout.fill_opacity, d, i);\n\n        const shape = d3.symbol()\n            .size((d, i) => this.resolveScalableParameter(this.layout.point_size, d, i))\n            .type((d, i) => nameToSymbol(this.resolveScalableParameter(this.layout.point_shape, d, i)));\n\n        points_selection.enter()\n            .append('path')\n            .attr('class', 'lz-data_layer-forest lz-data_layer-forest-point')\n            .attr('id', (d) => this.getElementId(d))\n            .attr('transform', `translate(0, ${initial_y})`)\n            .merge(points_selection)\n            .attr('transform', transform)\n            .attr('fill', fill)\n            .attr('fill-opacity', fill_opacity)\n            .attr('d', shape)\n            // Apply behaviors to points\n            .on('click.event_emitter', (element_data) => {\n                this.parent.emit('element_clicked', element_data, true);\n            }).call(this.applyBehaviors.bind(this));\n\n        // Remove old elements as needed\n        points_selection.exit()\n            .remove();\n    }\n}\n\n\n/**\n * A y-aligned forest plot in which the y-axis represents item labels, which are dynamically chosen when data is loaded.\n *   Each item is assumed to include both data and confidence intervals.\n *   This allows generating forest plots without defining the layout in advance.\n *\n */\nclass CategoryForest extends Forest {\n    _getDataExtent(data, axis_config) {\n        // In a forest plot, the data range is determined by *three* fields (beta + CI start/end)\n        const ci_config = this.layout.confidence_intervals;\n        if (ci_config\n            && this.layout.fields.includes(ci_config.start_field)\n            && this.layout.fields.includes(ci_config.end_field)) {\n            const min = (d) => {\n                const f = new Field(ci_config.start_field);\n                return +f.resolve(d);\n            };\n\n            const max = (d) => {\n                const f = new Field(ci_config.end_field);\n                return +f.resolve(d);\n            };\n\n            return [d3.min(data, min), d3.max(data, max)];\n        }\n\n        // If there are no confidence intervals set, then range must depend only on a single field\n        return super._getDataExtent(data, axis_config);\n    }\n\n    getTicks(dimension, config) { // Overrides parent method\n        if (!['x', 'y1', 'y2'].includes(dimension)) {\n            throw new Error(`Invalid dimension identifier ${dimension}`);\n        }\n\n        // Design assumption: one axis (y1 or y2) has the ticks, and the layout says which to use\n        // Also assumes that every tick gets assigned a unique matching label\n        const axis_num = this.layout.y_axis.axis;\n        if (dimension === (`y${axis_num}`)) {\n            const category_field = this.layout.y_axis.category_field;\n            if (!category_field) {\n                throw new Error(`Layout for ${this.layout.id} must specify category_field`);\n            }\n\n            return this.data.map((item, index) => ({ y: index + 1, text: item[category_field] }));\n        } else {\n            return [];\n        }\n    }\n\n    applyCustomDataMethods () {\n        // Add a synthetic yaxis field to ensure data is spread out on plot. Then, set axis floor and ceiling to\n        //  correct extents.\n        const field_to_add = this.layout.y_axis.field;\n        if (!field_to_add) {\n            throw new Error(`Layout for ${this.layout.id} must specify yaxis.field`);\n        }\n\n        this.data = this.data.map((item, index) => {\n            item[field_to_add] = index + 1;\n            return item;\n        });\n        // Update axis extents based on one label for every point (with a bit of padding above and below)\n        this.layout.y_axis.floor = 0;\n        this.layout.y_axis.ceiling = this.data.length + 1;\n        return this;\n    }\n}\n\nexport { Forest as forest, CategoryForest as category_forest };\n","/** @module */\nimport * as d3 from 'd3';\n\nimport BaseDataLayer from './base';\nimport {merge} from '../../helpers/layouts';\n\nconst default_layout = {\n    // Optionally specify different fill and stroke properties\n    stroke: 'rgb(54, 54, 150)',\n    color: '#363696',\n    label_font_size: 12,\n    label_exon_spacing: 3,\n    exon_height: 10,\n    bounding_box_padding: 3,\n    track_vertical_spacing: 5,\n    tooltip_positioning: 'top',\n};\n\n\n/*********************\n * Genes Data Layer\n * Implements a data layer that will render gene tracks\n*/\nclass Genes extends BaseDataLayer {\n    constructor(layout) {\n        layout = merge(layout, default_layout);\n        super(...arguments);\n        /**\n         * A gene may have arbitrarily many transcripts, but this data layer isn't set up to render them yet.\n         * Stash a transcript_idx to point to the first transcript and use that for all transcript refs.\n         * @member {number}\n         * @type {number}\n         */\n        this.transcript_idx = 0;\n\n        /**\n         * An internal counter for the number of tracks in the data layer. Used as an internal counter for looping\n         *   over positions / assignments\n         * @protected\n         * @member {number}\n         */\n        this.tracks = 1;\n\n        /**\n         * Store information about genes in dataset, in a hash indexed by track number: {track_number: [gene_indices]}\n         * @member {Object.<Number, Array>}\n         */\n        this.gene_track_index = { 1: [] };\n    }\n\n    /**\n     * Generate a statusnode ID for a given element\n     * @override\n     * @returns {String}\n     */\n    getElementStatusNodeId(element) {\n        return `${this.getElementId(element)}-statusnode`;\n    }\n\n    /**\n     * Helper function to sum layout values to derive total height for a single gene track\n     * @returns {number}\n     */\n    getTrackHeight() {\n        return 2 * this.layout.bounding_box_padding\n            + this.layout.label_font_size\n            + this.layout.label_exon_spacing\n            + this.layout.exon_height\n            + this.layout.track_vertical_spacing;\n    }\n\n    /**\n     * Ensure that genes in overlapping chromosome regions are positioned so that parts of different genes do not\n     *   overlap in the view. A track is a row used to vertically separate overlapping genes.\n     * @returns {Genes}\n     */\n    assignTracks() {\n        /**\n         * Function to get the width in pixels of a label given the text and layout attributes\n         * @param {String} gene_name\n         * @param {number|string} font_size\n         * @returns {number}\n         */\n        const _getLabelWidth = (gene_name, font_size) => {\n            try {\n                const temp_text = this.svg.group.append('text')\n                    .attr('x', 0)\n                    .attr('y', 0)\n                    .attr('class', 'lz-data_layer-genes lz-label')\n                    .style('font-size', font_size)\n                    .text(`${gene_name}→`);\n                const label_width = temp_text.node().getBBox().width;\n                temp_text.remove();\n                return label_width;\n            } catch (e) {\n                return 0;\n            }\n        };\n\n        // Reinitialize some metadata\n        this.tracks = 1;\n        this.gene_track_index = { 1: [] };\n\n        this.data.map((item) => {\n\n            // If necessary, split combined gene id / version fields into discrete fields.\n            // NOTE: this may be an issue with CSG's genes data source that may eventually be solved upstream.\n            if (item.gene_id && item.gene_id.indexOf('.')) {\n                const split = item.gene_id.split('.');\n                item.gene_id = split[0];\n                item.gene_version = split[1];\n            }\n\n            // Stash the transcript ID on the parent gene\n            item.transcript_id = item.transcripts[this.transcript_idx].transcript_id;\n\n            // Determine display range start and end, based on minimum allowable gene display width, bounded by what we can see\n            // (range: values in terms of pixels on the screen)\n            item.display_range = {\n                start: this.parent.x_scale(Math.max(item.start, this.state.start)),\n                end:   this.parent.x_scale(Math.min(item.end, this.state.end)),\n            };\n            item.display_range.label_width = _getLabelWidth(item.gene_name, this.layout.label_font_size);\n            item.display_range.width = item.display_range.end - item.display_range.start;\n            // Determine label text anchor (default to middle)\n            item.display_range.text_anchor = 'middle';\n            if (item.display_range.width < item.display_range.label_width) {\n                if (item.start < this.state.start) {\n                    item.display_range.end = item.display_range.start\n                        + item.display_range.label_width\n                        + this.layout.label_font_size;\n                    item.display_range.text_anchor = 'start';\n                } else if (item.end > this.state.end) {\n                    item.display_range.start = item.display_range.end\n                        - item.display_range.label_width\n                        - this.layout.label_font_size;\n                    item.display_range.text_anchor = 'end';\n                } else {\n                    const centered_margin = ((item.display_range.label_width - item.display_range.width) / 2)\n                        + this.layout.label_font_size;\n                    if ((item.display_range.start - centered_margin) < this.parent.x_scale(this.state.start)) {\n                        item.display_range.start = this.parent.x_scale(this.state.start);\n                        item.display_range.end = item.display_range.start + item.display_range.label_width;\n                        item.display_range.text_anchor = 'start';\n                    } else if ((item.display_range.end + centered_margin) > this.parent.x_scale(this.state.end)) {\n                        item.display_range.end = this.parent.x_scale(this.state.end);\n                        item.display_range.start = item.display_range.end - item.display_range.label_width;\n                        item.display_range.text_anchor = 'end';\n                    } else {\n                        item.display_range.start -= centered_margin;\n                        item.display_range.end += centered_margin;\n                    }\n                }\n                item.display_range.width = item.display_range.end - item.display_range.start;\n            }\n            // Add bounding box padding to the calculated display range start, end, and width\n            item.display_range.start -= this.layout.bounding_box_padding;\n            item.display_range.end   += this.layout.bounding_box_padding;\n            item.display_range.width += 2 * this.layout.bounding_box_padding;\n            // Convert and stash display range values into domain values\n            // (domain: values in terms of the data set, e.g. megabases)\n            item.display_domain = {\n                start: this.parent.x_scale.invert(item.display_range.start),\n                end:   this.parent.x_scale.invert(item.display_range.end),\n            };\n            item.display_domain.width = item.display_domain.end - item.display_domain.start;\n\n            // Using display range/domain data generated above cast each gene to tracks such that none overlap\n            item.track = null;\n            let potential_track = 1;\n            while (item.track === null) {\n                let collision_on_potential_track = false;\n                this.gene_track_index[potential_track].map((placed_gene) => {\n                    if (!collision_on_potential_track) {\n                        const min_start = Math.min(placed_gene.display_range.start, item.display_range.start);\n                        const max_end = Math.max(placed_gene.display_range.end, item.display_range.end);\n                        if ((max_end - min_start) < (placed_gene.display_range.width + item.display_range.width)) {\n                            collision_on_potential_track = true;\n                        }\n                    }\n                });\n                if (!collision_on_potential_track) {\n                    item.track = potential_track;\n                    this.gene_track_index[potential_track].push(item);\n                } else {\n                    potential_track++;\n                    if (potential_track > this.tracks) {\n                        this.tracks = potential_track;\n                        this.gene_track_index[potential_track] = [];\n                    }\n                }\n            }\n\n            // Stash parent references on all genes, trascripts, and exons\n            item.parent = this;\n            item.transcripts.map((d, t) => {\n                item.transcripts[t].parent = item;\n                item.transcripts[t].exons.map((d, e) => item.transcripts[t].exons[e].parent = item.transcripts[t]);\n            });\n\n        });\n        return this;\n    }\n\n    /**\n     * Main render function\n     */\n    render() {\n\n        const self = this;\n        this.assignTracks();\n\n        let width, height, x, y;\n\n        // Render gene groups\n        const selection = this.svg.group.selectAll('g.lz-data_layer-genes')\n            .data(this.data, (d) => d.gene_name);\n\n        selection.enter()\n            .append('g')\n            .attr('class', 'lz-data_layer-genes')\n            .merge(selection)\n            .attr('id', (d) => this.getElementId(d))\n            .each(function(gene) {\n                const data_layer = gene.parent;\n\n                // Render gene bounding boxes (status nodes to show selected/highlighted)\n                const bboxes = d3.select(this).selectAll('rect.lz-data_layer-genes.lz-data_layer-genes-statusnode')\n                    .data([gene], (d) => data_layer.getElementStatusNodeId(d));\n\n                width = (d) => d.display_range.width;\n                height = data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                x = (d) => d.display_range.start;\n                y = (d) => ((d.track - 1) * data_layer.getTrackHeight());\n\n                bboxes.enter()\n                    .append('rect')\n                    .attr('class', 'lz-data_layer-genes lz-data_layer-genes-statusnode')\n                    .merge(bboxes)\n                    .attr('id', (d) => data_layer.getElementStatusNodeId(d))\n                    .attr('rx', data_layer.layout.bounding_box_padding)\n                    .attr('ry', data_layer.layout.bounding_box_padding)\n                    .attr('width', width)\n                    .attr('height', height)\n                    .attr('x', x)\n                    .attr('y', y);\n\n                bboxes.exit()\n                    .remove();\n\n                // Render gene boundaries\n                const boundary_fill = (d, i) => self.resolveScalableParameter(self.layout.color, d, i);\n                const boundary_stroke = (d, i) => self.resolveScalableParameter(self.layout.stroke, d, i);\n                const boundaries = d3.select(this).selectAll('rect.lz-data_layer-genes.lz-boundary')\n                    .data([gene], (d) => `${d.gene_name}_boundary`);\n\n                width = (d) => data_layer.parent.x_scale(d.end) - data_layer.parent.x_scale(d.start);\n                height = 1;\n                x = (d) => data_layer.parent.x_scale(d.start);\n                y = function(d) {\n                    return ((d.track - 1) * data_layer.getTrackHeight())\n                        + data_layer.layout.bounding_box_padding\n                        + data_layer.layout.label_font_size\n                        + data_layer.layout.label_exon_spacing\n                        + (Math.max(data_layer.layout.exon_height, 3) / 2);\n                };\n\n                boundaries.enter()\n                    .append('rect')\n                    .attr('class', 'lz-data_layer-genes lz-boundary')\n                    .merge(boundaries)\n                    .attr('width', width)\n                    .attr('height', height)\n                    .attr('x', x)\n                    .attr('y', y)\n                    .style('fill', boundary_fill)\n                    .style('stroke', boundary_stroke);\n\n                boundaries.exit()\n                    .remove();\n\n                // Render gene labels\n                const labels = d3.select(this).selectAll('text.lz-data_layer-genes.lz-label')\n                    .data([gene], (d) => `${d.gene_name}_label`);\n\n                x = (d) => {\n                    if (d.display_range.text_anchor === 'middle') {\n                        return d.display_range.start + (d.display_range.width / 2);\n                    } else if (d.display_range.text_anchor === 'start') {\n                        return d.display_range.start + data_layer.layout.bounding_box_padding;\n                    } else if (d.display_range.text_anchor === 'end') {\n                        return d.display_range.end - data_layer.layout.bounding_box_padding;\n                    }\n                };\n                y = (d) => ((d.track - 1) * data_layer.getTrackHeight())\n                    + data_layer.layout.bounding_box_padding\n                    + data_layer.layout.label_font_size;\n\n                labels.enter()\n                    .append('text')\n                    .attr('class', 'lz-data_layer-genes lz-label')\n                    .merge(labels)\n                    .attr('text-anchor', (d) => d.display_range.text_anchor)\n                    .text((d) => (d.strand === '+') ? `${d.gene_name}→` : `←${d.gene_name}`)\n                    .style('font-size', gene.parent.layout.label_font_size)\n                    .attr('x', x)\n                    .attr('y', y);\n\n                labels.exit()\n                    .remove();\n\n                // Render exon rects (first transcript only, for now)\n                // Exons: by default color on gene properties for consistency with the gene boundary track- hence color uses d.parent.parent\n                const exon_fill = (d, i) => self.resolveScalableParameter(self.layout.color, d.parent.parent, i);\n                const exon_stroke = (d, i) => self.resolveScalableParameter(self.layout.stroke, d.parent.parent, i);\n\n                const exons = d3.select(this).selectAll('rect.lz-data_layer-genes.lz-exon')\n                    .data(gene.transcripts[gene.parent.transcript_idx].exons, (d) => d.exon_id);\n\n                width = (d) => data_layer.parent.x_scale(d.end) - data_layer.parent.x_scale(d.start);\n                height = data_layer.layout.exon_height;\n                x = (d) => data_layer.parent.x_scale(d.start);\n                y = function() {\n                    return ((gene.track - 1) * data_layer.getTrackHeight())\n                        + data_layer.layout.bounding_box_padding\n                        + data_layer.layout.label_font_size\n                        + data_layer.layout.label_exon_spacing;\n                };\n\n                exons.enter()\n                    .append('rect')\n                    .attr('class', 'lz-data_layer-genes lz-exon')\n                    .merge(exons)\n                    .style('fill', exon_fill)\n                    .style('stroke', exon_stroke)\n                    .attr('width', width)\n                    .attr('height', height)\n                    .attr('x', x)\n                    .attr('y', y);\n\n                exons.exit()\n                    .remove();\n\n                // Render gene click area\n                const clickareas = d3.select(this).selectAll('rect.lz-data_layer-genes.lz-clickarea')\n                    .data([gene], (d) => `${d.gene_name}_clickarea`);\n\n                width = (d) => d.display_range.width;\n                height = data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                x = (d) => d.display_range.start;\n                y = (d) => ((d.track - 1) * data_layer.getTrackHeight());\n                clickareas.enter()\n                    .append('rect')\n                    .attr('class', 'lz-data_layer-genes lz-clickarea')\n                    .merge(clickareas)\n                    .attr('id', (d) => `${data_layer.getElementId(d)}_clickarea`)\n                    .attr('rx', data_layer.layout.bounding_box_padding)\n                    .attr('ry', data_layer.layout.bounding_box_padding)\n                    .attr('width', width)\n                    .attr('height', height)\n                    .attr('x', x)\n                    .attr('y', y)\n                    // Apply mouse behaviors & events to clickareas\n                    .on('click.event_emitter', (element) => element.parent.parent.emit('element_clicked', element, true))\n                    .call(data_layer.applyBehaviors.bind(data_layer));\n\n                // Remove old clickareas as needed\n                clickareas.exit()\n                    .remove();\n            });\n\n        // Remove old elements as needed\n        selection.exit()\n            .remove();\n    }\n\n    _getTooltipPosition(tooltip) {\n        const gene_bbox_id = this.getElementStatusNodeId(tooltip.data);\n        const gene_bbox = d3.select(`#${gene_bbox_id}`).node().getBBox();\n        return {\n            x_min: this.parent.x_scale(tooltip.data.start),\n            x_max: this.parent.x_scale(tooltip.data.end),\n            y_min: gene_bbox.y,\n            y_max: gene_bbox.y + gene_bbox.height,\n        };\n    }\n}\n\nexport {Genes as default};\n","/** @module */\nimport * as d3 from 'd3';\n\nimport BaseDataLayer from './base';\nimport {merge} from '../../helpers/layouts';\nimport {STATUSES} from '../constants';\nimport {applyStyles} from '../../helpers/common';\n\nconst default_layout = {\n    style: {\n        fill: 'none',\n        'stroke-width': '2px',\n    },\n    interpolate: 'curveLinear',\n    x_axis: { field: 'x' },\n    y_axis: { field: 'y', axis: 1 },\n    hitarea_width: 5,\n};\n\n/*********************\n * Line Data Layer\n * Implements a standard line plot, representing either a trace or a filled curve.\n*/\nclass Line extends BaseDataLayer {\n    constructor(layout) {\n        layout = merge(layout, default_layout);\n        if (layout.tooltip) {\n            throw new Error('The line / filled curve layer does not support tooltips');\n        }\n        super(...arguments);\n    }\n\n    /**\n     * Implement the main render function\n     */\n    render() {\n        // Several vars needed to be in scope\n        const panel = this.parent;\n        const x_field = this.layout.x_axis.field;\n        const y_field = this.layout.y_axis.field;\n\n        // Join data to the line selection\n        const selection = this.svg.group\n            .selectAll('path.lz-data_layer-line')\n            .data([this.data]);\n\n        // Create path element, apply class\n        this.path = selection.enter()\n            .append('path')\n            .attr('class', 'lz-data_layer-line');\n\n        // Generate the line\n        let line;\n        const x_scale = panel['x_scale'];\n        const y_scale = panel[`y${this.layout.y_axis.axis}_scale`];\n        if (this.layout.style.fill && this.layout.style.fill !== 'none') {\n            // Filled curve: define the line as a filled boundary\n            line = d3.area()\n                .x((d) => +x_scale(d[x_field]))\n                .y0(+y_scale(0))\n                .y1((d) => +y_scale(d[y_field]));\n        } else {\n            // Basic line\n            line = d3.line()\n                .x((d) => +x_scale(d[x_field]))\n                .y((d) => +y_scale(d[y_field]))\n                .curve(d3[this.layout.interpolate]);\n        }\n\n        // Apply line and style\n        selection.merge(this.path)\n            .attr('d', line)\n            .call(applyStyles, this.layout.style);\n\n        // Remove old elements as needed\n        selection.exit()\n            .remove();\n\n    }\n\n    /**\n     * Redefine setElementStatus family of methods as line data layers will only ever have a single path element\n     * @param {String} status A member of `LocusZoom.DataLayer.Statuses.adjectives`\n     * @param {String|Object} element\n     * @param {Boolean} toggle\n     * @returns {Line}\n     */\n    setElementStatus(status, element, toggle) {\n        return this.setAllElementStatus(status, toggle);\n    }\n\n    setElementStatusByFilters(status, toggle) {\n        return this.setAllElementStatus(status, toggle);\n    }\n\n    setAllElementStatus(status, toggle) {\n        // Sanity check\n        if (typeof status == 'undefined' || !STATUSES.adjectives.includes(status)) {\n            throw new Error('Invalid status');\n        }\n        if (typeof this.layer_state.status_flags[status] == 'undefined') {\n            return this;\n        }\n        if (typeof toggle == 'undefined') {\n            toggle = true;\n        }\n\n        // Update global status flag\n        this.global_statuses[status] = toggle;\n\n        // Apply class to path based on global status flags\n        let path_class = 'lz-data_layer-line';\n        Object.keys(this.global_statuses).forEach((global_status) => {\n            if (this.global_statuses[global_status]) {\n                path_class += ` lz-data_layer-line-${global_status}`;\n            }\n        });\n        this.path.attr('class', path_class);\n\n        // Trigger layout changed event hook\n        this.parent.emit('layout_changed', true);\n        return this;\n    }\n}\n\nconst default_orthogonal_layout = {\n    style: {\n        'stroke': '#D3D3D3',\n        'stroke-width': '3px',\n        'stroke-dasharray': '10px 10px',\n    },\n    orientation: 'horizontal',\n    x_axis: {\n        axis: 1,\n        decoupled: true,\n    },\n    y_axis: {\n        axis: 1,\n        decoupled: true,\n    },\n    tooltip_positioning: 'vertical',\n    offset: 0,\n};\n\n\n/***************************\n *  Orthogonal Line Data Layer\n *  Implements a horizontal or vertical line given an orientation and an offset in the layout\n *  Does not require a data source\n*/\nclass OrthogonalLine extends BaseDataLayer {\n    constructor(layout) {\n        layout = merge(layout, default_orthogonal_layout);\n        // Require that orientation be \"horizontal\" or \"vertical\" only\n        if (!['horizontal', 'vertical'].includes(layout.orientation)) {\n            layout.orientation = 'horizontal';\n        }\n        super(...arguments);\n\n        // Vars for storing the data generated line\n        /** @member {Array} */\n        this.data = [];\n    }\n\n    getElementId(element) {\n        // There is only one line per datalayer, so this is sufficient.\n        return this.getBaseId();\n    }\n\n    /**\n     * Implement the main render function\n     */\n    render() {\n\n        // Several vars needed to be in scope\n        const panel = this.parent;\n        const x_scale = 'x_scale';\n        const y_scale = `y${this.layout.y_axis.axis}_scale`;\n        const x_extent = 'x_extent';\n        const y_extent = `y${this.layout.y_axis.axis}_extent`;\n        const x_range = 'x_range';\n\n        // Generate data using extents depending on orientation\n        if (this.layout.orientation === 'horizontal') {\n            this.data = [\n                { x: panel[x_extent][0], y: this.layout.offset },\n                { x: panel[x_extent][1], y: this.layout.offset },\n            ];\n        } else if (this.layout.orientation === 'vertical') {\n            this.data = [\n                { x: this.layout.offset, y: panel[y_extent][0] },\n                { x: this.layout.offset, y: panel[y_extent][1] },\n            ];\n        } else {\n            throw new Error('Unrecognized vertical line type. Must be \"vertical\" or \"horizontal\"');\n        }\n\n        // Join data to the line selection\n        const selection = this.svg.group\n            .selectAll('path.lz-data_layer-line')\n            .data([this.data]);\n\n        // In some cases, a vertical line may overlay a track that has no inherent y-values (extent)\n        //  When that happens, provide a default height based on the current panel dimensions (accounting\n        //      for any resizing that happened after the panel was created)\n        const default_y = [panel.layout.cliparea.height, 0];\n\n        // Generate the line\n        const line = d3.line()\n            .x((d, i) => {\n                const x = +panel[x_scale](d['x']);\n                return isNaN(x) ? panel[x_range][i] : x;\n            })\n            .y((d, i) => {\n                const y = +panel[y_scale](d['y']);\n                return isNaN(y) ? default_y[i] : y;\n            });\n\n        // Create path element, apply class\n        this.path = selection.enter()\n            .append('path')\n            .attr('class', 'lz-data_layer-line')\n            .merge(selection)\n            .attr('d', line)\n            .call(applyStyles, this.layout.style)\n            // Allow the layer to respond to mouseover events and show a tooltip.\n            .call(this.applyBehaviors.bind(this));\n\n        // Remove old elements as needed\n        selection.exit()\n            .remove();\n    }\n\n    _getTooltipPosition(tooltip) {\n        try {\n            const coords = d3.mouse(this.svg.container.node());\n            const x = coords[0];\n            const y = coords[1];\n            return { x_min: x - 1, x_max: x + 1, y_min: y - 1, y_max: y + 1 };\n        } catch (e) {\n            // On redraw, there won't be a mouse event, so skip tooltip repositioning.\n            return null;\n        }\n    }\n\n}\n\n\nexport { Line as line, OrthogonalLine as orthogonal_line };\n","/** @module */\nimport * as d3 from 'd3';\nimport BaseDataLayer from './base';\nimport Field from '../../data/field';\nimport {applyStyles} from '../../helpers/common';\nimport {parseFields} from '../../helpers/display';\nimport {merge, nameToSymbol} from '../../helpers/layouts';\n\n\nconst default_layout = {\n    point_size: 40,\n    point_shape: 'circle',\n    tooltip_positioning: 'horizontal',\n    color: '#888888',\n    fill_opacity: 1,\n    y_axis: {\n        axis: 1,\n    },\n    id_field: 'id',\n};\n/**\n * Scatter Data Layer\n * Implements a standard scatter plot\n */\nclass Scatter extends BaseDataLayer {\n    constructor(layout) {\n        layout = merge(layout, default_layout);\n\n        // Extra default for layout spacing\n        // Not in default layout since that would make the label attribute always present\n        if (layout.label && isNaN(layout.label.spacing)) {\n            layout.label.spacing = 4;\n        }\n        super(...arguments);\n    }\n\n    // Implement tooltip position to be layer-specific\n    _getTooltipPosition(tooltip) {\n        const x_center = this.parent.x_scale(tooltip.data[this.layout.x_axis.field]);\n        const y_scale = `y${this.layout.y_axis.axis}_scale`;\n        const y_center = this.parent[y_scale](tooltip.data[this.layout.y_axis.field]);\n        const point_size = this.resolveScalableParameter(this.layout.point_size, tooltip.data);\n        const offset = Math.sqrt(point_size / Math.PI);\n\n        return {\n            x_min: x_center - offset, x_max: x_center + offset,\n            y_min: y_center - offset, y_max: y_center + offset,\n        };\n    }\n\n    // Function to flip labels from being anchored at the start of the text to the end\n    // Both to keep labels from running outside the data layer and  also as a first\n    // pass on recursive separation\n    flip_labels() {\n        const data_layer = this;\n        // Base positions on the default point size (which is what resolve scalable param returns if no data provided)\n        const point_size = data_layer.resolveScalableParameter(data_layer.layout.point_size, {});\n        const spacing = data_layer.layout.label.spacing;\n        const handle_lines = Boolean(data_layer.layout.label.lines);\n        const min_x = 2 * spacing;\n        const max_x = this.parent.layout.width - this.parent.layout.margin.left - this.parent.layout.margin.right - (2 * spacing);\n\n        const flip = (dn, dnl) => {\n            const dnx = +dn.attr('x');\n            const text_swing = (2 * spacing) + (2 * Math.sqrt(point_size));\n            let dnlx2;\n            let line_swing;\n            if (handle_lines) {\n                dnlx2 = +dnl.attr('x2');\n                line_swing = spacing + (2 * Math.sqrt(point_size));\n            }\n            if (dn.style('text-anchor') === 'start') {\n                dn.style('text-anchor', 'end');\n                dn.attr('x', dnx - text_swing);\n                if (handle_lines) {\n                    dnl.attr('x2', dnlx2 - line_swing);\n                }\n            } else {\n                dn.style('text-anchor', 'start');\n                dn.attr('x', dnx + text_swing);\n                if (handle_lines) {\n                    dnl.attr('x2', dnlx2 + line_swing);\n                }\n            }\n        };\n        // Flip any going over the right edge from the right side to the left side\n        // (all labels start on the right side)\n        data_layer.label_texts.each(function (d, i) {\n            const a = this;\n            const da = d3.select(a);\n            const dax = +da.attr('x');\n            const abound = da.node().getBoundingClientRect();\n            if (dax + abound.width + spacing > max_x) {\n                const dal = handle_lines ? d3.select(data_layer.label_lines.nodes()[i]) : null;\n                flip(da, dal);\n            }\n        });\n        // Second pass to flip any others that haven't flipped yet if they collide with another label\n        data_layer.label_texts.each(function (d, i) {\n            const a = this;\n            const da = d3.select(a);\n            if (da.style('text-anchor') === 'end') {\n                return;\n            }\n            let dax = +da.attr('x');\n            const abound = da.node().getBoundingClientRect();\n            const dal = handle_lines ? d3.select(data_layer.label_lines.nodes()[i]) : null;\n            data_layer.label_texts.each(function () {\n                const b = this;\n                const db = d3.select(b);\n                const bbound = db.node().getBoundingClientRect();\n                const collision = abound.left < bbound.left + bbound.width + (2 * spacing) &&\n                    abound.left + abound.width + (2 * spacing) > bbound.left &&\n                    abound.top < bbound.top + bbound.height + (2 * spacing) &&\n                    abound.height + abound.top + (2 * spacing) > bbound.top;\n                if (collision) {\n                    flip(da, dal);\n                    // Double check that this flip didn't push the label past min_x. If it did, immediately flip back.\n                    dax = +da.attr('x');\n                    if (dax - abound.width - spacing < min_x) {\n                        flip(da, dal);\n                    }\n                }\n            });\n        });\n    }\n\n    // Recursive function to space labels apart immediately after initial render\n    // Adapted from thudfactor's fiddle here: https://jsfiddle.net/thudfactor/HdwTH/\n    // TODO: Make labels also aware of data elements\n    separate_labels() {\n        this.seperate_iterations++;\n        const data_layer = this;\n        const alpha = 0.5;\n        if (!this.layout.label) {\n            // Guard against layout changing in the midst of iterative rerender\n            return;\n        }\n        const spacing = this.layout.label.spacing;\n        let again = false;\n        data_layer.label_texts.each(function () {\n            // TODO: O(n2) algorithm; revisit performance?\n            const a = this;\n            const da = d3.select(a);\n            const y1 = da.attr('y');\n            data_layer.label_texts.each(function () {\n                const b = this;\n                // a & b are the same element and don't collide.\n                if (a === b) {\n                    return;\n                }\n                const db = d3.select(b);\n                // a & b are on opposite sides of the chart and\n                // don't collide\n                if (da.attr('text-anchor') !== db.attr('text-anchor')) {\n                    return;\n                }\n                // Determine if the  bounding rects for the two text elements collide\n                const abound = da.node().getBoundingClientRect();\n                const bbound = db.node().getBoundingClientRect();\n                const collision = abound.left < bbound.left + bbound.width + (2 * spacing) &&\n                    abound.left + abound.width + (2 * spacing) > bbound.left &&\n                    abound.top < bbound.top + bbound.height + (2 * spacing) &&\n                    abound.height + abound.top + (2 * spacing) > bbound.top;\n                if (!collision) {\n                    return;\n                }\n                again = true;\n                // If the labels collide, we'll push each\n                // of the two labels up and down a little bit.\n                const y2 = db.attr('y');\n                const sign = abound.top < bbound.top ? 1 : -1;\n                const adjust = sign * alpha;\n                let new_a_y = +y1 - adjust;\n                let new_b_y = +y2 + adjust;\n                // Keep new values from extending outside the data layer\n                const min_y = 2 * spacing;\n                const max_y = data_layer.parent.layout.height - data_layer.parent.layout.margin.top - data_layer.parent.layout.margin.bottom - (2 * spacing);\n                let delta;\n                if (new_a_y - (abound.height / 2) < min_y) {\n                    delta = +y1 - new_a_y;\n                    new_a_y = +y1;\n                    new_b_y += delta;\n                } else if (new_b_y - (bbound.height / 2) < min_y) {\n                    delta = +y2 - new_b_y;\n                    new_b_y = +y2;\n                    new_a_y += delta;\n                }\n                if (new_a_y + (abound.height / 2) > max_y) {\n                    delta = new_a_y - +y1;\n                    new_a_y = +y1;\n                    new_b_y -= delta;\n                } else if (new_b_y + (bbound.height / 2) > max_y) {\n                    delta = new_b_y - +y2;\n                    new_b_y = +y2;\n                    new_a_y -= delta;\n                }\n                da.attr('y', new_a_y);\n                db.attr('y', new_b_y);\n            });\n        });\n        if (again) {\n            // Adjust lines to follow the labels\n            if (data_layer.layout.label.lines) {\n                const label_elements = data_layer.label_texts.nodes();\n                data_layer.label_lines.attr('y2', (d, i) => {\n                    const label_line = d3.select(label_elements[i]);\n                    return label_line.attr('y');\n                });\n            }\n            // After ~150 iterations we're probably beyond diminising returns, so stop recursing\n            if (this.seperate_iterations < 150) {\n                setTimeout(() => {\n                    this.separate_labels();\n                }, 1);\n            }\n        }\n    }\n\n    // Implement the main render function\n    render() {\n        const data_layer = this;\n        const x_scale = 'x_scale';\n        const y_scale = `y${this.layout.y_axis.axis}_scale`;\n\n        if (this.layout.label) {\n            // Apply filters to generate a filtered data set\n            let filtered_data;\n            const filters = data_layer.layout.label.filters || [];\n            if (!filters.length) {\n                filtered_data = this.data;\n            } else {\n                filtered_data = this.data.filter((d) => {\n                    // Start by assuming a match (base case = no filters).\n                    // Test each filters: ALL must be satisfied for match to occur.\n                    let match = true;\n                    filters.forEach((filter) => {\n                        const extra = this.layer_state.extra_fields[this.getElementId(d)];\n                        const field_value = (new Field(filter.field)).resolve(d, extra);\n\n                        if (!['!=', '='].includes(filter.operator) && isNaN(field_value)) {\n                            // If the filter can only be used with numbers, then the value must be numeric.\n                            match = false;\n                        } else {\n                            switch (filter.operator) {\n                            case '<':\n                                if (!(field_value < filter.value)) {\n                                    match = false;\n                                }\n                                break;\n                            case '<=':\n                                if (!(field_value <= filter.value)) {\n                                    match = false;\n                                }\n                                break;\n                            case '>':\n                                if (!(field_value > filter.value)) {\n                                    match = false;\n                                }\n                                break;\n                            case '>=':\n                                if (!(field_value >= filter.value)) {\n                                    match = false;\n                                }\n                                break;\n                            case '=':\n                                if (!(field_value === filter.value)) {\n                                    match = false;\n                                }\n                                break;\n                            case '!=':\n                                // Deliberately allow weak comparisons to test for \"anything with a value present\" (null or undefined)\n                                // eslint-disable-next-line eqeqeq\n                                if (field_value == filter.value) {\n                                    match = false;\n                                }\n                                break;\n                            default:\n                                // If we got here the operator is not valid, so the filter should fail\n                                match = false;\n                                break;\n                            }\n                        }\n                    });\n                    return match;\n                });\n            }\n\n            // Render label groups\n            this.label_groups = this.svg.group\n                .selectAll(`g.lz-data_layer-${this.layout.type}-label`)\n                .data(filtered_data, (d) => `${d[this.layout.id_field]}_label`);\n\n            const groups_enter = this.label_groups.enter()\n                .append('g')\n                .attr('class', `lz-data_layer-${this.layout.type}-label`);\n\n            // Render label texts\n            if (this.label_texts) {\n                this.label_texts.remove();\n            }\n            this.label_texts = this.label_groups.merge(groups_enter)\n                .append('text')\n                .attr('class', `lz-data_layer-${this.layout.type}-label`)\n                .text((d) => parseFields(d, data_layer.layout.label.text || ''))\n                .attr('x', (d) => {\n                    let x = data_layer.parent[x_scale](d[data_layer.layout.x_axis.field])\n                        + Math.sqrt(data_layer.resolveScalableParameter(data_layer.layout.point_size, d))\n                        + data_layer.layout.label.spacing;\n                    if (isNaN(x)) {\n                        x = -1000;\n                    }\n                    return x;\n                })\n                .attr('y', (d) => {\n                    let y = data_layer.parent[y_scale](d[data_layer.layout.y_axis.field]);\n                    if (isNaN(y)) {\n                        y = -1000;\n                    }\n                    return y;\n                })\n                .attr('text-anchor', 'start')\n                .call(applyStyles, data_layer.layout.label.style || {});\n\n            // Render label lines\n            if (data_layer.layout.label.lines) {\n                if (this.label_lines) {\n                    this.label_lines.remove();\n                }\n                this.label_lines = this.label_groups.merge(groups_enter)\n                    .append('line')\n                    .attr('class', `lz-data_layer-${this.layout.type}-label`)\n                    .attr('x1', (d) => {\n                        let x = data_layer.parent[x_scale](d[data_layer.layout.x_axis.field]);\n                        if (isNaN(x)) {\n                            x = -1000;\n                        }\n                        return x;\n                    })\n                    .attr('y1', (d) => {\n                        let y = data_layer.parent[y_scale](d[data_layer.layout.y_axis.field]);\n                        if (isNaN(y)) {\n                            y = -1000;\n                        }\n                        return y;\n                    })\n                    .attr('x2', (d) => {\n                        let x = data_layer.parent[x_scale](d[data_layer.layout.x_axis.field])\n                            + Math.sqrt(data_layer.resolveScalableParameter(data_layer.layout.point_size, d))\n                            + (data_layer.layout.label.spacing / 2);\n                        if (isNaN(x)) {\n                            x = -1000;\n                        }\n                        return x;\n                    })\n                    .attr('y2', (d) => {\n                        let y = data_layer.parent[y_scale](d[data_layer.layout.y_axis.field]);\n                        if (isNaN(y)) {\n                            y = -1000;\n                        }\n                        return y;\n                    })\n                    .call(applyStyles, data_layer.layout.label.lines.style || {});\n            }\n            // Remove labels when they're no longer in the filtered data set\n            this.label_groups.exit()\n                .remove();\n        } else {\n            // If the layout definition has changed (& no longer specifies labels), strip any previously rendered\n            if (this.label_groups) {\n                this.label_groups.remove();\n            }\n            if (this.label_lines) {\n                this.label_lines.remove();\n            }\n        }\n\n        // Generate main scatter data elements\n        const selection = this.svg.group\n            .selectAll(`path.lz-data_layer-${this.layout.type}`)\n            .data(this.data, (d) => d[this.layout.id_field]);\n\n        // Create elements, apply class, ID, and initial position\n        const initial_y = isNaN(this.parent.layout.height) ? 0 : this.parent.layout.height;\n\n        // Generate new values (or functions for them) for position, color, size, and shape\n        const transform = (d) => {\n            let x = this.parent[x_scale](d[this.layout.x_axis.field]);\n            let y = this.parent[y_scale](d[this.layout.y_axis.field]);\n            if (isNaN(x)) {\n                x = -1000;\n            }\n            if (isNaN(y)) {\n                y = -1000;\n            }\n            return `translate(${x}, ${y})`;\n        };\n\n        const shape = d3.symbol()\n            .size((d, i) => this.resolveScalableParameter(this.layout.point_size, d, i))\n            .type((d, i) => nameToSymbol(this.resolveScalableParameter(this.layout.point_shape, d, i)));\n\n        selection.enter()\n            .append('path')\n            .attr('class', `lz-data_layer-${this.layout.type}`)\n            .attr('id', (d) => this.getElementId(d))\n            .attr('transform', `translate(0, ${initial_y})`)\n            .merge(selection)\n            .attr('transform', transform)\n            .attr('fill', (d, i) => this.resolveScalableParameter(this.layout.color, d, i))\n            .attr('fill-opacity', (d, i) => this.resolveScalableParameter(this.layout.fill_opacity, d, i))\n            .attr('d', shape)\n            // Apply default event emitters & mouse behaviors to selection\n            .on('click.event_emitter', (element) => this.parent.emit('element_clicked', element, true))\n            .call(this.applyBehaviors.bind(this));\n\n        // Remove old elements as needed\n        selection.exit()\n            .remove();\n\n        // Apply method to keep labels from overlapping each other\n        if (this.layout.label) {\n            this.flip_labels();\n            this.seperate_iterations = 0;\n            this.separate_labels();\n            // Apply default event emitters to selection, and extend mouse behaviors to labels\n            this.label_texts\n                .on('click.event_emitter', (element) => this.parent.emit('element_clicked', element, true))\n                .call(this.applyBehaviors.bind(this));\n        }\n    }\n\n    // Method to set a passed element as the LD reference in the plot-level state\n    makeLDReference(element) {\n        let ref = null;\n        if (typeof element == 'undefined') {\n            throw new Error('makeLDReference requires one argument of any type');\n        } else if (typeof element == 'object') {\n            if (this.layout.id_field && typeof element[this.layout.id_field] != 'undefined') {\n                ref = element[this.layout.id_field].toString();\n            } else if (typeof element['id'] != 'undefined') {\n                ref = element['id'].toString();\n            } else {\n                ref = element.toString();\n            }\n        } else {\n            ref = element.toString();\n        }\n        this.parent_plot.applyState({ ldrefvar: ref });\n    }\n}\n\n/**\n * A scatter plot in which the x-axis represents categories, rather than individual positions.\n * For example, this can be used by PheWAS plots to show related groups. This plot allows the categories to be\n *   determined dynamically when data is first loaded.\n *\n */\nclass CategoryScatter extends Scatter {\n    constructor(layout) {\n        super(...arguments);\n        /**\n         * Define category names and extents (boundaries) for plotting.\n         * @member {Object.<String, Number[]>} Category names and extents, in the form {category_name: [min_x, max_x]}\n         */\n        this._categories = {};\n    }\n\n    /**\n     * This plot layer makes certain assumptions about the data passed in. Transform the raw array of records from\n     *   the datasource to prepare it for plotting, as follows:\n     * 1. The scatter plot assumes that all records are given in sequence (pre-grouped by `category_field`)\n     * 2. It assumes that all records have an x coordinate for individual plotting\n     * @private\n     */\n    _prepareData() {\n        const xField = this.layout.x_axis.field || 'x';\n        // The (namespaced) field from `this.data` that will be used to assign datapoints to a given category & color\n        const category_field = this.layout.x_axis.category_field;\n        if (!category_field) {\n            throw new Error(`Layout for ${this.layout.id} must specify category_field`);\n        }\n        // Sort the data so that things in the same category are adjacent (case-insensitive by specified field)\n        const sourceData = this.data\n            .sort((a, b) => {\n                const ak = a[category_field];\n                const bk = b[category_field];\n                const av = (typeof ak === 'string') ? ak.toLowerCase() : ak;\n                const bv = (typeof bk === 'string') ? bk.toLowerCase() : bk;\n                return (av === bv) ? 0 : (av < bv ? -1 : 1);\n            });\n        sourceData.forEach((d, i) => {\n            // Implementation detail: Scatter plot requires specifying an x-axis value, and most datasources do not\n            //   specify plotting positions. If a point is missing this field, fill in a synthetic value.\n            d[xField] = d[xField] || i;\n        });\n        return sourceData;\n    }\n\n    /**\n     * Identify the unique categories on the plot, and update the layout with an appropriate color scheme.\n     * Also identify the min and max x value associated with the category, which will be used to generate ticks\n     * @private\n     * @returns {Object.<String, Number[]>} Series of entries used to build category name ticks {category_name: [min_x, max_x]}\n     */\n    _generateCategoryBounds() {\n        // TODO: API may return null values in category_field; should we add placeholder category label?\n        // The (namespaced) field from `this.data` that will be used to assign datapoints to a given category & color\n        const category_field = this.layout.x_axis.category_field;\n        const xField = this.layout.x_axis.field || 'x';\n        const uniqueCategories = {};\n        this.data.forEach((item) => {\n            const category = item[category_field];\n            const x = item[xField];\n            const bounds = uniqueCategories[category] || [x, x];\n            uniqueCategories[category] = [Math.min(bounds[0], x), Math.max(bounds[1], x)];\n        });\n\n        const categoryNames = Object.keys(uniqueCategories);\n        this._setDynamicColorScheme(categoryNames);\n\n        return uniqueCategories;\n    }\n\n    /**\n     * This layer relies on defining its own category-based color scheme. Find the correct color config object to\n     *  be modified.\n     * @param [from_source]\n     * @returns {Object} A mutable reference to the layout configuration object\n     * @private\n     */\n    _getColorScale(from_source) {\n        from_source = from_source || this.layout;\n        // If the layout does not use a supported coloring scheme, or is already complete, this method should do nothing\n\n        // For legacy reasons, layouts can specify color as an object (only one way to set color), as opposed to the\n        //  preferred mechanism of array (multiple coloring options)\n        let color_params = from_source.color || []; // Object or scalar, no other options allowed\n        if (Array.isArray(color_params)) {\n            color_params = color_params.find((item) => item.scale_function === 'categorical_bin');\n        }\n        if (!color_params || color_params.scale_function !== 'categorical_bin') {\n            throw new Error('This layer requires that color options be provided as a `categorical_bin`');\n        }\n        return color_params;\n    }\n\n    /**\n     * Automatically define a color scheme for the layer based on data returned from the server.\n     *   If part of the color scheme has been specified, it will fill in remaining missing information.\n     *\n     * There are three scenarios:\n     * 1. The layout does not specify either category names or (color) values. Dynamically build both based on\n     *    the data and update the layout.\n     * 2. The layout specifies colors, but not categories. Use that exact color information provided, and dynamically\n     *     determine what categories are present in the data. (cycle through the available colors, reusing if there\n     *     are a lot of categories)\n     * 3. The layout specifies exactly what colors and categories to use (and they match the data!). This is useful to\n     *    specify an explicit mapping between color scheme and category names, when you want to be sure that the\n     *    plot matches a standard color scheme.\n     *    (If the layout specifies categories that do not match the data, the user specified categories will be ignored)\n     *\n     * This method will only act if the layout defines a `categorical_bin` scale function for coloring. It may be\n     *   overridden in a subclass to suit other types of coloring methods.\n     *\n     * @param {String[]} categoryNames\n     * @private\n     */\n    _setDynamicColorScheme(categoryNames) {\n        const colorParams = this._getColorScale(this.layout).parameters;\n        const baseParams = this._getColorScale(this._base_layout).parameters;\n\n        if (baseParams.categories.length && baseParams.values.length) {\n            // If there are preset category/color combos, make sure that they apply to the actual dataset\n            const parameters_categories_hash = {};\n            baseParams.categories.forEach((category) => {\n                parameters_categories_hash[category] = 1;\n            });\n            if (categoryNames.every((name) => Object.prototype.hasOwnProperty.call(parameters_categories_hash, name))) {\n                // The layout doesn't have to specify categories in order, but make sure they are all there\n                colorParams.categories = baseParams.categories;\n            } else {\n                colorParams.categories = categoryNames;\n            }\n        } else {\n            colorParams.categories = categoryNames;\n        }\n        // Prefer user-specified colors if provided. Make sure that there are enough colors for all the categories.\n        let colors;\n        if (baseParams.values.length) {\n            colors = baseParams.values;\n        } else {\n            // Originally from d3v3 category20\n            colors = ['#1f77b4', '#aec7e8', '#ff7f0e', '#ffbb78', '#2ca02c', '#98df8a', '#d62728', '#ff9896', '#9467bd', '#c5b0d5', '#8c564b', '#c49c94', '#e377c2', '#f7b6d2', '#7f7f7f', '#c7c7c7', '#bcbd22', '#dbdb8d', '#17becf', '#9edae5'];\n        }\n        while (colors.length < categoryNames.length) {\n            colors = colors.concat(colors);\n        }\n        colors = colors.slice(0, categoryNames.length);  // List of hex values, should be of same length as categories array\n        colorParams.values = colors;\n    }\n\n    /**\n     *\n     * @param dimension\n     * @param {Object} [config] Parameters that customize how ticks are calculated (not style)\n     * @param {('left'|'center'|'right')} [config.position='left'] Align ticks with the center or edge of category\n     * @returns {Array}\n     */\n    getTicks(dimension, config) { // Overrides parent method\n        if (!['x', 'y1', 'y2'].includes(dimension)) {\n            throw new Error('Invalid dimension identifier');\n        }\n        const position = config.position || 'left';\n        if (!['left', 'center', 'right'].includes(position)) {\n            throw new Error('Invalid tick position');\n        }\n\n        const categoryBounds = this._categories;\n        if (!categoryBounds || !Object.keys(categoryBounds).length) {\n            return [];\n        }\n\n        if (dimension === 'y') {\n            return [];\n        }\n\n        if (dimension === 'x') {\n            // If colors have been defined by this layer, use them to make tick colors match scatterplot point colors\n            const colors = this._getColorScale(this.layout);\n            const knownCategories = colors.parameters.categories || [];\n            const knownColors = colors.parameters.values || [];\n\n            return Object.keys(categoryBounds).map((category, index) => {\n                const bounds = categoryBounds[category];\n                let xPos;\n\n                switch (position) {\n                case 'left':\n                    xPos = bounds[0];\n                    break;\n                case 'center':\n                    // Center tick under one or many elements as appropriate\n                    // eslint-disable-next-line no-case-declarations\n                    const diff = bounds[1] - bounds[0];\n                    xPos = bounds[0] + (diff !== 0 ? diff : bounds[0]) / 2;\n                    break;\n                case 'right':\n                    xPos = bounds[1];\n                    break;\n                }\n                return {\n                    x: xPos,\n                    text: category,\n                    style: {\n                        'fill': knownColors[knownCategories.indexOf(category)] || '#000000',\n                    },\n                };\n            });\n        }\n    }\n\n    applyCustomDataMethods() {\n        this.data = this._prepareData();\n        this._categories = this._generateCategoryBounds();\n        return this;\n    }\n}\n\n\nexport { Scatter as scatter, CategoryScatter as category_scatter };\n","/**\n * @module\n * @private\n */\nimport {ClassRegistry} from './base';\nimport * as layers from '../components/data_layer';\n\nconst registry = new ClassRegistry();\nfor (let [name, type] of Object.entries(layers)) {\n    registry.add(name, type);\n}\n\n\nexport default registry;\n","/**\n * Predefined base layouts used to populate the LZ registry\n * @module\n * @private\n */\n\nimport { version } from '../../package.json';\nimport {deepCopy, merge} from '../helpers/layouts';\n\nconst LZ_SIG_THRESHOLD_LOGP = 7.301; // -log10(.05/1e6)\n\n/**\n * Tooltip Layouts\n */\nconst standard_association_tooltip = {\n    namespace: { 'assoc': 'assoc' },\n    closable: true,\n    show: { or: ['highlighted', 'selected'] },\n    hide: { and: ['unhighlighted', 'unselected'] },\n    html: `<strong>{{{{namespace[assoc]}}variant|htmlescape}}</strong><br>\n        P Value: <strong>{{{{namespace[assoc]}}log_pvalue|logtoscinotation|htmlescape}}</strong><br>\n        Ref. Allele: <strong>{{{{namespace[assoc]}}ref_allele|htmlescape}}</strong><br>\n        <a href=\"javascript:void(0);\" \n        onclick=\"var data = this.parentNode.__data__;\n                 data.getDataLayer().makeLDReference(data);\"\n                 >Make LD Reference</a><br>`,\n};\n\nconst standard_association_tooltip_with_label = function() {\n    // Add a special \"toggle label\" button to the base tooltip. This must be used in tandem with a custom layout\n    //   directive (label.filters should check a boolean annotation field called \"lz_show_label\").\n    const base = deepCopy(standard_association_tooltip);\n    base.html += `<a href=\"javascript:void(0);\" \n                  onclick=\"var item = this.parentNode.__data__, layer = item.getDataLayer(); \n                  var current = layer.getElementAnnotation(item, 'lz_show_label'); \n                  layer.setElementAnnotation(item, 'lz_show_label', !current );\n                  layer.parent_plot.applyState();\">Toggle label</a>`;\n    return base;\n}();\n\nconst standard_genes_tooltip = {\n    closable: true,\n    show: { or: ['highlighted', 'selected'] },\n    hide: { and: ['unhighlighted', 'unselected'] },\n    html: '<h4><strong><i>{{gene_name|htmlescape}}</i></strong></h4>'\n        + 'Gene ID: <a href=\"https://useast.ensembl.org/homo_sapiens/Gene/Summary?g={{gene_id|htmlescape}}&db=core\" target=\"_blank\" rel=\"noopener\">{{gene_id|htmlescape}}</a><br>'\n        + 'Transcript ID: <strong>{{transcript_id|htmlescape}}</strong><br>'\n        + '{{#if pLI}}<table>'\n        + '<tr><th>Constraint</th><th>Expected variants</th><th>Observed variants</th><th>Const. Metric</th></tr>'\n        + '<tr><td>Synonymous</td><td>{{exp_syn}}</td><td>{{obs_syn}}</td><td>z = {{syn_z}}<br>o/e = {{oe_syn}} ({{oe_syn_lower}} - {{oe_syn_upper}})</td></tr>'\n        + '<tr><td>Missense</td><td>{{exp_mis}}</td><td>{{obs_mis}}</td><td>z = {{mis_z}}<br>o/e = {{oe_mis}} ({{oe_mis_lower}} - {{oe_mis_upper}})</td></tr>'\n        + '<tr><td>pLoF</td><td>{{exp_lof}}</td><td>{{obs_lof}}</td><td>pLI = {{pLI}}<br>o/e = {{oe_lof}} ({{oe_lof_lower}} - {{oe_lof_upper}})</td></tr>'\n        + '</table><br>{{/if}}'\n        + '<a href=\"https://gnomad.broadinstitute.org/gene/{{gene_id|htmlescape}}\" target=\"_blank\" rel=\"noopener\">More data on gnomAD</a>',\n};\n\nconst catalog_variant_tooltip = {\n    namespace: { 'assoc': 'assoc', 'catalog': 'catalog' },\n    closable: true,\n    show: { or: ['highlighted', 'selected'] },\n    hide: { and: ['unhighlighted', 'unselected'] },\n    html: '<strong>{{{{namespace[catalog]}}variant|htmlescape}}</strong><br>'\n        + 'Catalog entries: <strong>{{n_catalog_matches|htmlescape}}</strong><br>'\n        + 'Top Trait: <strong>{{{{namespace[catalog]}}trait|htmlescape}}</strong><br>'\n        + 'Top P Value: <strong>{{{{namespace[catalog]}}log_pvalue|logtoscinotation}}</strong><br>'\n        // User note: if a different catalog is used, the tooltip will need to be replaced with a different link URL\n        + 'More: <a href=\"https://www.ebi.ac.uk/gwas/search?query={{{{namespace[catalog]}}rsid|htmlescape}}\" target=\"_blank\" rel=\"noopener\">GWAS catalog</a> / <a href=\"https://www.ncbi.nlm.nih.gov/snp/{{{{namespace[catalog]}}rsid|htmlescape}}\" target=\"_blank\" rel=\"noopener\">dbSNP</a>',\n};\n\nconst coaccessibility_tooltip = {\n    namespace: { 'access': 'access' },\n    closable: true,\n    show: { or: ['highlighted', 'selected'] },\n    hide: { and: ['unhighlighted', 'unselected'] },\n    // TODO: Is there a more generic terminology? (eg not every technique is in terms of cis-regulatory element)\n    html: '<strong>Regulatory element</strong><br>' +\n        '{{{{namespace[access]}}start1|htmlescape}}-{{{{namespace[access]}}end1|htmlescape}}<br>' +\n        '<strong>Promoter</strong><br>' +\n        '{{{{namespace[access]}}start2|htmlescape}}-{{{{namespace[access]}}end2|htmlescape}}<br>' +\n        '{{#if {{namespace[access]}}target}}<strong>Target</strong>: {{{{namespace[access]}}target|htmlescape}}<br>{{/if}}' +\n        '<strong>Score</strong>: {{{{namespace[access]}}score|htmlescape}}',\n};\n\n/**\n * Data Layer Layouts: represent specific information from a data source\n */\n\nconst significance_layer = {\n    id: 'significance',\n    type: 'orthogonal_line',\n    orientation: 'horizontal',\n    offset: LZ_SIG_THRESHOLD_LOGP,\n};\n\nconst recomb_rate_layer = {\n    namespace: { 'recomb': 'recomb' },\n    id: 'recombrate',\n    type: 'line',\n    fields: ['{{namespace[recomb]}}position', '{{namespace[recomb]}}recomb_rate'],\n    z_index: 1,\n    style: {\n        'stroke': '#0000FF',\n        'stroke-width': '1.5px',\n    },\n    x_axis: {\n        field: '{{namespace[recomb]}}position',\n    },\n    y_axis: {\n        axis: 2,\n        field: '{{namespace[recomb]}}recomb_rate',\n        floor: 0,\n        ceiling: 100,\n    },\n};\n\nconst association_pvalues_layer = {\n    namespace: { 'assoc': 'assoc', 'ld': 'ld' },\n    id: 'associationpvalues',\n    type: 'scatter',\n    point_shape: {\n        scale_function: 'if',\n        field: '{{namespace[ld]}}isrefvar',\n        parameters: {\n            field_value: 1,\n            then: 'diamond',\n            else: 'circle',\n        },\n    },\n    point_size: {\n        scale_function: 'if',\n        field: '{{namespace[ld]}}isrefvar',\n        parameters: {\n            field_value: 1,\n            then: 80,\n            else: 40,\n        },\n    },\n    color: [\n        {\n            scale_function: 'if',\n            field: '{{namespace[ld]}}isrefvar',\n            parameters: {\n                field_value: 1,\n                then: '#9632b8',\n            },\n        },\n        {\n            scale_function: 'numerical_bin',\n            field: '{{namespace[ld]}}state',\n            parameters: {\n                breaks: [0, 0.2, 0.4, 0.6, 0.8],\n                values: ['#357ebd', '#46b8da', '#5cb85c', '#eea236', '#d43f3a'],\n            },\n        },\n        '#B8B8B8',\n    ],\n    legend: [\n        { shape: 'diamond', color: '#9632b8', size: 40, label: 'LD Ref Var', class: 'lz-data_layer-scatter' },\n        { shape: 'circle', color: '#d43f3a', size: 40, label: '1.0 > r² ≥ 0.8', class: 'lz-data_layer-scatter' },\n        { shape: 'circle', color: '#eea236', size: 40, label: '0.8 > r² ≥ 0.6', class: 'lz-data_layer-scatter' },\n        { shape: 'circle', color: '#5cb85c', size: 40, label: '0.6 > r² ≥ 0.4', class: 'lz-data_layer-scatter' },\n        { shape: 'circle', color: '#46b8da', size: 40, label: '0.4 > r² ≥ 0.2', class: 'lz-data_layer-scatter' },\n        { shape: 'circle', color: '#357ebd', size: 40, label: '0.2 > r² ≥ 0.0', class: 'lz-data_layer-scatter' },\n        { shape: 'circle', color: '#B8B8B8', size: 40, label: 'no r² data', class: 'lz-data_layer-scatter' },\n    ],\n    label: null,\n    fields: ['{{namespace[assoc]}}variant', '{{namespace[assoc]}}position', '{{namespace[assoc]}}log_pvalue', '{{namespace[assoc]}}log_pvalue|logtoscinotation', '{{namespace[assoc]}}ref_allele', '{{namespace[ld]}}state', '{{namespace[ld]}}isrefvar'],\n    id_field: '{{namespace[assoc]}}variant',\n    z_index: 2,\n    x_axis: {\n        field: '{{namespace[assoc]}}position',\n    },\n    y_axis: {\n        axis: 1,\n        field: '{{namespace[assoc]}}log_pvalue',\n        floor: 0,\n        upper_buffer: 0.10,\n        min_extent: [0, 10],\n    },\n    behaviors: {\n        onmouseover: [\n            { action: 'set', status: 'highlighted' },\n        ],\n        onmouseout: [\n            { action: 'unset', status: 'highlighted' },\n        ],\n        onclick: [\n            { action: 'toggle', status: 'selected', exclusive: true },\n        ],\n        onshiftclick: [\n            { action: 'toggle', status: 'selected' },\n        ],\n    },\n    tooltip: deepCopy(standard_association_tooltip),\n};\n\nconst coaccessibility_layer = {\n    namespace: { 'access': 'access' },\n    id: 'coaccessibility',\n    type: 'arcs',\n    fields: ['{{namespace[access]}}start1', '{{namespace[access]}}end1', '{{namespace[access]}}start2', '{{namespace[access]}}end2', '{{namespace[access]}}id', '{{namespace[access]}}target', '{{namespace[access]}}score'],\n    match: { send: '{{namespace[access]}}target', receive: '{{namespace[access]}}target' },\n    id_field: '{{namespace[access]}}id',\n    filters: [\n        ['{{namespace[access]}}score', '!=', null],\n        // ['{{namespace[access]}}score', '>', 0.5], // Potentially useful but very situational\n    ],\n    color: [\n        {\n            field: 'lz_highlight_match', // Special field name whose presence triggers custom rendering\n            scale_function: 'if',\n            parameters: {\n                field_value: true,\n                then: '#ff0000',\n            },\n        },\n        {\n            field: 'lz_highlight_match', // Special field name whose presence triggers custom rendering\n            scale_function: 'if',\n            parameters: {\n                field_value: false,\n                then: '#EAE6E6',\n            },\n        },\n        {\n            scale_function: 'ordinal_cycle',\n            parameters: {\n                values: ['#1f77b4', '#aec7e8', '#ff7f0e', '#ffbb78', '#2ca02c', '#98df8a', '#d62728', '#ff9896', '#9467bd', '#c5b0d5', '#8c564b', '#c49c94', '#e377c2', '#f7b6d2', '#7f7f7f', '#c7c7c7', '#bcbd22', '#dbdb8d', '#17becf', '#9edae5'], // Drawn from d3v3 \"category20\"\n            },\n        },\n    ],\n    x_axis: {\n        field1: '{{namespace[access]}}start1',\n        field2: '{{namespace[access]}}start2',\n    },\n    y_axis: {\n        axis: 1,\n        field: '{{namespace[access]}}score',\n        upper_buffer: 0.1,\n        min_extent: [0, 1],\n    },\n    behaviors: {\n        onmouseover: [\n            { action: 'set', status: 'highlighted' },\n        ],\n        onmouseout: [\n            { action: 'unset', status: 'highlighted' },\n        ],\n        onclick: [\n            { action: 'toggle', status: 'selected', exclusive: true },\n        ],\n        onshiftclick: [\n            { action: 'toggle', status: 'selected' },\n        ],\n    },\n    tooltip: deepCopy(coaccessibility_tooltip),\n};\n\nconst association_pvalues_catalog_layer = function () {\n    // Slightly modify an existing layout\n    let base = deepCopy(association_pvalues_layer);\n    base = merge({ id: 'associationpvaluescatalog', fill_opacity: 0.7}, base);\n    base.tooltip.html += '{{#if {{namespace[catalog]}}rsid}}<br><a href=\"https://www.ebi.ac.uk/gwas/search?query={{{{namespace[catalog]}}rsid|htmlescape}}\" target=\"_blank\" rel=\"noopener\">See hits in GWAS catalog</a>{{/if}}';\n    base.namespace.catalog = 'catalog';\n    base.fields.push('{{namespace[catalog]}}rsid', '{{namespace[catalog]}}trait', '{{namespace[catalog]}}log_pvalue');\n    return base;\n}();\n\nconst phewas_pvalues_layer = {\n    namespace: { 'phewas': 'phewas' },\n    id: 'phewaspvalues',\n    type: 'category_scatter',\n    point_shape: 'circle',\n    point_size: 70,\n    tooltip_positioning: 'vertical',\n    id_field: '{{namespace[phewas]}}id',\n    fields: ['{{namespace[phewas]}}id', '{{namespace[phewas]}}log_pvalue', '{{namespace[phewas]}}trait_group', '{{namespace[phewas]}}trait_label'],\n    x_axis: {\n        field: '{{namespace[phewas]}}x',  // Synthetic/derived field added by `category_scatter` layer\n        category_field: '{{namespace[phewas]}}trait_group',\n        lower_buffer: 0.025,\n        upper_buffer: 0.025,\n    },\n    y_axis: {\n        axis: 1,\n        field: '{{namespace[phewas]}}log_pvalue',\n        floor: 0,\n        upper_buffer: 0.15,\n    },\n    color: [{\n        field: '{{namespace[phewas]}}trait_group',\n        scale_function: 'categorical_bin',\n        parameters: {\n            categories: [],\n            values: [],\n            null_value: '#B8B8B8',\n        },\n    }],\n    fill_opacity: 0.7,\n    tooltip: {\n        closable: true,\n        show: { or: ['highlighted', 'selected'] },\n        hide: { and: ['unhighlighted', 'unselected'] },\n        html: [\n            '<strong>Trait:</strong> {{{{namespace[phewas]}}trait_label|htmlescape}}<br>',\n            '<strong>Trait Category:</strong> {{{{namespace[phewas]}}trait_group|htmlescape}}<br>',\n            '<strong>P-value:</strong> {{{{namespace[phewas]}}log_pvalue|logtoscinotation|htmlescape}}<br>',\n        ].join(''),\n    },\n    behaviors: {\n        onmouseover: [\n            { action: 'set', status: 'highlighted' },\n        ],\n        onmouseout: [\n            { action: 'unset', status: 'highlighted' },\n        ],\n        onclick: [\n            { action: 'toggle', status: 'selected', exclusive: true },\n        ],\n        onshiftclick: [\n            { action: 'toggle', status: 'selected' },\n        ],\n    },\n    label: {\n        text: '{{{{namespace[phewas]}}trait_label|htmlescape}}',\n        spacing: 6,\n        lines: {\n            style: {\n                'stroke-width': '2px',\n                'stroke': '#333333',\n                'stroke-dasharray': '2px 2px',\n            },\n        },\n        filters: [\n            {\n                field: '{{namespace[phewas]}}log_pvalue',\n                operator: '>=',\n                value: 20,\n            },\n        ],\n        style: {\n            'font-size': '14px',\n            'font-weight': 'bold',\n            'fill': '#333333',\n        },\n    },\n};\n\nconst genes_layer = {\n    namespace: { 'gene': 'gene', 'constraint': 'constraint' },\n    id: 'genes',\n    type: 'genes',\n    fields: ['{{namespace[gene]}}all', '{{namespace[constraint]}}all'],\n    id_field: 'gene_id',\n    behaviors: {\n        onmouseover: [\n            { action: 'set', status: 'highlighted' },\n        ],\n        onmouseout: [\n            { action: 'unset', status: 'highlighted' },\n        ],\n        onclick: [\n            { action: 'toggle', status: 'selected', exclusive: true },\n        ],\n        onshiftclick: [\n            { action: 'toggle', status: 'selected' },\n        ],\n    },\n    tooltip: deepCopy(standard_genes_tooltip),\n};\n\nconst annotation_catalog_layer = {\n    // Identify GWAS hits that are present in the GWAS catalog\n    namespace: { 'assoc': 'assoc', 'catalog': 'catalog' },\n    id: 'annotation_catalog',\n    type: 'annotation_track',\n    id_field: '{{namespace[catalog]}}variant',\n    x_axis: {\n        field: '{{namespace[assoc]}}position',\n    },\n    color: '#0000CC',\n    fields: [\n        '{{namespace[assoc]}}variant', '{{namespace[assoc]}}chromosome', '{{namespace[assoc]}}position',\n        '{{namespace[catalog]}}variant', '{{namespace[catalog]}}rsid', '{{namespace[catalog]}}trait',\n        '{{namespace[catalog]}}log_pvalue', '{{namespace[catalog]}}pos',\n    ],\n    filters: [\n        // Specify which points to show on the track. Any selection must satisfy ALL filters\n        ['{{namespace[catalog]}}rsid', '!=', null],\n        ['{{namespace[catalog]}}log_pvalue', '>', LZ_SIG_THRESHOLD_LOGP],\n    ],\n    behaviors: {\n        onmouseover: [\n            { action: 'set', status: 'highlighted' },\n        ],\n        onmouseout: [\n            { action: 'unset', status: 'highlighted' },\n        ],\n        onclick: [\n            { action: 'toggle', status: 'selected', exclusive: true },\n        ],\n        onshiftclick: [\n            { action: 'toggle', status: 'selected' },\n        ],\n    },\n    tooltip: deepCopy(catalog_variant_tooltip),\n    tooltip_positioning: 'top',\n};\n\n/**\n * Individual toolbar buttons\n */\nconst ldlz2_pop_selector_menu = {\n    // **Note**: this widget is aimed at the LDServer datasource, and the UM 1000G LDServer\n    type: 'set_state',\n    position: 'right',\n    color: 'blue',\n    button_html: 'LD Population: ',\n    show_selected: true,\n    button_title: 'Select LD Population: ',\n    state_field: 'ld_pop',\n    // This list below is hardcoded to work with the UMich LDServer, default 1000G populations\n    //  It can be customized to work with other LD servers that specify population differently\n    // https://portaldev.sph.umich.edu/ld/genome_builds/GRCh37/references/1000G/populations\n    options: [\n        { display_name: 'ALL (default)', value: 'ALL' },\n        { display_name: 'AFR', value: 'AFR' },\n        { display_name: 'AMR', value: 'AMR' },\n        { display_name: 'EAS', value: 'EAS' },\n        { display_name: 'EUR', value: 'EUR' },\n        { display_name: 'SAS', value: 'SAS' },\n    ],\n};\n\n/**\n * Toolbar Layouts: Collections of toolbar buttons etc\n */\nconst standard_panel_toolbar = {\n    widgets: [\n        {\n            type: 'remove_panel',\n            position: 'right',\n            color: 'red',\n            group_position: 'end',\n        },\n        {\n            type: 'move_panel_up',\n            position: 'right',\n            group_position: 'middle',\n        },\n        {\n            type: 'move_panel_down',\n            position: 'right',\n            group_position: 'start',\n            style: { 'margin-left': '0.75em' },\n        },\n    ],\n};\n\nconst standard_plot_toolbar = {\n    // Suitable for most any type of plot drawn with LZ\n    widgets: [\n        {\n            type: 'title',\n            title: 'LocusZoom',\n            subtitle: `<a href=\"https://statgen.github.io/locuszoom/\" target=\"_blank\" rel=\"noopener\">v${version}</a>`,\n            position: 'left',\n        },\n        {\n            type: 'download',\n            position: 'right',\n        },\n        {\n            type: 'download_png',\n            position: 'right',\n        },\n    ],\n};\n\nconst region_nav_plot_toolbar = function () {\n    // Useful for most region-based plots\n    const region_nav_plot_toolbar = deepCopy(standard_plot_toolbar);\n    region_nav_plot_toolbar.widgets.push(\n        deepCopy(ldlz2_pop_selector_menu),\n        {\n            type: 'shift_region',\n            step: 500000,\n            button_html: '>>',\n            position: 'right',\n            group_position: 'end',\n        }, {\n            type: 'shift_region',\n            step: 50000,\n            button_html: '>',\n            position: 'right',\n            group_position: 'middle',\n        },\n        {\n            type: 'zoom_region',\n            step: 0.2,\n            position: 'right',\n            group_position: 'middle',\n        },\n        {\n            type: 'zoom_region',\n            step: -0.2,\n            position: 'right',\n            group_position: 'middle',\n        },\n        {\n            type: 'shift_region',\n            step: -50000,\n            button_html: '<',\n            position: 'right',\n            group_position: 'middle',\n        },\n        {\n            type: 'shift_region',\n            step: -500000,\n            button_html: '<<',\n            position: 'right',\n            group_position: 'start',\n        }\n    );\n    return region_nav_plot_toolbar;\n}();\n\n/**\n * Panel Layouts\n */\n\nconst association_panel = {\n    id: 'association',\n    width: 800,\n    height: 225,\n    min_width: 400,\n    min_height: 200,\n    proportional_width: 1,\n    margin: { top: 35, right: 50, bottom: 40, left: 50 },\n    inner_border: 'rgb(210, 210, 210)',\n    toolbar: (function () {\n        const base = deepCopy(standard_panel_toolbar);\n        base.widgets.push({\n            type: 'toggle_legend',\n            position: 'right',\n        });\n        return base;\n    })(),\n    axes: {\n        x: {\n            label: 'Chromosome {{chr}} (Mb)',\n            label_offset: 32,\n            tick_format: 'region',\n            extent: 'state',\n        },\n        y1: {\n            label: '-log10 p-value',\n            label_offset: 28,\n        },\n        y2: {\n            label: 'Recombination Rate (cM/Mb)',\n            label_offset: 40,\n        },\n    },\n    legend: {\n        orientation: 'vertical',\n        origin: { x: 55, y: 40 },\n        hidden: true,\n    },\n    interaction: {\n        drag_background_to_pan: true,\n        drag_x_ticks_to_scale: true,\n        drag_y1_ticks_to_scale: true,\n        drag_y2_ticks_to_scale: true,\n        scroll_to_zoom: true,\n        x_linked: true,\n    },\n    data_layers: [\n        deepCopy(significance_layer),\n        deepCopy(recomb_rate_layer),\n        deepCopy(association_pvalues_layer),\n    ],\n};\n\nconst coaccessibility_panel = {\n    id: 'coaccessibility',\n    width: 800,\n    height: 225,\n    min_width: 400,\n    min_height: 100,\n    proportional_width: 1,\n    margin: { top: 35, right: 50, bottom: 40, left: 50 },\n    inner_border: 'rgb(210, 210, 210)',\n    toolbar: deepCopy(standard_panel_toolbar),\n    axes: {\n        x: {\n            label: 'Chromosome {{chr}} (Mb)',\n            label_offset: 32,\n            tick_format: 'region',\n            extent: 'state',\n        },\n        y1: {\n            label: 'Score',\n            label_offset: 28,\n            render: false,  // We are mainly concerned with the relative magnitudes: hide y axis to avoid clutter.\n        },\n    },\n    interaction: {\n        drag_background_to_pan: true,\n        drag_x_ticks_to_scale: true,\n        drag_y1_ticks_to_scale: true,\n        scroll_to_zoom: true,\n        x_linked: true,\n    },\n    data_layers: [\n        deepCopy(coaccessibility_layer),\n    ],\n};\n\nconst association_catalog_panel = function () {\n    let base = deepCopy(association_panel);\n    base = merge({\n        id: 'associationcatalog',\n        namespace: { 'assoc': 'assoc', 'ld': 'ld', 'catalog': 'catalog' }, // Required to resolve display options\n    }, base);\n\n    base.toolbar.widgets.push({\n        type: 'display_options',\n        position: 'right',\n        color: 'blue',\n        // Below: special config specific to this widget\n        button_html: 'Display options...',\n        button_title: 'Control how plot items are displayed',\n\n        layer_name: 'associationpvaluescatalog',\n        default_config_display_name: 'No catalog labels (default)', // display name for the default plot color option (allow user to revert to plot defaults)\n\n        options: [\n            {\n                // First dropdown menu item\n                display_name: 'Label catalog traits',  // Human readable representation of field name\n                display: {  // Specify layout directives that control display of the plot for this option\n                    label: {\n                        text: '{{{{namespace[catalog]}}trait|htmlescape}}',\n                        spacing: 6,\n                        lines: {\n                            style: {\n                                'stroke-width': '2px',\n                                'stroke': '#333333',\n                                'stroke-dasharray': '2px 2px',\n                            },\n                        },\n                        filters: [\n                            // Only label points if they are significant for some trait in the catalog, AND in high LD\n                            //  with the top hit of interest\n                            {\n                                field: '{{namespace[catalog]}}trait',\n                                operator: '!=',\n                                value: null,\n                            },\n                            {\n                                field: '{{namespace[catalog]}}log_pvalue',\n                                operator: '>',\n                                value: LZ_SIG_THRESHOLD_LOGP,\n                            },\n                            {\n                                field: '{{namespace[ld]}}state',\n                                operator: '>',\n                                value: 0.4,\n                            },\n                        ],\n                        style: {\n                            'font-size': '10px',\n                            'font-weight': 'bold',\n                            'fill': '#333333',\n                        },\n                    },\n                },\n            },\n        ],\n    });\n    base.data_layers = [\n        deepCopy(significance_layer),\n        deepCopy(recomb_rate_layer),\n        deepCopy(association_pvalues_catalog_layer),\n    ];\n    return base;\n}();\n\nconst genes_panel = {\n    id: 'genes',\n    width: 800,\n    height: 225,\n    min_width: 400,\n    min_height: 112.5,\n    proportional_width: 1,\n    margin: { top: 20, right: 50, bottom: 20, left: 50 },\n    axes: {},\n    interaction: {\n        drag_background_to_pan: true,\n        scroll_to_zoom: true,\n        x_linked: true,\n    },\n    toolbar: (function () {\n        const base = deepCopy(standard_panel_toolbar);\n        base.widgets.push({\n            type: 'resize_to_data',\n            position: 'right',\n            button_html: 'Show all genes',\n        });\n        return base;\n    })(),\n    data_layers: [\n        deepCopy(genes_layer),\n    ],\n};\n\nconst phewas_panel = {\n    id: 'phewas',\n    width: 800,\n    height: 300,\n    min_width: 800,\n    min_height: 300,\n    proportional_width: 1,\n    margin: { top: 20, right: 50, bottom: 120, left: 50 },\n    inner_border: 'rgb(210, 210, 210)',\n    axes: {\n        x: {\n            ticks: {  // Object based config (shared defaults; allow layers to specify ticks)\n                style: {\n                    'font-weight': 'bold',\n                    'font-size': '11px',\n                    'text-anchor': 'start',\n                },\n                transform: 'rotate(50)',\n                position: 'left',  // Special param recognized by `category_scatter` layers\n            },\n        },\n        y1: {\n            label: '-log10 p-value',\n            label_offset: 28,\n        },\n    },\n    data_layers: [\n        deepCopy(significance_layer),\n        deepCopy(phewas_pvalues_layer),\n    ],\n};\n\nconst annotation_catalog_panel = {\n    id: 'annotationcatalog',\n    width: 800,\n    height: 45,\n    min_height: 45,\n    proportional_width: 1,\n    margin: { top: 25, right: 50, bottom: 0, left: 50 },\n    inner_border: 'rgb(210, 210, 210)',\n    toolbar: deepCopy(standard_panel_toolbar),\n    interaction: {\n        drag_background_to_pan: true,\n        scroll_to_zoom: true,\n        x_linked: true,\n    },\n    data_layers: [\n        deepCopy(annotation_catalog_layer),\n    ],\n};\n\n/**\n * Plot Layouts\n */\n\nconst standard_association_plot = {\n    state: {},\n    width: 800,\n    height: 450,\n    responsive_resize: true,\n    min_region_scale: 20000,\n    max_region_scale: 1000000,\n    toolbar: deepCopy(region_nav_plot_toolbar),\n    panels: [\n        merge({ proportional_height: 0.5}, deepCopy(association_panel)),\n        merge({ proportional_height: 0.5}, deepCopy(genes_panel)),\n    ],\n};\n\nconst association_catalog_plot = {\n    state: {},\n    width: 800,\n    height: 500,\n    responsive_resize: true,\n    min_region_scale: 20000,\n    max_region_scale: 1000000,\n    toolbar: deepCopy(region_nav_plot_toolbar),\n    panels: [\n        deepCopy(annotation_catalog_panel),\n        deepCopy(association_catalog_panel),\n        deepCopy(genes_panel),\n    ],\n};\n\nconst standard_phewas_plot = {\n    width: 800,\n    height: 600,\n    min_width: 800,\n    min_height: 600,\n    responsive_resize: true,\n    toolbar: deepCopy(standard_plot_toolbar),\n    panels: [\n        merge({proportional_height: 0.5}, deepCopy(phewas_panel)),\n        merge({\n            proportional_height: 0.5,\n            margin: { bottom: 40 },\n            axes: {\n                x: {\n                    label: 'Chromosome {{chr}} (Mb)',\n                    label_offset: 32,\n                    tick_format: 'region',\n                    extent: 'state',\n                },\n            },\n        }, deepCopy(genes_panel)),\n    ],\n    mouse_guide: false,\n};\n\nconst coaccessibility_plot = {\n    state: {},\n    width: 800,\n    height: 450,\n    responsive_resize: true,\n    min_region_scale: 20000,\n    max_region_scale: 1000000,\n    toolbar: deepCopy(standard_plot_toolbar),\n    panels: [\n        Object.assign(\n            { proportional_height: 0.4 },\n            deepCopy(coaccessibility_panel)\n        ),\n        function () {\n            // Take the default genes panel, and add a custom feature to highlight gene tracks based on short name\n            // This is a companion to the \"match\" directive in the coaccessibility panel\n            const base = Object.assign(\n                { proportional_height: 0.6 },\n                deepCopy(genes_panel)\n            );\n            const layer = base.data_layers[0];\n            layer.match = { send: 'gene_name', receive: 'gene_name' };\n            const color_config = [\n                {\n                    field: 'lz_highlight_match', // Special field name whose presence triggers custom rendering\n                    scale_function: 'if',\n                    parameters: {\n                        field_value: true,\n                        then: '#ff0000',\n                    },\n                },\n                {\n                    field: 'lz_highlight_match', // Special field name whose presence triggers custom rendering\n                    scale_function: 'if',\n                    parameters: {\n                        field_value: false,\n                        then: '#EAE6E6',\n                    },\n                },\n                '#363696',\n            ];\n            layer.color = color_config;\n            layer.stroke = color_config;\n            return base;\n        }(),\n    ],\n};\n\n\nexport const tooltip = {\n    standard_association: standard_association_tooltip,\n    standard_association_with_label: standard_association_tooltip_with_label,\n    standard_genes: standard_genes_tooltip,\n    catalog_variant: catalog_variant_tooltip,\n    coaccessibility: coaccessibility_tooltip,\n};\n\nexport const toolbar_widgets = {\n    ldlz2_pop_selector: ldlz2_pop_selector_menu,\n};\n\nexport const toolbar = {\n    standard_panel: standard_panel_toolbar,\n    standard_plot: standard_plot_toolbar,\n    region_nav_plot: region_nav_plot_toolbar,\n};\n\nexport const data_layer = {\n    significance: significance_layer,\n    recomb_rate: recomb_rate_layer,\n    association_pvalues: association_pvalues_layer,\n    coaccessibility: coaccessibility_layer,\n    association_pvalues_catalog: association_pvalues_catalog_layer,\n    phewas_pvalues: phewas_pvalues_layer,\n    genes: genes_layer,\n    annotation_catalog: annotation_catalog_layer,\n};\n\nexport const panel = {\n    association: association_panel,\n    coaccessibility: coaccessibility_panel,\n    association_catalog: association_catalog_panel,\n    genes: genes_panel,\n    phewas: phewas_panel,\n    annotation_catalog: annotation_catalog_panel,\n};\n\nexport const plot = {\n    standard_association: standard_association_plot,\n    association_catalog: association_catalog_plot,\n    standard_phewas: standard_phewas_plot,\n    coaccessibility: coaccessibility_plot,\n};\n","/**\n * @module\n * @private\n */\nimport {RegistryBase} from './base';\nimport {applyNamespaces, deepCopy, merge} from '../helpers/layouts';\nimport * as layouts from '../layouts';\n\n/**\n * Helper for working with predefined layouts\n *\n * This is part of the public interface with LocusZoom and a major way that users interact to configure plots.\n *\n * Each layout object that is added or retrieved here is a deep copy and totally independent from any other object\n * @public\n */\nclass LayoutRegistry extends RegistryBase {\n    // Implemented as a \"registry of registries\"- one lookup each for panels, plots, etc...\n    get(type, name, overrides = {}) {\n        if (!(type && name)) {\n            throw new Error('Must specify both the type and name for the layout desired. See .list() for available options');\n        }\n        // This is a registry of registries. Fetching an item may apply additional custom behaviors, such as\n        //  applying overrides or using namespaces to convert an abstract layout into a concrete one.\n        let base = super.get(type).get(name);\n        base = merge(overrides, base);\n        if (base.unnamespaced) {\n            delete base.unnamespaced;\n            return deepCopy(base);\n        }\n        let default_namespace = '';\n        if (typeof base.namespace == 'string') {\n            default_namespace = base.namespace;\n        } else if (typeof base.namespace == 'object' && Object.keys(base.namespace).length) {\n            if (typeof base.namespace.default != 'undefined') {\n                default_namespace = base.namespace.default;\n            } else {\n                default_namespace = base.namespace[Object.keys(base.namespace)[0]].toString();\n            }\n        }\n        default_namespace += default_namespace.length ? ':' : '';\n        const result = applyNamespaces(base, base.namespace, default_namespace);\n\n        return deepCopy(result);\n    }\n\n    /**\n     * Add a type of layout to the registry\n     * @param {String} type\n     * @param {String} name\n     * @param {Object} item\n     * @param {boolean} override\n     * @return {*}\n     */\n    add(type, name, item, override = false) {\n        if (!(type && name && item)) {\n            throw new Error('To add a layout, type, name, and item must all be specified');\n        }\n        if (!(typeof item === 'object')) {\n            throw new Error('The configuration to be added must be an object');\n        }\n\n        if (!this.has(type)) {\n            super.add(type, new RegistryBase());\n        }\n        // Ensure that each use of a layout can be modified, by returning a copy is independent\n        const copy = deepCopy(item);\n        return super.get(type).add(name, copy, override);\n    }\n\n    /**\n     * List all available types of layout (eg toolbar, panel, etc). If a specific type name is provided, list the\n     *  layouts for that widget type.\n     * @param {String} [type] The type of layout (eg toolbar, panel, etc)\n     * @return {String[]|Object}\n     */\n    list(type) {\n        if (!type) {\n            let result = {};\n            for (let [type, contents] of this._items) {\n                result[type] = contents.list();\n            }\n            return result;\n        }\n        return super.get(type).list();\n    }\n\n    /**\n     * Static alias to a helper method. Preserved for backwards compatibility, so that UMD users can access this method.\n     * @static\n     */\n    merge(custom_layout, default_layout) {\n        return merge(custom_layout, default_layout);\n    }\n}\n\nconst registry = new LayoutRegistry();\n\nfor (let [type, entries] of Object.entries(layouts)) {\n    for (let [name, config] of Object.entries(entries)) {\n        registry.add(type, name, config);\n    }\n}\n\n\nexport default registry;\n\n// Export base class for unit testing\nexport {LayoutRegistry as _LayoutRegistry};\n","/** @module */\nimport {RegistryBase} from '../registry/base';\nimport { ADAPTERS } from '../registry';\n\n/**\n * Create and coordinate an ensemble of (namespaced) data source instances\n * This is the mechanism by which users create data sources for a specific plot, and should be considered part of the\n *  public interface for LocusZoom.\n *\n * @public\n */\nclass DataSources extends RegistryBase {\n    /**\n     * @param {RegistryBase} [registry] Primarily used for unit testing. When creating sources by name, specify where to\n     *  find the registry of known sources.\n     */\n    constructor(registry) {\n        super();\n        // This both acts as a registry (of the instantiated sources for this plot), and references a registry\n        //   (to locate adapter classes by name, when creating from config)\n        this._registry = registry || ADAPTERS;\n    }\n\n    /**\n     * For data sources, there is a special behavior of \"create item from config, then add\"\n     * @param {String} namespace Uniquely identify this datasource\n     * @param {BaseAdapter|Array} item An instantiated datasource, or an array of arguments that can be used to\n     *   create a known datasource type.\n     * @param [override=false] Whether to allow existing sources to be redefined\n     * @return {DataSources} Most registries return the created instance, but this registry returns a reference to\n     *  itself (to support chaining)\n     */\n    add(namespace, item, override = false) {\n        if (this._registry.has(namespace)) {\n            throw new Error(`The namespace ${namespace} is already in use by another source`);\n        }\n\n        if (namespace.match(/[^A-Za-z0-9_]/)) {\n            throw new Error(`Data source namespace names can only contain alphanumeric characters or underscores`);\n        }\n        if (Array.isArray(item)) {\n            const [type, options] = item;\n            item = this._registry.create(type, options);\n        }\n        // Each datasource in the chain should be aware of its assigned namespace\n        item.source_id = namespace;\n\n        super.add(namespace, item, override);\n        return this;\n    }\n}\n\n\nexport default DataSources;\n","/**\n * Compatibility layer: expose symbols via UMD module to match the old LocusZoom API\n * A library using this file will need to load `locuszoom.css` separately.\n */\nimport {version} from '../package.json';\n\nimport {default as DataSources} from './data';\nimport { populate } from './helpers/display';\n\nimport {\n    ADAPTERS as Adapters,\n    DATA_LAYERS as DataLayers,\n    WIDGETS as Widgets,\n    LAYOUTS as Layouts,\n    SCALABLE as ScaleFunctions,\n    TRANSFORMS as TransformationFunctions,\n} from './registry';\n\n\nconst LocusZoom = {\n    version,\n    // Helpers for creating plots- the main public interface for most use cases\n    populate,\n    DataSources,\n    // Registries for plugin system\n    Adapters,\n    DataLayers,\n    Layouts,\n    ScaleFunctions,\n    TransformationFunctions,\n    Widgets,\n\n    get KnownDataSources() { // Backwards- compatibility alias\n        console.warn('Deprecation warning: KnownDataSources has been renamed to \"Adapters\"');\n        return Adapters;\n    },\n};\n\n\n/**\n * @callback pluginCallback\n * @param {Object} LocusZoom The global LocusZoom object\n */\n\n\nconst INSTALLED_PLUGINS = [];\n\n/**\n *\n * @param {pluginCallback} plugin The plugin should be a module that exports the function as either the default export,\n *  or as a member named \"install\"\n * @param args Additional options to be passed when creating the plugin\n */\nLocusZoom.use = function(plugin, ...args) {\n    // Deliberately similar implementation to Vue.js .use() plugin system\n    if (INSTALLED_PLUGINS.includes(plugin)) {\n        // Avoid double-installation of a plugin\n        return;\n    }\n\n    args.unshift(LocusZoom); // All plugins are passed a reference to LocusZoom object\n    if (typeof plugin.install === 'function') {\n        plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n        plugin.apply(null, args);\n    } else {\n        throw new Error('Plugin must export a function that receives the LocusZoom object as an argument');\n    }\n    INSTALLED_PLUGINS.push(plugin);\n};\n\n\nexport default LocusZoom;\n"],"sourceRoot":""}