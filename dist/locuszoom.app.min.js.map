{"version":3,"sources":["LocusZoom.js","Layouts.js","DataLayer.js","annotation_track.js","forest.js","genes.js","genome_legend.js","intervals.js","line.js","scatter.js","Singletons.js","Dashboard.js","Legend.js","Data.js","Plot.js","Panel.js"],"names":["LocusZoom","version","populate","selector","datasource","layout","d3","select","html","plot","call","this","node","id","iterator","empty","attr","Plot","container","dataset","region","parsed_state","parsePositionQuery","Object","keys","forEach","key","state","svg","append","style","setDimensions","positionPanels","initialize","length","refresh","populateAll","plots","selectAll","each","d","i","positionIntToString","pos","exp","suffix","exp_symbols","0","3","6","9","isNaN","log","Math","LN10","min","max","places_exp","floor","toFixed","min_exp","places","ret","pow","positionStringToInt","p","val","toUpperCase","replace","suffixre","exec","mult","Number","x","chrposoff","chrpos","match","center","offset","chr","start","end","position","prettyTicks","range","clip_range","target_tick_count","parseInt","min_n","shrink_sml","high_u_bias","u5_bias","abs","c","base","base_toFixed","round","unit","ticks","parseFloat","push","indexOf","slice","pop","createCORSPromise","method","url","body","headers","timeout","response","Q","defer","xhr","XMLHttpRequest","open","XDomainRequest","onreadystatechange","readyState","status","resolve","reject","setTimeout","header","setRequestHeader","send","promise","validateState","new_state","validated_region","attempted_scale","attempted_midpoint","temp","min_region_scale","max_region_scale","parseFields","data","tokens","regex","m","index","text","condition","variable","close","console","error","JSON","stringify","astify","token","shift","then","ast","cache","hasOwnProperty","Data","Field","render_node","value","map","join","getToolTipData","parentNode","classed","getToolTipDataLayer","getDataLayer","getToolTipPanel","data_layer","parent","getToolTipPlot","panel","generateCurtain","curtain","showing","content_selector","hide_delay","show","content","css","parent_plot","insert","on","hide","bind","update","clearTimeout","page_origin","getPageOrigin","top","y","left","width","height","max-width","max-height","delay","remove","generateLoader","loader","progress_selector","cancel_selector","percent","padding","loader_boundrect","getBoundingClientRect","animate","setPercentCompleted","subclass","extra","new_constructor","Sub","apply","arguments","prototype","create","k","constructor","Layouts","obj","layouts","dashboard","tooltip","get","type","name","modifications","merge","unnamespaced","parse","default_namespace","namespace","default","toString","applyNamespaces","element","resolved_namespace","re","r","merge_namespace","namespaced_element","namespaced_property","property","set","add","list","custom_layout","default_layout","custom_type","default_type","Array","isArray","assoc","closable","or","and","covariates_model_association","intervals","orientation","recomb","fields","z_index","stroke","stroke-width","x_axis","field","y_axis","axis","ceiling","ld","point_shape","scale_function","parameters","field_value","else","point_size","color","breaks","values","legend","shape","size","label","class","id_field","upper_buffer","min_extent","behaviors","onmouseover","action","onmouseout","onclick","exclusive","onshiftclick","phewas","tooltip_positioning","category_field","categories","null_value","fill_opacity","spacing","lines","stroke-dasharray","filters","operator","font-size","font-weight","fill","gene","constraint","genome","start_field","end_field","track_split_field","split_tracks","always_hide_legend","{{namespace[intervals]}}state_id","components","group_position","margin-left","title","subtitle","covariates_model_plot_dashboard","button_html","button_title","region_nav_plot_dashboard","step","min_width","min_height","proportional_width","margin","right","bottom","inner_border","l","axes","label_offset","tick_format","extent","y1","y2","origin","hidden","interaction","drag_background_to_pan","drag_x_ticks_to_scale","drag_y1_ticks_to_scale","drag_y2_ticks_to_scale","scroll_to_zoom","x_linked","data_layers","text-anchor","transform","data_layer_id","pad_from_bottom","responsive_resize","panels","proportional_height","StandardLayout","mouse_guide","DataLayer","initialized","layout_idx","Panel","DefaultLayout","state_id","setDefaultState","tooltips","global_statuses","highlighted","selected","faded","addField","fieldName","transformations","fieldString","Statuses","adjectives","verbs","menu_antiverbs","getBaseId","getAbsoluteDataHeight","dataBCR","group","canTransition","transition","panel_boundaries","dragging","panel_id","getElementId","element_id","getElementStatusNodeId","getElementById","applyDataMethods","toHTML","deselect","unselectElement","applyCustomDataMethods","clipRect","moveUp","data_layer_ids_by_z_index","resortDataLayers","moveDown","resolveScalableParameter","idx","f","ScaleFunctions","getAxisExtent","dimension","axis_name","axis_layout","data_extent","original_extent_span","lower_buffer","range_min","range_max","getTicks","config","createTooltip","positionTooltip","arrow","updateTooltip","destroyTooltip","destroyAllTooltips","event","pageX","pageY","positionAllTooltips","showOrHideTooltip","resolveStatus","statuses","directive","reduce","previousValue","currentValue","sub_status","sub_operator","show_directive","hide_directive","antistatus","show_resolved","hide_resolved","filter","return_type","test","operators","=","a","b","<","<=",">",">=","%","matches","filterIndexes","filterElements","verb","adjective","antiverb","setElementStatus","setElementStatusByFilters","setAllElementStatus","toggle","get_element_id_error","element_status_node_id","element_status_idx","splice","emit","status_ids","applyBehaviors","selection","event_match","executeBehaviors","requiredKeyStates","ctrl","ctrlKey","shiftKey","behavior","current_status_boolean","href","target","window","location","panel_origin","exportData","format","default_format","toLowerCase","e","jsonified","delimiter","record","draw","cliparea","reMap","lzd","getData","new_data","DataLayers","datalayers","datalayer","extend","parent_name","overrides","child","render","self","trackData","enter","exit","arrow_type","arrow_top","arrow_left","arrow_width","stroke_width","tooltip_box","data_layer_height","data_layer_width","x_center","x_scale","y_center","offset_right","offset_left","confidence_intervals","show_no_significance_line","border_radius","y_scale","sqrt","PI","ci_selection","ci_transform","ci_width","ci_height","duration","ease","points_selection","initial_y","symbol","label_font_size","label_exon_spacing","exon_height","bounding_box_padding","track_vertical_spacing","getTrackHeight","transcript_idx","tracks","gene_track_index","1","assignTracks","getLabelWidth","gene_name","font_size","temp_text","label_width","getBBox","g","gene_id","split","gene_version","transcript_id","transcripts","display_range","text_anchor","centered_margin","display_domain","invert","track","potential_track","collision_on_potential_track","placed_gene","min_start","max_end","t","exons","bboxes","boundaries","labels","strand","exon_id","clickareas","gene_bbox_id","gene_bbox","gene_center_x","chromosome_fill_colors","light","dark","chromosome_label_colors","genome_start","genome_end","chromosomes","variant_parts","variant","track_split_order","track_split_legend_to_y_axis","track_height","previous_tracks","interval_track_index","track_split_field_index","reverse","placed_interval","psuedoElement","sharedstatusnode_style","display","interval","statusnode_style","statusnodes","rects","interval_name","updateSplitTrackAxis","interval_bbox","interval_center_x","legend_axis","track_spacing","target_height","scaleHeightToData","toggleSplitTracks","interpolate","hitarea_width","mouse_event","line","tooltip_timeout","getMouseDisplayAndData","mouse","slope","x_field","y_field","bisect","bisector","datum","startDatum","endDatum","interpolateNumber","x_precision","toPrecision","y_precision","dd","min_arrow_left","max_arrow_left","path","hitarea","hitarea_line","path_class","global_status","decoupled","x_extent","y_extent","x_range","y_range","flip_labels","handle_lines","Boolean","min_x","max_x","flip","dn","dnl","dnx","text_swing","dnlx2","line_swing","label_texts","da","dax","abound","dal","label_lines","db","bbound","collision","separate_labels","seperate_iterations","alpha","again","delta","sign","adjust","new_a_y","new_b_y","min_y","max_y","label_elements","label_line","filtered_data","label_groups","x1","x2","makeLDReference","ref","applyState","ldrefvar","_prepareData","xField","sourceData","sort","ak","bk","av","bv","_generateCategoryBounds","uniqueCategories","item","category","bounds","categoryNames","color_scale","scale","category10","category20","colors","categoryBounds","_categories","knownColors","xPos","diff","KnownDataSources","sources","findSourceByName","SOURCE_NAME","source","warn","source_name","newObj","params","Function","getAll","setAll","clear","TransformationFunctions","getTrans","fun","parseTrans","parseTransString","result","funs","substring","fn","ceil","toExponential","str","encodeURIComponent","s","functions","input","threshold","prev","curr","nullval","upper_idx","brk","normalized_input","isFinite","Dashboard","hide_timeout","persist","component","Components","shouldPersist","visibility","destroy","force","Component","parent_panel","parent_svg","button","menu","Button","parent_dashboard","tag","setTag","setHtml","setText","setHTML","setTitle","setColor","setStyle","getClass","permanent","setPermanent","bool","setStatus","highlight","disable","setOnMouseover","setOnMouseout","setOnclick","preUpdate","postUpdate","outer_selector","inner_selector","scroll_position","scrollTop","scrollbar_padding","menu_height_padding","page_scroll_top","document","documentElement","container_offset","getContainerOffset","dashboard_client_rect","button_client_rect","menu_client_rect","total_content_height","scrollHeight","base_max_width","container_max_width","content_max_width","base_max_height","max_height","setPopulate","menu_populate_function","div_selector","title_selector","display_width","display_height","generateBase64SVG","base64_string","css_string","stylesheet","styleSheets","fcall","outerHTML","dy","initial_html","style_def","insert_at","btoa","p1","String","fromCharCode","suppress_confirm","confirm","removePanel","is_at_top","y_index","is_at_bottom","panel_ids_by_y_index","can_zoom","current_region_scale","zoom_factor","new_region_scale","menu_html","model","covariates","CovariatesModel","element_reference","updateComponent","removeByIdx","removeAll","table","covariate","row","cov","scale_timeout","status_adj","status_idx","status_verb","at_top","at_bottom","td","removeDataLayer","allowed_fields","fields_whitelist","dataLayer","layer_name","dataLayerLayout","defaultConfig","configSlot","_selected_item","uniqueID","random","menuLayout","renderRow","display_name","display_options","row_id","field_name","defaultName","default_config_display_name","options","Legend","background_rect","elements","elements_group","label_size","line_height","label_x","label_y","path_y","symbolTypes","radius","bcr","right_x","pad_from_right","DataSources","addSource","ns","dsobj","getSource","removeSource","fromJSON","ds","toJSON","parts","full_name","applyTransformations","Requester","split_requests","requests","raw","trans","outnames","promises","when","Source","enableCache","dependentSource","parseInit","init","getCacheKey","chain","getURL","fetchRequest","getRequest","req","cacheKey","_cachedKey","_cachedResponse","preGetData","pre","resp","parseResponse","json","records","parseData","parseArraysToObjects","N","sameLength","every","j","parseObjectsToObjects","fieldFound","v","prepareData","constructorFun","uniqueName","getPrototypeOf","AssociationSource","unshift","analysis","LDSource","findMergeFields","exactMatch","arr","regexes","dataFields","position_field","pvalue","pvalue_field","_names_","names","nameMatch","findRequestedFields","isrefvarin","isrefvarout","ldin","ldout","findExtremeValue","pval","extremeVal","extremeIdx","refSource","ldrefsource","reqFields","refVar","columns","leftJoin","lfield","rfield","position2","tagRefVariant","refvar","idfield","outname","GeneSource","GeneConstraintSource","geneids","substr","Content-Type","constraint_fields","RecombinationRateSource","recombsource","IntervalSource","bedtracksource","StaticSource","_data","PheWASSource","build","applyPanelYIndexesToPanelLayouts","pid","remap_promises","_base_layout","window_onresize","event_hooks","layout_changed","data_requested","data_rendered","element_clicked","hook","context","hookToRun","bounding_client_rect","x_offset","scrollLeft","y_offset","offsetParent","offsetTop","offsetLeft","canInteract","loading_data","zooming","initializeLayout","aspect_ratio","sumProportional","total","rescaleSVG","clientRect","panel_layout","addPanel","min-width","min-height","panel_width","panel_height","setOrigin","proportional_origin","clearPanelData","panelId","mode","panelsList","dlid","layer","x_linked_margins","total_proportional_height","proportional_adjustment","calculated_plot_height","mouse_guide_svg","mouse_guide_vertical_svg","mouse_guide_horizontal_svg","vertical","horizontal","selectors","corner_selector","panel_idx","panel_resize_drag","drag","this_panel","original_panel_height","panel_height_change","new_calculated_plot_height","loop_panel_id","loop_panel_idx","loop_panel","corner_drag","dx","plot_page_origin","panel_page_origin","corner_padding","corner_size","mouseout_mouse_guide","mousemove_mouse_guide","coords","mouseup","stopDrag","mousemove","preventDefault","dragged_x","start_x","dragged_y","start_y","linked_panel_ids","client_rect","state_changes","all","catch","drop","startDrag","getLinkedPanelIds","overrideAxisLayout","axis_number","y_axis_number","generateID","applyDataLayerZIndexesToDataLayerLayouts","data_promises","y1_scale","y2_scale","y1_extent","y2_extent","x_ticks","y1_ticks","y2_ticks","zoom_timeout","plot_origin","background_click","y1_linked","y2_linked","panel_count","setMargin","y1_range","y2_range","label_function","data_layer_layout","addDataLayer","clipPath","clearSelections","x_axis_label","y1_axis","y1_axis_label","y2_axis","y2_axis_label","mousedown","ascending","generateExtents","concat","generateTicks","baseTickConfig","combinedTicks","acc","nextLayer","itemConfig","constrain","limit_exponent","neg_min","neg_max","pos_min","pos_max","Infinity","ranges","base_x_range","x_shifted","base_y1_range","y1_shifted","base_y2_range","y2_shifted","anchor","scalar","current_extent_size","current_scaled_extent_size","potential_extent_size","new_extent_size","offset_ratio","new_x_extent_start","y_shifted","linear","domain","renderAxis","zoom_handler","wheelDelta","detail","deltaY","zoom_listener","zoom","canRender","axis_params","label_rotate","ticksAreAllNumbers","orient","tickPadding","tickValues","tickFormat","tick_selector","tick_mouseover","focus","cursor","dh","addBasicLoader","show_immediately"],"mappings":"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","file":"locuszoom.app.min.js","sourcesContent":["/**\n * @namespace\n */\nvar LocusZoom = {\n    version: \"0.7.1\"\n};\n\n/**\n * Populate a single element with a LocusZoom plot.\n * selector can be a string for a DOM Query or a d3 selector.\n * @param {String} selector CSS selector for the container element where the plot will be mounted. Any pre-existing\n *   content in the container will be completely replaced.\n * @param {LocusZoom.DataSources} datasource Ensemble of data providers used by the plot\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n * @returns {LocusZoom.Plot} The newly created plot instance\n */\nLocusZoom.populate = function(selector, datasource, layout) {\n    if (typeof selector == \"undefined\"){\n        throw (\"LocusZoom.populate selector not defined\");\n    }\n    // Empty the selector of any existing content\n    d3.select(selector).html(\"\");\n    var plot;\n    d3.select(selector).call(function(){\n        // Require each containing element have an ID. If one isn't present, create one.\n        if (typeof this.node().id == \"undefined\"){\n            var iterator = 0;\n            while (!d3.select(\"#lz-\" + iterator).empty()){ iterator++; }\n            this.attr(\"id\", \"#lz-\" + iterator);\n        }\n        // Create the plot\n        plot = new LocusZoom.Plot(this.node().id, datasource, layout);\n        plot.container = this.node();\n        // Detect data-region and fill in state values if present\n        if (typeof this.node().dataset !== \"undefined\" && typeof this.node().dataset.region !== \"undefined\"){\n            var parsed_state = LocusZoom.parsePositionQuery(this.node().dataset.region);\n            Object.keys(parsed_state).forEach(function(key){\n                plot.state[key] = parsed_state[key];\n            });\n        }\n        // Add an SVG to the div and set its dimensions\n        plot.svg = d3.select(\"div#\" + plot.id)\n            .append(\"svg\")\n            .attr(\"version\", \"1.1\")\n            .attr(\"xmlns\", \"http://www.w3.org/2000/svg\")\n            .attr(\"id\", plot.id + \"_svg\").attr(\"class\", \"lz-locuszoom\")\n            .style(plot.layout.style);\n        plot.setDimensions();\n        plot.positionPanels();\n        // Initialize the plot\n        plot.initialize();\n        // If the plot has defined data sources then trigger its first mapping based on state values\n        if (typeof datasource == \"object\" && Object.keys(datasource).length){\n            plot.refresh();\n        }\n    });\n    return plot;\n};\n\n/**\n * Populate arbitrarily many elements each with a LocusZoom plot\n *   using a common datasource and layout\n * @param {String} selector CSS selector for the container element where the plot will be mounted. Any pre-existing\n *   content in the container will be completely replaced.\n * @param {LocusZoom.DataSources} datasource Ensemble of data providers used by the plot\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n * @returns {LocusZoom.Plot[]}\n */\nLocusZoom.populateAll = function(selector, datasource, layout) {\n    var plots = [];\n    d3.selectAll(selector).each(function(d,i) {\n        plots[i] = LocusZoom.populate(this, datasource, layout);\n    });\n    return plots;\n};\n\n/**\n * Convert an integer chromosome position to an SI string representation (e.g. 23423456 => \"23.42\" (Mb))\n * @param {Number} pos Position\n * @param {String} [exp] Exponent to use for the returned string, eg 6=> MB. If not specified, will attempt to guess\n *   the most appropriate SI prefix based on the number provided.\n * @param {Boolean} [suffix=false] Whether or not to append a suffix (e.g. \"Mb\") to the end of the returned string\n * @returns {string}\n */\nLocusZoom.positionIntToString = function(pos, exp, suffix){\n    var exp_symbols = { 0: \"\", 3: \"K\", 6: \"M\", 9: \"G\" };\n    suffix = suffix || false;\n    if (isNaN(exp) || exp === null){\n        var log = Math.log(pos) / Math.LN10;\n        exp = Math.min(Math.max(log - (log % 3), 0), 9);\n    }\n    var places_exp = exp - Math.floor((Math.log(pos) / Math.LN10).toFixed(exp + 3));\n    var min_exp = Math.min(Math.max(exp, 0), 2);\n    var places = Math.min(Math.max(places_exp, min_exp), 12);\n    var ret = \"\" + (pos / Math.pow(10, exp)).toFixed(places);\n    if (suffix && typeof exp_symbols[exp] !== \"undefined\"){\n        ret += \" \" + exp_symbols[exp] + \"b\";\n    }\n    return ret;\n};\n\n/**\n * Convert an SI string chromosome position to an integer representation (e.g. \"5.8 Mb\" => 58000000)\n * @param {String} p The chromosome position\n * @returns {Number}\n */\nLocusZoom.positionStringToInt = function(p) {\n    var val = p.toUpperCase();\n    val = val.replace(/,/g, \"\");\n    var suffixre = /([KMG])[B]*$/;\n    var suffix = suffixre.exec(val);\n    var mult = 1;\n    if (suffix) {\n        if (suffix[1]===\"M\") {\n            mult = 1e6;\n        } else if (suffix[1]===\"G\") {\n            mult = 1e9;\n        } else {\n            mult = 1e3; //K\n        }\n        val = val.replace(suffixre,\"\");\n    }\n    val = Number(val) * mult;\n    return val;\n};\n\n/**\n * Parse region queries into their constituent parts\n * TODO: handle genes (or send off to API)\n * @param {String} x A chromosome position query. May be any of the forms `chr:start-end`, `chr:center+offset`,\n *   or `chr:pos`\n * @returns {{chr:*, start: *, end:*} | {chr:*, position:*}}\n */\nLocusZoom.parsePositionQuery = function(x) {\n    var chrposoff = /^(\\w+):([\\d,.]+[kmgbKMGB]*)([-+])([\\d,.]+[kmgbKMGB]*)$/;\n    var chrpos = /^(\\w+):([\\d,.]+[kmgbKMGB]*)$/;\n    var match = chrposoff.exec(x);\n    if (match) {\n        if (match[3] === \"+\") {\n            var center = LocusZoom.positionStringToInt(match[2]);\n            var offset = LocusZoom.positionStringToInt(match[4]);\n            return {\n                chr:match[1],\n                start: center - offset,\n                end: center + offset\n            };\n        } else {\n            return {\n                chr: match[1],\n                start: LocusZoom.positionStringToInt(match[2]),\n                end: LocusZoom.positionStringToInt(match[4])\n            };\n        }\n    }\n    match = chrpos.exec(x);\n    if (match) {\n        return {\n            chr:match[1],\n            position: LocusZoom.positionStringToInt(match[2])\n        };\n    }\n    return null;\n};\n\n/**\n * Generate a \"pretty\" set of ticks (multiples of 1, 2, or 5 on the same order of magnitude for the range)\n *   Based on R's \"pretty\" function: https://github.com/wch/r-source/blob/b156e3a711967f58131e23c1b1dc1ea90e2f0c43/src/appl/pretty.c\n * @param {Number[]} range A two-item array specifying [low, high] values for the axis range\n * @param {('low'|'high'|'both'|'neither')} [clip_range='neither'] What to do if first and last generated ticks extend\n *   beyond the range. Set this to \"low\", \"high\", \"both\", or \"neither\" to clip the first (low) or last (high) tick to\n *   be inside the range or allow them to extend beyond.\n *   e.g. \"low\" will clip the first (low) tick if it extends beyond the low end of the range but allow the\n *  last (high) tick to extend beyond the range. \"both\" clips both ends, \"neither\" allows both to extend beyond.\n * @param {Number} [target_tick_count=5] The approximate number of ticks you would like to be returned; may not be exact\n * @returns {Number[]}\n */\nLocusZoom.prettyTicks = function(range, clip_range, target_tick_count){\n    if (typeof target_tick_count == \"undefined\" || isNaN(parseInt(target_tick_count))){\n        target_tick_count = 5;\n    }\n    target_tick_count = parseInt(target_tick_count);\n    \n    var min_n = target_tick_count / 3;\n    var shrink_sml = 0.75;\n    var high_u_bias = 1.5;\n    var u5_bias = 0.5 + 1.5 * high_u_bias;\n    \n    var d = Math.abs(range[0] - range[1]);\n    var c = d / target_tick_count;\n    if ((Math.log(d) / Math.LN10) < -2){\n        c = (Math.max(Math.abs(d)) * shrink_sml) / min_n;\n    }\n    \n    var base = Math.pow(10, Math.floor(Math.log(c)/Math.LN10));\n    var base_toFixed = 0;\n    if (base < 1 && base !== 0){\n        base_toFixed = Math.abs(Math.round(Math.log(base)/Math.LN10));\n    }\n    \n    var unit = base;\n    if ( ((2 * base) - c) < (high_u_bias * (c - unit)) ){\n        unit = 2 * base;\n        if ( ((5 * base) - c) < (u5_bias * (c - unit)) ){\n            unit = 5 * base;\n            if ( ((10 * base) - c) < (high_u_bias * (c - unit)) ){\n                unit = 10 * base;\n            }\n        }\n    }\n    \n    var ticks = [];\n    var i = parseFloat( (Math.floor(range[0]/unit)*unit).toFixed(base_toFixed) );\n    while (i < range[1]){\n        ticks.push(i);\n        i += unit;\n        if (base_toFixed > 0){\n            i = parseFloat(i.toFixed(base_toFixed));\n        }\n    }\n    ticks.push(i);\n    \n    if (typeof clip_range == \"undefined\" || [\"low\", \"high\", \"both\", \"neither\"].indexOf(clip_range) === -1){\n        clip_range = \"neither\";\n    }\n    if (clip_range === \"low\" || clip_range === \"both\"){\n        if (ticks[0] < range[0]){ ticks = ticks.slice(1); }\n    }\n    if (clip_range === \"high\" || clip_range === \"both\"){\n        if (ticks[ticks.length-1] > range[1]){ ticks.pop(); }\n    }\n    \n    return ticks;\n};\n\n/**\n * Make an AJAX request and return a promise.\n * From http://www.html5rocks.com/en/tutorials/cors/\n *   and with promises from https://gist.github.com/kriskowal/593076\n *\n * @param {String} method The HTTP verb\n * @param {String} url\n * @param {String} body The request body to send to the server\n * @param {Object} headers Object of custom request headers\n * @param {Number} [timeout] If provided, wait this long (in ms) before timing out\n * @returns {Promise}\n */\nLocusZoom.createCORSPromise = function (method, url, body, headers, timeout) {\n    var response = Q.defer();\n    var xhr = new XMLHttpRequest();\n    if (\"withCredentials\" in xhr) {\n        // Check if the XMLHttpRequest object has a \"withCredentials\" property.\n        // \"withCredentials\" only exists on XMLHTTPRequest2 objects.\n        xhr.open(method, url, true);\n    } else if (typeof XDomainRequest != \"undefined\") {\n        // Otherwise, check if XDomainRequest.\n        // XDomainRequest only exists in IE, and is IE's way of making CORS requests.\n        xhr = new XDomainRequest();\n        xhr.open(method, url);\n    } else {\n        // Otherwise, CORS is not supported by the browser.\n        xhr = null;\n    }\n    if (xhr) {\n        xhr.onreadystatechange = function() {\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200 || xhr.status === 0 ) {\n                    response.resolve(xhr.response);\n                } else {\n                    response.reject(\"HTTP \" + xhr.status + \" for \" + url);\n                }\n            }\n        };\n        timeout && setTimeout(response.reject, timeout);\n        body = typeof body !== \"undefined\" ? body : \"\";\n        if (typeof headers !== \"undefined\"){\n            for (var header in headers){\n                xhr.setRequestHeader(header, headers[header]);\n            }\n        }\n        // Send the request\n        xhr.send(body);\n    } \n    return response.promise;\n};\n\n/**\n * Validate a (presumed complete) plot state object against internal rules for consistency, and ensure the plot fits\n *   within any constraints imposed by the layout.\n * @param {Object} new_state\n * @param {Number} new_state.start\n * @param {Number} new_state.end\n * @param {Object} layout\n * @returns {*|{}}\n */\nLocusZoom.validateState = function(new_state, layout){\n\n    new_state = new_state || {};\n    layout = layout || {};\n\n    // If a \"chr\", \"start\", and \"end\" are present then resolve start and end\n    // to numeric values that are not decimal, negative, or flipped\n    var validated_region = false;\n    if (typeof new_state.chr != \"undefined\" && typeof new_state.start != \"undefined\" && typeof new_state.end != \"undefined\"){\n        // Determine a numeric scale and midpoint for the attempted region,\n        var attempted_midpoint = null; var attempted_scale;\n        new_state.start = Math.max(parseInt(new_state.start), 1);\n        new_state.end = Math.max(parseInt(new_state.end), 1);\n        if (isNaN(new_state.start) && isNaN(new_state.end)){\n            new_state.start = 1;\n            new_state.end = 1;\n            attempted_midpoint = 0.5;\n            attempted_scale = 0;\n        } else if (isNaN(new_state.start) || isNaN(new_state.end)){\n            attempted_midpoint = new_state.start || new_state.end;\n            attempted_scale = 0;\n            new_state.start = (isNaN(new_state.start) ? new_state.end : new_state.start);\n            new_state.end = (isNaN(new_state.end) ? new_state.start : new_state.end);\n        } else {\n            attempted_midpoint = Math.round((new_state.start + new_state.end) / 2);\n            attempted_scale = new_state.end - new_state.start;\n            if (attempted_scale < 0){\n                var temp = new_state.start;\n                new_state.end = new_state.start;\n                new_state.start = temp;\n                attempted_scale = new_state.end - new_state.start;\n            }\n            if (attempted_midpoint < 0){\n                new_state.start = 1;\n                new_state.end = 1;\n                attempted_scale = 0;\n            }\n        }\n        validated_region = true;\n    }\n\n    // Constrain w/r/t layout-defined minimum region scale\n    if (!isNaN(layout.min_region_scale) && validated_region && attempted_scale < layout.min_region_scale){\n        new_state.start = Math.max(attempted_midpoint - Math.floor(layout.min_region_scale / 2), 1);\n        new_state.end = new_state.start + layout.min_region_scale;\n    }\n\n    // Constrain w/r/t layout-defined maximum region scale\n    if (!isNaN(layout.max_region_scale) && validated_region && attempted_scale > layout.max_region_scale){\n        new_state.start = Math.max(attempted_midpoint - Math.floor(layout.max_region_scale / 2), 1);\n        new_state.end = new_state.start + layout.max_region_scale;\n    }\n\n    return new_state;\n};\n\n//\n/**\n * Replace placeholders in an html string with field values defined in a data object\n *  Only works on scalar values! Will ignore non-scalars.\n *\n *  NOTE: Trusts content exactly as given. XSS prevention is the responsibility of the implementer.\n * @param {Object} data\n * @param {String} html A placeholder string in which to substitute fields. Supports several template options:\n *   `{{field_name}}` is a variable placeholder for the value of `field_name` from the provided data\n *   `{{#if {{field_name}} }} Conditional text {{/if}} will insert the contents of the tag only if the value exists.\n *     Since this is only an existence check, **variables with a value of 0 will be evaluated as true**.\n * @returns {string}\n */\nLocusZoom.parseFields = function (data, html) {\n    if (typeof data != \"object\"){\n        throw (\"LocusZoom.parseFields invalid arguments: data is not an object\");\n    }\n    if (typeof html != \"string\"){\n        throw (\"LocusZoom.parseFields invalid arguments: html is not a string\");\n    }\n    // `tokens` is like [token,...]\n    // `token` is like {text: '...'} or {variable: 'foo|bar'} or {condition: 'foo|bar'} or {close: 'if'}\n    var tokens = [];\n    var regex = /\\{\\{(?:(#if )?([A-Za-z0-9_:|]+)|(\\/if))\\}\\}/;\n    while (html.length > 0){\n        var m = regex.exec(html);\n        if (!m) { tokens.push({text: html}); html = \"\"; }\n        else if (m.index !== 0) { tokens.push({text: html.slice(0, m.index)}); html = html.slice(m.index); }\n        else if (m[1] === \"#if \") { tokens.push({condition: m[2]}); html = html.slice(m[0].length); }\n        else if (m[2]) { tokens.push({variable: m[2]}); html = html.slice(m[0].length); }\n        else if (m[3] === \"/if\") { tokens.push({close: \"if\"}); html = html.slice(m[0].length); }\n        else {\n            console.error(\"Error tokenizing tooltip when remaining template is \" + JSON.stringify(html) +\n                          \" and previous tokens are \" + JSON.stringify(tokens) +\n                          \" and current regex match is \" + JSON.stringify([m[1], m[2], m[3]]));\n            html=html.slice(m[0].length);\n        }\n    }\n    var astify = function() {\n        var token = tokens.shift();\n        if (typeof token.text !== \"undefined\" || token.variable) {\n            return token;\n        } else if (token.condition) {\n            token.then = [];\n            while(tokens.length > 0) {\n                if (tokens[0].close === \"if\") { tokens.shift(); break; }\n                token.then.push(astify());\n            }\n            return token;\n        } else {\n            console.error(\"Error making tooltip AST due to unknown token \" + JSON.stringify(token));\n            return { text: \"\" };\n        }\n    };\n    // `ast` is like [thing,...]\n    // `thing` is like {text: \"...\"} or {variable:\"foo|bar\"} or {condition: \"foo|bar\", then:[thing,...]}\n    var ast = [];\n    while (tokens.length > 0) ast.push(astify());\n\n    var resolve = function(variable) {\n        if (!resolve.cache.hasOwnProperty(variable)) {\n            resolve.cache[variable] = (new LocusZoom.Data.Field(variable)).resolve(data);\n        }\n        return resolve.cache[variable];\n    };\n    resolve.cache = {};\n    var render_node = function(node) {\n        if (typeof node.text !== \"undefined\") {\n            return node.text;\n        } else if (node.variable) {\n            try {\n                var value = resolve(node.variable);\n                if ([\"string\",\"number\",\"boolean\"].indexOf(typeof value) !== -1) { return value; }\n                if (value === null) { return \"\"; }\n            } catch (error) { console.error(\"Error while processing variable \" + JSON.stringify(node.variable)); }\n            return \"{{\" + node.variable + \"}}\";\n        } else if (node.condition) {\n            try {\n                var condition = resolve(node.condition);\n                if (condition || condition === 0) {\n                    return node.then.map(render_node).join(\"\");\n                }\n            } catch (error) { console.error(\"Error while processing condition \" + JSON.stringify(node.variable)); }\n            return \"\";\n        } else { console.error(\"Error rendering tooltip due to unknown AST node \" + JSON.stringify(node)); }\n    };\n    return ast.map(render_node).join(\"\");\n};\n\n/**\n * Shortcut method for getting the data bound to a tool tip.\n * @param {Element} node\n * @returns {*} The first element of data bound to the tooltip\n */\nLocusZoom.getToolTipData = function(node){\n    if (typeof node != \"object\" || typeof node.parentNode == \"undefined\"){\n        throw(\"Invalid node object\");\n    }\n    // If this node is a locuszoom tool tip then return its data\n    var selector = d3.select(node);\n    if (selector.classed(\"lz-data_layer-tooltip\") && typeof selector.data()[0] != \"undefined\"){\n        return selector.data()[0];\n    } else {\n        return LocusZoom.getToolTipData(node.parentNode);\n    }\n};\n\n/**\n * Shortcut method for getting a reference to the data layer that generated a tool tip.\n * @param {Element} node The element associated with the tooltip, or any element contained inside the tooltip\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.getToolTipDataLayer = function(node){\n    var data = LocusZoom.getToolTipData(node);\n    if (data.getDataLayer){ return data.getDataLayer(); }\n    return null;\n};\n\n/**\n * Shortcut method for getting a reference to the panel that generated a tool tip.\n * @param {Element} node The element associated with the tooltip, or any element contained inside the tooltip\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.getToolTipPanel = function(node){\n    var data_layer = LocusZoom.getToolTipDataLayer(node);\n    if (data_layer){ return data_layer.parent; }\n    return null;\n};\n\n/**\n * Shortcut method for getting a reference to the plot that generated a tool tip.\n * @param {Element} node The element associated with the tooltip, or any element contained inside the tooltip\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.getToolTipPlot = function(node){\n    var panel = LocusZoom.getToolTipPanel(node);\n    if (panel){ return panel.parent; }\n    return null;\n};\n\n/**\n * Generate a curtain object for a plot, panel, or any other subdivision of a layout\n * The panel curtain, like the plot curtain is an HTML overlay that obscures the entire panel. It can be styled\n *   arbitrarily and display arbitrary messages. It is useful for reporting error messages visually to an end user\n *   when the error renders the panel unusable.\n *   TODO: Improve type doc here\n * @returns {object}\n */\nLocusZoom.generateCurtain = function(){\n    var curtain = {\n        showing: false,\n        selector: null,\n        content_selector: null,\n        hide_delay: null,\n\n        /**\n         * Generate the curtain. Any content (string) argument passed will be displayed in the curtain as raw HTML.\n         *   CSS (object) can be passed which will apply styles to the curtain and its content.\n         * @param {string} content Content to be displayed on the curtain (as raw HTML)\n         * @param {object} css Apply the specified styles to the curtain and its contents\n         */\n        show: function(content, css){\n            if (!this.curtain.showing){\n                this.curtain.selector = d3.select(this.parent_plot.svg.node().parentNode).insert(\"div\")\n                    .attr(\"class\", \"lz-curtain\").attr(\"id\", this.id + \".curtain\");\n                this.curtain.content_selector = this.curtain.selector.append(\"div\").attr(\"class\", \"lz-curtain-content\");\n                this.curtain.selector.append(\"div\").attr(\"class\", \"lz-curtain-dismiss\").html(\"Dismiss\")\n                    .on(\"click\", function(){\n                        this.curtain.hide();\n                    }.bind(this));\n                this.curtain.showing = true;\n            }\n            return this.curtain.update(content, css);\n        }.bind(this),\n\n        /**\n         * Update the content and css of the curtain that's currently being shown. This method also adjusts the size\n         *   and positioning of the curtain to ensure it still covers the entire panel with no overlap.\n         * @param {string} content Content to be displayed on the curtain (as raw HTML)\n         * @param {object} css Apply the specified styles to the curtain and its contents\n         */\n        update: function(content, css){\n            if (!this.curtain.showing){ return this.curtain; }\n            clearTimeout(this.curtain.hide_delay);\n            // Apply CSS if provided\n            if (typeof css == \"object\"){\n                this.curtain.selector.style(css);\n            }\n            // Update size and position\n            var page_origin = this.getPageOrigin();\n            this.curtain.selector.style({\n                top: page_origin.y + \"px\",\n                left: page_origin.x + \"px\",\n                width: this.layout.width + \"px\",\n                height: this.layout.height + \"px\"\n            });\n            this.curtain.content_selector.style({\n                \"max-width\": (this.layout.width - 40) + \"px\",\n                \"max-height\": (this.layout.height - 40) + \"px\"\n            });\n            // Apply content if provided\n            if (typeof content == \"string\"){\n                this.curtain.content_selector.html(content);\n            }\n            return this.curtain;\n        }.bind(this),\n\n        /**\n         * Remove the curtain\n         * @param {number} delay Time to wait (in ms)\n         */\n        hide: function(delay){\n            if (!this.curtain.showing){ return this.curtain; }\n            // If a delay was passed then defer to a timeout\n            if (typeof delay == \"number\"){\n                clearTimeout(this.curtain.hide_delay);\n                this.curtain.hide_delay = setTimeout(this.curtain.hide, delay);\n                return this.curtain;\n            }\n            // Remove curtain\n            this.curtain.selector.remove();\n            this.curtain.selector = null;\n            this.curtain.content_selector = null;\n            this.curtain.showing = false;\n            return this.curtain;\n        }.bind(this)\n    };\n    return curtain;\n};\n\n/**\n * Generate a loader object for a plot, panel, or any other subdivision of a layout\n *\n * The panel loader is a small HTML overlay that appears in the lower left corner of the panel. It cannot be styled\n *   arbitrarily, but can show a custom message and show a minimalist loading bar that can be updated to specific\n *   completion percentages or be animated.\n * TODO Improve type documentation\n * @returns {object}\n */\nLocusZoom.generateLoader = function(){\n    var loader = {\n        showing: false,\n        selector: null,\n        content_selector: null,\n        progress_selector: null,\n        cancel_selector: null,\n\n        /**\n         * Show a loading indicator\n         * @param {string} [content='Loading...'] Loading message (displayed as raw HTML)\n         */\n        show: function(content){\n            // Generate loader\n            if (!this.loader.showing){\n                this.loader.selector = d3.select(this.parent_plot.svg.node().parentNode).insert(\"div\")\n                    .attr(\"class\", \"lz-loader\").attr(\"id\", this.id + \".loader\");\n                this.loader.content_selector = this.loader.selector.append(\"div\")\n                    .attr(\"class\", \"lz-loader-content\");\n                this.loader.progress_selector = this.loader.selector\n                    .append(\"div\").attr(\"class\", \"lz-loader-progress-container\")\n                    .append(\"div\").attr(\"class\", \"lz-loader-progress\");\n                /* TODO: figure out how to make this cancel button work\n                this.loader.cancel_selector = this.loader.selector.append(\"div\")\n                    .attr(\"class\", \"lz-loader-cancel\").html(\"Cancel\")\n                    .on(\"click\", function(){\n                        this.loader.hide();\n                    }.bind(this));\n                */\n                this.loader.showing = true;\n                if (typeof content == \"undefined\"){ content = \"Loading...\"; }\n            }\n            return this.loader.update(content);\n        }.bind(this),\n\n        /**\n         * Update the currently displayed loader and ensure the new content is positioned correctly.\n         * @param {string} content The text to display (as raw HTML). If not a string, will be ignored.\n         * @param {number} [percent] A number from 1-100. If a value is specified, it will stop all animations\n         *   in progress.\n         */\n        update: function(content, percent){\n            if (!this.loader.showing){ return this.loader; }\n            clearTimeout(this.loader.hide_delay);\n            // Apply content if provided\n            if (typeof content == \"string\"){\n                this.loader.content_selector.html(content);\n            }\n            // Update size and position\n            var padding = 6; // is there a better place to store/define this?\n            var page_origin = this.getPageOrigin();\n            var loader_boundrect = this.loader.selector.node().getBoundingClientRect();\n            this.loader.selector.style({\n                top: (page_origin.y + this.layout.height - loader_boundrect.height - padding) + \"px\",\n                left: (page_origin.x + padding) + \"px\"\n            });\n            /* Uncomment this code when a functional cancel button can be shown\n            var cancel_boundrect = this.loader.cancel_selector.node().getBoundingClientRect();\n            this.loader.content_selector.style({\n                \"padding-right\": (cancel_boundrect.width + padding) + \"px\"\n            });\n            */\n            // Apply percent if provided\n            if (typeof percent == \"number\"){\n                this.loader.progress_selector.style({\n                    width: (Math.min(Math.max(percent, 1), 100)) + \"%\"\n                });\n            }\n            return this.loader;\n        }.bind(this),\n\n        /**\n         * Adds a class to the loading bar that makes it loop infinitely in a loading animation. Useful when exact\n         *   percent progress is not available.\n         */\n        animate: function(){\n            this.loader.progress_selector.classed(\"lz-loader-progress-animated\", true);\n            return this.loader;\n        }.bind(this),\n\n        /**\n         *  Sets the loading bar in the loader to percentage width equal to the percent (number) value passed. Percents\n         *    will automatically be limited to a range of 1 to 100. Will stop all animations in progress.\n         */\n        setPercentCompleted: function(percent){\n            this.loader.progress_selector.classed(\"lz-loader-progress-animated\", false);\n            return this.loader.update(null, percent);\n        }.bind(this),\n\n        /**\n         * Remove the loader\n         * @param {number} delay Time to wait (in ms)\n         */\n        hide: function(delay){\n            if (!this.loader.showing){ return this.loader; }\n            // If a delay was passed then defer to a timeout\n            if (typeof delay == \"number\"){\n                clearTimeout(this.loader.hide_delay);\n                this.loader.hide_delay = setTimeout(this.loader.hide, delay);\n                return this.loader;\n            }\n            // Remove loader\n            this.loader.selector.remove();\n            this.loader.selector = null;\n            this.loader.content_selector = null;\n            this.loader.progress_selector = null;\n            this.loader.cancel_selector = null;\n            this.loader.showing = false;\n            return this.loader;\n        }.bind(this)\n    };\n    return loader;\n};\n\n/**\n * Create a new subclass following classical inheritance patterns. Some registry singletons use this internally to\n *   enable code reuse and customization of known LZ core functionality.\n *\n * @param {Function} parent A parent class constructor that will be extended by the child class\n * @param {Object} extra An object of additional properties and methods to add/override behavior for the child class\n * @param {Function} [new_constructor] An optional constructor function that performs additional setup. If omitted,\n *   just calls the parent constructor by default. Implementer must manage super calls when overriding the constructor.\n * @returns {Function} The constructor for the new child class\n */\nLocusZoom.subclass = function(parent, extra, new_constructor) {\n    if (typeof parent !== \"function\" ) {\n        throw \"Parent must be a callable constructor\";\n    }\n\n    extra = extra || {};\n    var Sub = new_constructor || function() {\n        parent.apply(this, arguments);\n    };\n\n    Sub.prototype = Object.create(parent.prototype);\n    Object.keys(extra).forEach(function(k) {\n        Sub.prototype[k] = extra[k];\n    });\n    Sub.prototype.constructor = Sub;\n\n    return Sub;\n};\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n * Manage known layouts for all parts of the LocusZoom plot\n *\n * This registry allows for layouts to be reused and customized many times on a page, using a common base pattern.\n *   It handles the work of ensuring that each new instance of the layout has no shared state with other copies.\n *\n * @class\n */\nLocusZoom.Layouts = (function() {\n    var obj = {};\n    var layouts = {\n        \"plot\": {},\n        \"panel\": {},\n        \"data_layer\": {},\n        \"dashboard\": {},\n        \"tooltip\": {}\n    };\n\n    /**\n     * Generate a layout configuration object\n     * @param {('plot'|'panel'|'data_layer'|'dashboard'|'tooltip')} type The type of layout to retrieve\n     * @param {string} name Identifier of the predefined layout within the specified type\n     * @param {object} [modifications] Custom properties that override default settings for this layout\n     * @returns {object} A JSON-serializable object representation\n     */\n    obj.get = function(type, name, modifications) {\n        if (typeof type != \"string\" || typeof name != \"string\") {\n            throw(\"invalid arguments passed to LocusZoom.Layouts.get, requires string (layout type) and string (layout name)\");\n        } else if (layouts[type][name]) {\n            // Get the base layout\n            var layout = LocusZoom.Layouts.merge(modifications || {}, layouts[type][name]);\n            // If \"unnamespaced\" is true then strike that from the layout and return the layout without namespacing\n            if (layout.unnamespaced){\n                delete layout.unnamespaced;\n                return JSON.parse(JSON.stringify(layout));\n            }\n            // Determine the default namespace for namespaced values\n            var default_namespace = \"\";\n            if (typeof layout.namespace == \"string\"){\n                default_namespace = layout.namespace;\n            } else if (typeof layout.namespace == \"object\" && Object.keys(layout.namespace).length){\n                if (typeof layout.namespace.default != \"undefined\"){\n                    default_namespace = layout.namespace.default;\n                } else {\n                    default_namespace = layout.namespace[Object.keys(layout.namespace)[0]].toString();\n                }\n            }\n            default_namespace += default_namespace.length ? \":\" : \"\";\n            // Apply namespaces to layout, recursively\n            var applyNamespaces = function(element, namespace){\n                if (namespace){\n                    if (typeof namespace == \"string\"){\n                        namespace = { default: namespace }; \n                    }\n                } else {\n                    namespace = { default: \"\" };\n                }\n                if (typeof element == \"string\"){\n                    var re = /\\{\\{namespace(\\[[A-Za-z_0-9]+\\]|)\\}\\}/g;\n                    var match, base, key, resolved_namespace;\n                    var replace = [];\n                    while ((match = re.exec(element)) !== null){\n                        base = match[0];\n                        key  = match[1].length ? match[1].replace(/(\\[|\\])/g,\"\") : null;\n                        resolved_namespace = default_namespace;\n                        if (namespace != null && typeof namespace == \"object\" && typeof namespace[key] != \"undefined\"){\n                            resolved_namespace = namespace[key] + (namespace[key].length ? \":\" : \"\");\n                        }\n                        replace.push({ base: base, namespace: resolved_namespace });\n                    }\n                    for (var r in replace){\n                        element = element.replace(replace[r].base, replace[r].namespace);\n                    }\n                } else if (typeof element == \"object\" && element != null){\n                    if (typeof element.namespace != \"undefined\"){\n                        var merge_namespace = (typeof element.namespace == \"string\") ? { default: element.namespace } : element.namespace;\n                        namespace = LocusZoom.Layouts.merge(namespace, merge_namespace);\n                    }\n                    var namespaced_element, namespaced_property;\n                    for (var property in element) {\n                        if (property === \"namespace\"){ continue; }\n                        namespaced_element = applyNamespaces(element[property], namespace);\n                        namespaced_property = applyNamespaces(property, namespace);\n                        if (property !== namespaced_property){\n                            delete element[property];\n                        }\n                        element[namespaced_property] = namespaced_element;\n                    }\n                }\n                return element;\n            };\n            layout = applyNamespaces(layout, layout.namespace);\n            // Return the layout as valid JSON only\n            return JSON.parse(JSON.stringify(layout));\n        } else {\n            throw(\"layout type [\" + type + \"] name [\" + name + \"] not found\");\n        }\n    };\n\n    /** @private */\n    obj.set = function(type, name, layout) {\n        if (typeof type != \"string\" || typeof name != \"string\" || typeof layout != \"object\"){\n            throw (\"unable to set new layout; bad arguments passed to set()\");\n        }\n        if (!layouts[type]){\n            layouts[type] = {};\n        }\n        if (layout){\n            return (layouts[type][name] = JSON.parse(JSON.stringify(layout)));\n        } else {\n            delete layouts[type][name];\n            return null;\n        }\n    };\n\n    /**\n     * Register a new layout definition by name.\n     *\n     * @param {string} type The type of layout to add. Usually, this will be one of the predefined LocusZoom types,\n     *   but if you pass a different name, this method will automatically create the new `type` bucket\n     * @param {string} name The identifier of the newly added layout\n     * @param {object} [layout] A JSON-serializable object containing configuration properties for this layout\n     * @returns The JSON representation of the newly created layout\n     */\n    obj.add = function(type, name, layout) {\n        return obj.set(type, name, layout);\n    };\n\n    /**\n     * List all registered layouts\n     * @param [type] Optionally narrow the list to only layouts of a specific type; else return all known layouts\n     * @returns {*}\n     */\n    obj.list = function(type) {\n        if (!layouts[type]){\n            var list = {};\n            Object.keys(layouts).forEach(function(type){\n                list[type] =  Object.keys(layouts[type]);\n            });\n            return list;\n        } else {\n            return Object.keys(layouts[type]);\n        }\n    };\n\n    /**\n     * A helper method used for merging two objects. If a key is present in both, takes the value from the first object\n     *   Values from `default_layout` will be cleanly copied over, ensuring no references or shared state.\n     *\n     * Frequently used for preparing custom layouts. Both objects should be JSON-serializable.\n     *\n     * @param {object} custom_layout An object containing configuration parameters that override or add to defaults\n     * @param {object} default_layout An object containing default settings.\n     * @returns The custom layout is modified in place and also returned from this method.\n     */\n    obj.merge = function (custom_layout, default_layout) {\n        if (typeof custom_layout !== \"object\" || typeof default_layout !== \"object\"){\n            throw(\"LocusZoom.Layouts.merge only accepts two layout objects; \" + (typeof custom_layout) + \", \" + (typeof default_layout) + \" given\");\n        }\n        for (var property in default_layout) {\n            if (!default_layout.hasOwnProperty(property)){ continue; }\n            // Get types for comparison. Treat nulls in the custom layout as undefined for simplicity.\n            // (javascript treats nulls as \"object\" when we just want to overwrite them as if they're undefined)\n            // Also separate arrays from objects as a discrete type.\n            var custom_type  = custom_layout[property] === null ? \"undefined\" : typeof custom_layout[property];\n            var default_type = typeof default_layout[property];\n            if (custom_type === \"object\" && Array.isArray(custom_layout[property])){ custom_type = \"array\"; }\n            if (default_type === \"object\" && Array.isArray(default_layout[property])){ default_type = \"array\"; }\n            // Unsupported property types: throw an exception\n            if (custom_type === \"function\" || default_type === \"function\"){\n                throw(\"LocusZoom.Layouts.merge encountered an unsupported property type\");\n            }\n            // Undefined custom value: pull the default value\n            if (custom_type === \"undefined\"){\n                custom_layout[property] = JSON.parse(JSON.stringify(default_layout[property]));\n                continue;\n            }\n            // Both values are objects: merge recursively\n            if (custom_type === \"object\" && default_type === \"object\"){\n                custom_layout[property] = LocusZoom.Layouts.merge(custom_layout[property], default_layout[property]);\n                continue;\n            }\n        }\n        return custom_layout;\n    };\n\n    return obj;\n})();\n\n\n/**\n * Tooltip Layouts\n * @namespace LocusZoom.Layouts.tooltips\n */\n\n// TODO: Improve documentation of predefined types within layout namespaces\nLocusZoom.Layouts.add(\"tooltip\", \"standard_association\", {\n    namespace: { \"assoc\": \"assoc\" },\n    closable: true,\n    show: { or: [\"highlighted\", \"selected\"] },\n    hide: { and: [\"unhighlighted\", \"unselected\"] },\n    html: \"<strong>{{{{namespace[assoc]}}variant}}</strong><br>\"\n        + \"P Value: <strong>{{{{namespace[assoc]}}log_pvalue|logtoscinotation}}</strong><br>\"\n        + \"Ref. Allele: <strong>{{{{namespace[assoc]}}ref_allele}}</strong><br>\"\n        + \"<a href=\\\"javascript:void(0);\\\" onclick=\\\"LocusZoom.getToolTipDataLayer(this).makeLDReference(LocusZoom.getToolTipData(this));\\\">Make LD Reference</a><br>\"\n});\n\nvar covariates_model_association = LocusZoom.Layouts.get(\"tooltip\", \"standard_association\", { unnamespaced: true });\ncovariates_model_association.html += \"<a href=\\\"javascript:void(0);\\\" onclick=\\\"LocusZoom.getToolTipPlot(this).CovariatesModel.add(LocusZoom.getToolTipData(this));\\\">Condition on Variant</a><br>\";\nLocusZoom.Layouts.add(\"tooltip\", \"covariates_model_association\", covariates_model_association);\n\nLocusZoom.Layouts.add(\"tooltip\", \"standard_genes\", {\n    closable: true,\n    show: { or: [\"highlighted\", \"selected\"] },\n    hide: { and: [\"unhighlighted\", \"unselected\"] },\n    html: \"<h4><strong><i>{{gene_name}}</i></strong></h4>\"\n        + \"<div style=\\\"float: left;\\\">Gene ID: <strong>{{gene_id}}</strong></div>\"\n        + \"<div style=\\\"float: right;\\\">Transcript ID: <strong>{{transcript_id}}</strong></div>\"\n        + \"<div style=\\\"clear: both;\\\"></div>\"\n        + \"<table>\"\n        + \"<tr><th>Constraint</th><th>Expected variants</th><th>Observed variants</th><th>Const. Metric</th></tr>\"\n        + \"<tr><td>Synonymous</td><td>{{exp_syn}}</td><td>{{n_syn}}</td><td>z = {{syn_z}}</td></tr>\"\n        + \"<tr><td>Missense</td><td>{{exp_mis}}</td><td>{{n_mis}}</td><td>z = {{mis_z}}</td></tr>\"\n        + \"<tr><td>LoF</td><td>{{exp_lof}}</td><td>{{n_lof}}</td><td>pLI = {{pLI}}</td></tr>\"\n        + \"</table>\"\n        + \"<a href=\\\"http://exac.broadinstitute.org/gene/{{gene_id}}\\\" target=\\\"_new\\\">More data on ExAC</a>\"\n});\n\nLocusZoom.Layouts.add(\"tooltip\", \"standard_intervals\", {\n    namespace: { \"intervals\": \"intervals\" },\n    closable: false,\n    show: { or: [\"highlighted\", \"selected\"] },\n    hide: { and: [\"unhighlighted\", \"unselected\"] },\n    html: \"{{{{namespace[intervals]}}state_name}}<br>{{{{namespace[intervals]}}start}}-{{{{namespace[intervals]}}end}}\"\n});\n\n/**\n * Data Layer Layouts: represent specific information from a data source\n * @namespace Layouts.data_layer\n*/\n\nLocusZoom.Layouts.add(\"data_layer\", \"significance\", {\n    id: \"significance\",\n    type: \"orthogonal_line\",\n    orientation: \"horizontal\",\n    offset: 4.522\n});\n\nLocusZoom.Layouts.add(\"data_layer\", \"recomb_rate\", {\n    namespace: { \"recomb\": \"recomb\" },\n    id: \"recombrate\",\n    type: \"line\",\n    fields: [\"{{namespace[recomb]}}position\", \"{{namespace[recomb]}}recomb_rate\"],\n    z_index: 1,\n    style: {\n        \"stroke\": \"#0000FF\",\n        \"stroke-width\": \"1.5px\"\n    },\n    x_axis: {\n        field: \"{{namespace[recomb]}}position\"\n    },\n    y_axis: {\n        axis: 2,\n        field: \"{{namespace[recomb]}}recomb_rate\",\n        floor: 0,\n        ceiling: 100\n    }\n});\n\nLocusZoom.Layouts.add(\"data_layer\", \"association_pvalues\", {\n    namespace: { \"assoc\": \"assoc\", \"ld\": \"ld\" },\n    id: \"associationpvalues\",\n    type: \"scatter\",\n    point_shape: {\n        scale_function: \"if\",\n        field: \"{{namespace[ld]}}isrefvar\",\n        parameters: {\n            field_value: 1,\n            then: \"diamond\",\n            else: \"circle\"\n        }\n    },\n    point_size: {\n        scale_function: \"if\",\n        field: \"{{namespace[ld]}}isrefvar\",\n        parameters: {\n            field_value: 1,\n            then: 80,\n            else: 40\n        }\n    },\n    color: [\n        {\n            scale_function: \"if\",\n            field: \"{{namespace[ld]}}isrefvar\",\n            parameters: {\n                field_value: 1,\n                then: \"#9632b8\"\n            }\n        },\n        {\n            scale_function: \"numerical_bin\",\n            field: \"{{namespace[ld]}}state\",\n            parameters: {\n                breaks: [0, 0.2, 0.4, 0.6, 0.8],\n                values: [\"#357ebd\",\"#46b8da\",\"#5cb85c\",\"#eea236\",\"#d43f3a\"]\n            }\n        },\n        \"#B8B8B8\"\n    ],\n    legend: [\n        { shape: \"diamond\", color: \"#9632b8\", size: 40, label: \"LD Ref Var\", class: \"lz-data_layer-scatter\" },\n        { shape: \"circle\", color: \"#d43f3a\", size: 40, label: \"1.0 > r² ≥ 0.8\", class: \"lz-data_layer-scatter\" },\n        { shape: \"circle\", color: \"#eea236\", size: 40, label: \"0.8 > r² ≥ 0.6\", class: \"lz-data_layer-scatter\" },\n        { shape: \"circle\", color: \"#5cb85c\", size: 40, label: \"0.6 > r² ≥ 0.4\", class: \"lz-data_layer-scatter\" },\n        { shape: \"circle\", color: \"#46b8da\", size: 40, label: \"0.4 > r² ≥ 0.2\", class: \"lz-data_layer-scatter\" },\n        { shape: \"circle\", color: \"#357ebd\", size: 40, label: \"0.2 > r² ≥ 0.0\", class: \"lz-data_layer-scatter\" },\n        { shape: \"circle\", color: \"#B8B8B8\", size: 40, label: \"no r² data\", class: \"lz-data_layer-scatter\" }\n    ],\n    fields: [\"{{namespace[assoc]}}variant\", \"{{namespace[assoc]}}position\", \"{{namespace[assoc]}}log_pvalue\", \"{{namespace[assoc]}}log_pvalue|logtoscinotation\", \"{{namespace[assoc]}}ref_allele\", \"{{namespace[ld]}}state\", \"{{namespace[ld]}}isrefvar\"],\n    id_field: \"{{namespace[assoc]}}variant\",\n    z_index: 2,\n    x_axis: {\n        field: \"{{namespace[assoc]}}position\"\n    },\n    y_axis: {\n        axis: 1,\n        field: \"{{namespace[assoc]}}log_pvalue\",\n        floor: 0,\n        upper_buffer: 0.10,\n        min_extent: [ 0, 10 ]\n    },\n    behaviors: {\n        onmouseover: [\n            { action: \"set\", status: \"highlighted\" }\n        ],\n        onmouseout: [\n            { action: \"unset\", status: \"highlighted\" }\n        ],\n        onclick: [\n            { action: \"toggle\", status: \"selected\", exclusive: true }\n        ],\n        onshiftclick: [\n            { action: \"toggle\", status: \"selected\" }\n        ]\n    },\n    tooltip: LocusZoom.Layouts.get(\"tooltip\", \"standard_association\", { unnamespaced: true })\n});\n\nLocusZoom.Layouts.add(\"data_layer\", \"phewas_pvalues\", {\n    namespace: {\"phewas\": \"phewas\"},\n    id: \"phewaspvalues\",\n    type: \"category_scatter\",\n    point_shape: \"circle\",\n    point_size: 70,\n    tooltip_positioning: \"vertical\",\n    id_field: \"{{namespace[phewas]}}id\",\n    fields: [\"{{namespace[phewas]}}id\", \"{{namespace[phewas]}}log_pvalue\", \"{{namespace[phewas]}}trait_group\", \"{{namespace[phewas]}}trait_label\"],\n    x_axis: {\n        field: \"{{namespace[phewas]}}x\",  // Synthetic/derived field added by `category_scatter` layer\n        category_field: \"{{namespace[phewas]}}trait_group\"\n    },\n    y_axis: {\n        axis: 1,\n        field: \"{{namespace[phewas]}}log_pvalue\",\n        floor: 0,\n        upper_buffer: 0.15\n    },\n    color: {\n        field: \"{{namespace[phewas]}}trait_group\",\n        scale_function: \"categorical_bin\",\n        parameters: {\n            categories: [],\n            values: [],\n            null_value: \"#B8B8B8\"\n        }\n    },\n    fill_opacity: 0.7,\n    tooltip: {\n        closable: true,\n        show: { or: [\"highlighted\", \"selected\"] },\n        hide: { and: [\"unhighlighted\", \"unselected\"] },\n        html: [\n            \"<strong>Trait:</strong> {{{{namespace[phewas]}}trait_label|htmlescape}}<br>\",\n            \"<strong>Trait Category:</strong> {{{{namespace[phewas]}}trait_group|htmlescape}}<br>\",\n            \"<strong>P-value:</strong> {{{{namespace[phewas]}}log_pvalue|logtoscinotation|htmlescape}}<br>\"\n        ].join(\"\")\n    },\n    behaviors: {\n        onmouseover: [\n            { action: \"set\", status: \"highlighted\" }\n        ],\n        onmouseout: [\n            { action: \"unset\", status: \"highlighted\" }\n        ],\n        onclick: [\n            { action: \"toggle\", status: \"selected\", exclusive: true }\n        ],\n        onshiftclick: [\n            { action: \"toggle\", status: \"selected\" }\n        ]\n    },\n    label: {\n        text: \"{{{{namespace[phewas]}}trait_label}}\",\n        spacing: 6,\n        lines: {\n            style: {\n                \"stroke-width\": \"2px\",\n                \"stroke\": \"#333333\",\n                \"stroke-dasharray\": \"2px 2px\"\n            }\n        },\n        filters: [\n            {\n                field: \"{{namespace[phewas]}}log_pvalue\",\n                operator: \">=\",\n                value: 20\n            }\n        ],\n        style: {\n            \"font-size\": \"14px\",\n            \"font-weight\": \"bold\",\n            \"fill\": \"#333333\"\n        }\n    }\n});\n\nLocusZoom.Layouts.add(\"data_layer\", \"genes\", {\n    namespace: { \"gene\": \"gene\", \"constraint\": \"constraint\" },\n    id: \"genes\",\n    type: \"genes\",\n    fields: [\"{{namespace[gene]}}gene\", \"{{namespace[constraint]}}constraint\"],\n    id_field: \"gene_id\",\n    behaviors: {\n        onmouseover: [\n            { action: \"set\", status: \"highlighted\" }\n        ],\n        onmouseout: [\n            { action: \"unset\", status: \"highlighted\" }\n        ],\n        onclick: [\n            { action: \"toggle\", status: \"selected\", exclusive: true }\n        ],\n        onshiftclick: [\n            { action: \"toggle\", status: \"selected\" }\n        ]\n    },\n    tooltip: LocusZoom.Layouts.get(\"tooltip\", \"standard_genes\", { unnamespaced: true })\n});\n\nLocusZoom.Layouts.add(\"data_layer\", \"genome_legend\", {\n    namespace: { \"genome\": \"genome\" },\n    id: \"genome_legend\",\n    type: \"genome_legend\",\n    fields: [\"{{namespace[genome]}}chr\", \"{{namespace[genome]}}base_pairs\"],\n    x_axis: {\n        floor: 0,\n        ceiling: 2881033286\n    }\n});\n\nLocusZoom.Layouts.add(\"data_layer\", \"intervals\", {\n    namespace: { \"intervals\": \"intervals\" },\n    id: \"intervals\",\n    type: \"intervals\",\n    fields: [\"{{namespace[intervals]}}start\",\"{{namespace[intervals]}}end\",\"{{namespace[intervals]}}state_id\",\"{{namespace[intervals]}}state_name\"],\n    id_field: \"{{namespace[intervals]}}start\",\n    start_field: \"{{namespace[intervals]}}start\",\n    end_field: \"{{namespace[intervals]}}end\",\n    track_split_field: \"{{namespace[intervals]}}state_id\",\n    split_tracks: true,\n    always_hide_legend: false,\n    color: {\n        field: \"{{namespace[intervals]}}state_id\",\n        scale_function: \"categorical_bin\",\n        parameters: {\n            categories: [1,2,3,4,5,6,7,8,9,10,11,12,13],\n            values: [\"rgb(212,63,58)\", \"rgb(250,120,105)\", \"rgb(252,168,139)\", \"rgb(240,189,66)\", \"rgb(250,224,105)\", \"rgb(240,238,84)\", \"rgb(244,252,23)\", \"rgb(23,232,252)\", \"rgb(32,191,17)\", \"rgb(23,166,77)\", \"rgb(32,191,17)\", \"rgb(162,133,166)\", \"rgb(212,212,212)\"],\n            null_value: \"#B8B8B8\"\n        }\n    },\n    legend: [\n        { shape: \"rect\", color: \"rgb(212,63,58)\", width: 9, label: \"Active Promoter\", \"{{namespace[intervals]}}state_id\": 1 },\n        { shape: \"rect\", color: \"rgb(250,120,105)\", width: 9, label: \"Weak Promoter\", \"{{namespace[intervals]}}state_id\": 2 },\n        { shape: \"rect\", color: \"rgb(252,168,139)\", width: 9, label: \"Poised Promoter\", \"{{namespace[intervals]}}state_id\": 3 },\n        { shape: \"rect\", color: \"rgb(240,189,66)\", width: 9, label: \"Strong enhancer\", \"{{namespace[intervals]}}state_id\": 4 },\n        { shape: \"rect\", color: \"rgb(250,224,105)\", width: 9, label: \"Strong enhancer\", \"{{namespace[intervals]}}state_id\": 5 },\n        { shape: \"rect\", color: \"rgb(240,238,84)\", width: 9, label: \"Weak enhancer\", \"{{namespace[intervals]}}state_id\": 6 },\n        { shape: \"rect\", color: \"rgb(244,252,23)\", width: 9, label: \"Weak enhancer\", \"{{namespace[intervals]}}state_id\": 7 },\n        { shape: \"rect\", color: \"rgb(23,232,252)\", width: 9, label: \"Insulator\", \"{{namespace[intervals]}}state_id\": 8 },\n        { shape: \"rect\", color: \"rgb(32,191,17)\", width: 9, label: \"Transcriptional transition\", \"{{namespace[intervals]}}state_id\": 9 },\n        { shape: \"rect\", color: \"rgb(23,166,77)\", width: 9, label: \"Transcriptional elongation\", \"{{namespace[intervals]}}state_id\": 10 },\n        { shape: \"rect\", color: \"rgb(136,240,129)\", width: 9, label: \"Weak transcribed\", \"{{namespace[intervals]}}state_id\": 11 },\n        { shape: \"rect\", color: \"rgb(162,133,166)\", width: 9, label: \"Polycomb-repressed\", \"{{namespace[intervals]}}state_id\": 12 },\n        { shape: \"rect\", color: \"rgb(212,212,212)\", width: 9, label: \"Heterochromatin / low signal\", \"{{namespace[intervals]}}state_id\": 13 }\n    ],\n    behaviors: {\n        onmouseover: [\n            { action: \"set\", status: \"highlighted\" }\n        ],\n        onmouseout: [\n            { action: \"unset\", status: \"highlighted\" }\n        ],\n        onclick: [\n            { action: \"toggle\", status: \"selected\", exclusive: true }\n        ],\n        onshiftclick: [\n            { action: \"toggle\", status: \"selected\" }\n        ]\n    },\n    tooltip: LocusZoom.Layouts.get(\"tooltip\", \"standard_intervals\", { unnamespaced: true })\n});\n\n/**\n * Dashboard Layouts: toolbar buttons etc\n  * @namespace Layouts.dashboard\n */\nLocusZoom.Layouts.add(\"dashboard\", \"standard_panel\", {\n    components: [\n        {\n            type: \"remove_panel\",\n            position: \"right\",\n            color: \"red\",\n            group_position: \"end\"\n        },\n        {\n            type: \"move_panel_up\",\n            position: \"right\",\n            group_position: \"middle\"\n        },\n        {\n            type: \"move_panel_down\",\n            position: \"right\",\n            group_position: \"start\",\n            style: { \"margin-left\": \"0.75em\" }\n        }\n    ]\n});                 \n\nLocusZoom.Layouts.add(\"dashboard\", \"standard_plot\", {\n    components: [\n        {\n            type: \"title\",\n            title: \"LocusZoom\",\n            subtitle: \"<a href=\\\"https://statgen.github.io/locuszoom/\\\" target=\\\"_blank\\\">v\" + LocusZoom.version + \"</a>\",\n            position: \"left\"\n        },\n        {\n            type: \"dimensions\",\n            position: \"right\"\n        },\n        {\n            type: \"region_scale\",\n            position: \"right\"\n        },\n        {\n            type: \"download\",\n            position: \"right\"\n        }\n    ]\n});\n\nvar covariates_model_plot_dashboard = LocusZoom.Layouts.get(\"dashboard\", \"standard_plot\");\ncovariates_model_plot_dashboard.components.push({\n    type: \"covariates_model\",\n    button_html: \"Model\",\n    button_title: \"Show and edit covariates currently in model\",\n    position: \"left\"\n});\nLocusZoom.Layouts.add(\"dashboard\", \"covariates_model_plot\", covariates_model_plot_dashboard);\n\nvar region_nav_plot_dashboard = LocusZoom.Layouts.get(\"dashboard\", \"standard_plot\");\nregion_nav_plot_dashboard.components.push({\n    type: \"shift_region\",\n    step: 500000,\n    button_html: \">>\",\n    position: \"right\",\n    group_position: \"end\"\n});\nregion_nav_plot_dashboard.components.push({\n    type: \"shift_region\",\n    step: 50000,\n    button_html: \">\",\n    position: \"right\",\n    group_position: \"middle\"\n});\nregion_nav_plot_dashboard.components.push({\n    type: \"zoom_region\",\n    step: 0.2,\n    position: \"right\",\n    group_position: \"middle\"\n});\nregion_nav_plot_dashboard.components.push({\n    type: \"zoom_region\",\n    step: -0.2,\n    position: \"right\",\n    group_position: \"middle\"\n});\nregion_nav_plot_dashboard.components.push({\n    type: \"shift_region\",\n    step: -50000,\n    button_html: \"<\",\n    position: \"right\",\n    group_position: \"middle\"\n});\nregion_nav_plot_dashboard.components.push({\n    type: \"shift_region\",\n    step: -500000,\n    button_html: \"<<\",\n    position: \"right\",\n    group_position: \"start\"\n});\nLocusZoom.Layouts.add(\"dashboard\", \"region_nav_plot\", region_nav_plot_dashboard);\n\n/**\n * Panel Layouts\n * @namespace Layouts.panel\n */\n\nLocusZoom.Layouts.add(\"panel\", \"association\", {\n    id: \"association\",\n    width: 800,\n    height: 225,\n    min_width:  400,\n    min_height: 200,\n    proportional_width: 1,\n    margin: { top: 35, right: 50, bottom: 40, left: 50 },\n    inner_border: \"rgb(210, 210, 210)\",\n    dashboard: (function(){\n        var l = LocusZoom.Layouts.get(\"dashboard\", \"standard_panel\", { unnamespaced: true });\n        l.components.push({\n            type: \"toggle_legend\",\n            position: \"right\"\n        });\n        return l;\n    })(),\n    axes: {\n        x: {\n            label: \"Chromosome {{chr}} (Mb)\",\n            label_offset: 32,\n            tick_format: \"region\",\n            extent: \"state\"\n        },\n        y1: {\n            label: \"-log10 p-value\",\n            label_offset: 28\n        },\n        y2: {\n            label: \"Recombination Rate (cM/Mb)\",\n            label_offset: 40\n        }\n    },\n    legend: {\n        orientation: \"vertical\",\n        origin: { x: 55, y: 40 },\n        hidden: true\n    },\n    interaction: {\n        drag_background_to_pan: true,\n        drag_x_ticks_to_scale: true,\n        drag_y1_ticks_to_scale: true,\n        drag_y2_ticks_to_scale: true,\n        scroll_to_zoom: true,\n        x_linked: true\n    },\n    data_layers: [\n        LocusZoom.Layouts.get(\"data_layer\", \"significance\", { unnamespaced: true }),\n        LocusZoom.Layouts.get(\"data_layer\", \"recomb_rate\", { unnamespaced: true }),\n        LocusZoom.Layouts.get(\"data_layer\", \"association_pvalues\", { unnamespaced: true })\n    ]\n});\n\nLocusZoom.Layouts.add(\"panel\", \"genes\", {\n    id: \"genes\",\n    width: 800,\n    height: 225,\n    min_width: 400,\n    min_height: 112.5,\n    proportional_width: 1,\n    margin: { top: 20, right: 50, bottom: 20, left: 50 },\n    axes: {},\n    interaction: {\n        drag_background_to_pan: true,\n        scroll_to_zoom: true,\n        x_linked: true\n    },\n    dashboard: (function(){\n        var l = LocusZoom.Layouts.get(\"dashboard\", \"standard_panel\", { unnamespaced: true });\n        l.components.push({\n            type: \"resize_to_data\",\n            position: \"right\"\n        });\n        return l;\n    })(),   \n    data_layers: [\n        LocusZoom.Layouts.get(\"data_layer\", \"genes\", { unnamespaced: true })\n    ]\n});\n\nLocusZoom.Layouts.add(\"panel\", \"phewas\", {\n    id: \"phewas\",\n    width: 800,\n    height: 300,\n    min_width:  800,\n    min_height: 300,\n    proportional_width: 1,\n    margin: { top: 20, right: 50, bottom: 120, left: 50 },\n    inner_border: \"rgb(210, 210, 210)\",\n    axes: {\n        x: {\n            ticks: {  // Object based config (shared defaults; allow layers to specify ticks)\n                style: {\n                    \"font-weight\": \"bold\",\n                    \"font-size\": \"11px\",\n                    \"text-anchor\": \"start\"\n                },\n                transform: \"rotate(50)\",\n                position: \"left\"  // Special param recognized by `category_scatter` layers\n            }\n        },\n        y1: {\n            label: \"-log10 p-value\",\n            label_offset: 28\n        }\n    },\n    data_layers: [\n        LocusZoom.Layouts.get(\"data_layer\", \"significance\", { unnamespaced: true }),\n        LocusZoom.Layouts.get(\"data_layer\", \"phewas_pvalues\", { unnamespaced: true })\n    ]\n});\n\nLocusZoom.Layouts.add(\"panel\", \"genome_legend\", {\n    id: \"genome_legend\",\n    width: 800,\n    height: 50,\n    origin: { x: 0, y: 300 },\n    min_width:  800,\n    min_height: 50,\n    proportional_width: 1,\n    margin: { top: 0, right: 50, bottom: 35, left: 50 },\n    axes: {\n        x: {\n            label: \"Genomic Position (number denotes chromosome)\",\n            label_offset: 35,\n            ticks: [\n                {\n                    x: 124625310,\n                    text: \"1\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 370850307,\n                    text: \"2\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 591461209,\n                    text: \"3\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 786049562,\n                    text: \"4\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 972084330,\n                    text: \"5\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 1148099493,\n                    text: \"6\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 1313226358,\n                    text: \"7\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 1465977701,\n                    text: \"8\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 1609766427,\n                    text: \"9\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 1748140516,\n                    text: \"10\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 1883411148,\n                    text: \"11\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2017840353,\n                    text: \"12\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2142351240,\n                    text: \"13\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2253610949,\n                    text: \"14\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2358551415,\n                    text: \"15\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2454994487,\n                    text: \"16\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2540769469,\n                    text: \"17\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2620405698,\n                    text: \"18\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2689008813,\n                    text: \"19\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2750086065,\n                    text: \"20\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2805663772,\n                    text: \"21\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2855381003,\n                    text: \"22\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                }\n            ]\n        }\n    },\n    data_layers: [\n        LocusZoom.Layouts.get(\"data_layer\", \"genome_legend\", { unnamespaced: true })\n    ]\n});\n\nLocusZoom.Layouts.add(\"panel\", \"intervals\", {\n    id: \"intervals\",\n    width: 1000,\n    height: 50,\n    min_width: 500,\n    min_height: 50,\n    margin: { top: 25, right: 150, bottom: 5, left: 50 },\n    dashboard: (function(){\n        var l = LocusZoom.Layouts.get(\"dashboard\", \"standard_panel\", { unnamespaced: true });\n        l.components.push({\n            type: \"toggle_split_tracks\",\n            data_layer_id: \"intervals\",\n            position: \"right\"\n        });\n        return l;\n    })(),\n    axes: {},\n    interaction: {\n        drag_background_to_pan: true,\n        scroll_to_zoom: true,\n        x_linked: true\n    },\n    legend: {\n        hidden: true,\n        orientation: \"horizontal\",\n        origin: { x: 50, y: 0 },\n        pad_from_bottom: 5\n    },\n    data_layers: [\n        LocusZoom.Layouts.get(\"data_layer\", \"intervals\", { unnamespaced: true })\n    ]\n});\n\n\n/**\n * Plot Layouts\n * @namespace Layouts.plot\n */\n\nLocusZoom.Layouts.add(\"plot\", \"standard_association\", {\n    state: {},\n    width: 800,\n    height: 450,\n    responsive_resize: true,\n    min_region_scale: 20000,\n    max_region_scale: 1000000,\n    dashboard: LocusZoom.Layouts.get(\"dashboard\", \"standard_plot\", { unnamespaced: true }),\n    panels: [\n        LocusZoom.Layouts.get(\"panel\", \"association\", { unnamespaced: true, proportional_height: 0.5 }),\n        LocusZoom.Layouts.get(\"panel\", \"genes\", { unnamespaced: true, proportional_height: 0.5 })\n    ]\n});\n\n// Shortcut to \"StandardLayout\" for backward compatibility\nLocusZoom.StandardLayout = LocusZoom.Layouts.get(\"plot\", \"standard_association\");\n\nLocusZoom.Layouts.add(\"plot\", \"standard_phewas\", {\n    width: 800,\n    height: 600,\n    min_width: 800,\n    min_height: 600,\n    responsive_resize: true,\n    dashboard: LocusZoom.Layouts.get(\"dashboard\", \"standard_plot\", { unnamespaced: true } ),\n    panels: [\n        LocusZoom.Layouts.get(\"panel\", \"phewas\", { unnamespaced: true, proportional_height: 0.45 }),\n        LocusZoom.Layouts.get(\"panel\", \"genome_legend\", { unnamespaced: true, proportional_height: 0.1 }),\n        LocusZoom.Layouts.get(\"panel\", \"genes\", {\n            unnamespaced: true, proportional_height: 0.45,\n            margin: { bottom: 40 },\n            axes: {\n                x: {\n                    label: \"Chromosome {{chr}} (Mb)\",\n                    label_offset: 32,\n                    tick_format: \"region\",\n                    extent: \"state\"\n                }\n            }\n        })\n    ],\n    mouse_guide: false\n});\n\nLocusZoom.Layouts.add(\"plot\", \"interval_association\", {\n    state: {},\n    width: 800,\n    height: 550,\n    responsive_resize: true,\n    min_region_scale: 20000,\n    max_region_scale: 1000000,\n    dashboard: LocusZoom.Layouts.get(\"dashboard\", \"standard_plot\", { unnamespaced: true }),\n    panels: [\n        LocusZoom.Layouts.get(\"panel\", \"association\", { unnamespaced: true, width: 800, proportional_height: (225/570) }),\n        LocusZoom.Layouts.get(\"panel\", \"intervals\", { unnamespaced: true, proportional_height: (120/570) }),\n        LocusZoom.Layouts.get(\"panel\", \"genes\", { unnamespaced: true, width: 800, proportional_height: (225/570) })\n    ]\n});\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n * A data layer is an abstract class representing a data set and its graphical representation within a panel\n * @public\n * @class\n * @param {Object} layout A JSON-serializable object describing the layout for this layer\n * @param {LocusZoom.DataLayer|LocusZoom.Panel} parent Where this layout is used\n*/\nLocusZoom.DataLayer = function(layout, parent) {\n    /** @member {Boolean} */\n    this.initialized = false;\n    /** @member {Number} */\n    this.layout_idx = null;\n\n    /** @member {String} */\n    this.id     = null;\n    /** @member {LocusZoom.Panel} */\n    this.parent = parent || null;\n    /**\n     * @member {{group: d3.selection, container: d3.selection, clipRect: d3.selection}}\n     */\n    this.svg    = {};\n\n    /** @member {LocusZoom.Plot} */\n    this.parent_plot = null;\n    if (typeof parent != \"undefined\" && parent instanceof LocusZoom.Panel){ this.parent_plot = parent.parent; }\n\n    /** @member {Object} */\n    this.layout = LocusZoom.Layouts.merge(layout || {}, LocusZoom.DataLayer.DefaultLayout);\n    if (this.layout.id){ this.id = this.layout.id; }\n\n    // Ensure any axes defined in the layout have an explicit axis number (default: 1)\n    if (this.layout.x_axis !== {} && typeof this.layout.x_axis.axis !== \"number\"){ this.layout.x_axis.axis = 1; }\n    if (this.layout.y_axis !== {} && typeof this.layout.y_axis.axis !== \"number\"){ this.layout.y_axis.axis = 1; }\n\n    /** @member {Object} */\n    this.state = {};\n    /** @member {String} */\n    this.state_id = null;\n\n    this.setDefaultState();\n\n    // Initialize parameters for storing data and tool tips\n    /** @member {Array} */\n    this.data = [];\n    if (this.layout.tooltip){\n        /** @member {Object} */\n        this.tooltips = {};\n    }\n\n    // Initialize flags for tracking global statuses\n    this.global_statuses = {\n        \"highlighted\": false,\n        \"selected\": false,\n        \"faded\": false,\n        \"hidden\": false\n    };\n    \n    return this;\n\n};\n\n/**\n * Instruct this datalayer to begin tracking additional fields from data sources (does not guarantee that such a field actually exists)\n *\n * Custom plots can use this to dynamically extend datalayer functionality after the plot is drawn\n *\n *  (since removing core fields may break layer functionality, there is presently no hook for the inverse behavior)\n * @param fieldName\n * @param namespace\n * @param {String|String[]} transformations The name (or array of names) of transformations to apply to this field\n * @returns {String} The raw string added to the fields array\n */\nLocusZoom.DataLayer.prototype.addField = function(fieldName, namespace, transformations) {\n    if (!fieldName || !namespace) {\n        throw \"Must specify field name and namespace to use when adding field\";\n    }\n    var fieldString = namespace + \":\" + fieldName;\n    if (transformations) {\n        fieldString += \"|\";\n        if (typeof transformations === \"string\") {\n            fieldString += transformations;\n        } else if (Array.isArray(transformations)) {\n            fieldString += transformations.join(\"|\");\n        } else {\n            throw \"Must provide transformations as either a string or array of strings\";\n        }\n    }\n    var fields = this.layout.fields;\n    if (fields.indexOf(fieldString) === -1) {\n        fields.push(fieldString);\n    }\n    return fieldString;\n};\n\n/**\n * Define default state that should get tracked during the lifetime of this layer.\n *\n * In some special custom usages, it may be useful to completely reset a panel (eg \"click for\n *   genome region\" links), plotting new data that invalidates any previously tracked state.  This hook makes it\n *   possible to reset without destroying the panel entirely. It is used by `Plot.clearPanelData`.\n */\nLocusZoom.DataLayer.prototype.setDefaultState = function() {\n    // Define state parameters specific to this data layer\n    if (this.parent){\n        this.state = this.parent.state;\n        this.state_id = this.parent.id + \".\" + this.id;\n        this.state[this.state_id] = this.state[this.state_id] || {};\n        LocusZoom.DataLayer.Statuses.adjectives.forEach(function(status){\n            this.state[this.state_id][status] = this.state[this.state_id][status] || [];\n        }.bind(this));\n    }\n};\n\n/**\n * A basic description of keys expected in a layout. Not intended to be directly used or modified by an end user.\n * @protected\n * @type {{type: string, fields: Array, x_axis: {}, y_axis: {}}}\n */\nLocusZoom.DataLayer.DefaultLayout = {\n    type: \"\",\n    fields: [],\n    x_axis: {},\n    y_axis: {}\n};\n\n/**\n * Available statuses that individual elements can have. Each status is described by\n *   a verb/antiverb and an adjective. Verbs and antiverbs are used to generate data layer\n *   methods for updating the status on one or more elements. Adjectives are used in class\n *   names and applied or removed from elements to have a visual representation of the status,\n *   as well as used as keys in the state for tracking which elements are in which status(es)\n * @static\n * @type {{verbs: String[], adjectives: String[], menu_antiverbs: String[]}}\n */\nLocusZoom.DataLayer.Statuses = {\n    verbs: [\"highlight\", \"select\", \"fade\", \"hide\"],\n    adjectives: [\"highlighted\", \"selected\", \"faded\", \"hidden\"],\n    menu_antiverbs: [\"unhighlight\", \"deselect\", \"unfade\", \"show\"]\n};\n\n/**\n * Get the fully qualified identifier for the data layer, prefixed by any parent or container elements\n *\n * @returns {string} A dot-delimited string of the format <plot>.<panel>.<data_layer>\n */\nLocusZoom.DataLayer.prototype.getBaseId = function(){\n    return this.parent_plot.id + \".\" + this.parent.id + \".\" + this.id;\n};\n\n/**\n * Determine the pixel height of data-bound objects represented inside this data layer. (excluding elements such as axes)\n *\n * May be used by operations that resize the data layer to fit available data\n *\n * @public\n * @returns {number}\n */\nLocusZoom.DataLayer.prototype.getAbsoluteDataHeight = function(){\n    var dataBCR = this.svg.group.node().getBoundingClientRect();\n    return dataBCR.height;\n};\n\n/**\n * Whether transitions can be applied to this data layer\n * @returns {boolean}\n */\nLocusZoom.DataLayer.prototype.canTransition = function(){\n    if (!this.layout.transition){ return false; }\n    return !(this.parent_plot.panel_boundaries.dragging || this.parent_plot.interaction.panel_id);\n};\n\n/**\n * Fetch the fully qualified ID to be associated with a specific visual element, based on the data to which that\n *   element is bound. In general this element ID will be unique, allowing it to be addressed directly via selectors.\n * @param {String|Object} element\n * @returns {String}\n */\nLocusZoom.DataLayer.prototype.getElementId = function(element){\n    var element_id = \"element\";\n    if (typeof element == \"string\"){\n        element_id = element;\n    } else if (typeof element == \"object\"){\n        var id_field = this.layout.id_field || \"id\";\n        if (typeof element[id_field] == \"undefined\"){\n            throw(\"Unable to generate element ID\");\n        }\n        element_id = element[id_field].toString().replace(/\\W/g,\"\");\n    }\n    return (this.getBaseId() + \"-\" + element_id).replace(/(:|\\.|\\[|\\]|,)/g, \"_\");\n};\n\n/**\n * Fetch an ID that may bind a data element to a separate visual node for displaying status\n * Examples of this might be seperate visual nodes to show select/highlight statuses, or\n * even a common/shared node to show status across many elements in a set.\n * Abstract method. It should be overridden by data layers that implement seperate status\n * nodes specifically to the use case of the data layer type.\n * @param {String|Object} element\n * @returns {String|null}\n */\nLocusZoom.DataLayer.prototype.getElementStatusNodeId = function(element){\n    return null;\n};\n\n/**\n * Returns a reference to the underlying data associated with a single visual element in the data layer, as\n *   referenced by the unique identifier for the element\n\n * @param {String} id The unique identifier for the element, as defined by `getElementId`\n * @returns {Object|null} The data bound to that element\n */\nLocusZoom.DataLayer.prototype.getElementById = function(id){\n    var selector = d3.select(\"#\" + id.replace(/(:|\\.|\\[|\\]|,)/g, \"\\\\$1\"));\n    if (!selector.empty() && selector.data() && selector.data().length){\n        return selector.data()[0];\n    } else {\n        return null;\n    }\n};\n\n/**\n * Basic method to apply arbitrary methods and properties to data elements.\n *   This is called on all data immediately after being fetched.\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.applyDataMethods = function(){\n    this.data.forEach(function(d, i){\n        // Basic toHTML() method - return the stringified value in the id_field, if defined.\n        this.data[i].toHTML = function(){\n            var id_field = this.layout.id_field || \"id\";\n            var html = \"\";\n            if (this.data[i][id_field]){ html = this.data[i][id_field].toString(); }\n            return html;\n        }.bind(this);\n        // getDataLayer() method - return a reference to the data layer\n        this.data[i].getDataLayer = function(){\n            return this;\n        }.bind(this);\n        // deselect() method - shortcut method to deselect the element\n        this.data[i].deselect = function(){\n            var data_layer = this.getDataLayer();\n            data_layer.unselectElement(this);\n        };\n    }.bind(this));\n    this.applyCustomDataMethods();\n    return this;\n};\n\n/**\n * Hook that allows custom datalayers to apply additional methods and properties to data elements as needed\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.applyCustomDataMethods = function(){\n    return this;\n};\n\n/**\n * Initialize a data layer\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.initialize = function(){\n\n    // Append a container group element to house the main data layer group element and the clip path\n    this.svg.container = this.parent.svg.group.append(\"g\")\n        .attr(\"class\", \"lz-data_layer-container\")\n        .attr(\"id\", this.getBaseId() + \".data_layer_container\");\n        \n    // Append clip path to the container element\n    this.svg.clipRect = this.svg.container.append(\"clipPath\")\n        .attr(\"id\", this.getBaseId() + \".clip\")\n        .append(\"rect\");\n    \n    // Append svg group for rendering all data layer elements, clipped by the clip path\n    this.svg.group = this.svg.container.append(\"g\")\n        .attr(\"id\", this.getBaseId() + \".data_layer\")\n        .attr(\"clip-path\", \"url(#\" + this.getBaseId() + \".clip)\");\n\n    return this;\n\n};\n\n/**\n * Move a data layer up relative to others by z-index\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.moveUp = function(){\n    if (this.parent.data_layer_ids_by_z_index[this.layout.z_index + 1]){\n        this.parent.data_layer_ids_by_z_index[this.layout.z_index] = this.parent.data_layer_ids_by_z_index[this.layout.z_index + 1];\n        this.parent.data_layer_ids_by_z_index[this.layout.z_index + 1] = this.id;\n        this.parent.resortDataLayers();\n    }\n    return this;\n};\n\n/**\n * Move a data layer down relative to others by z-index\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.moveDown = function(){\n    if (this.parent.data_layer_ids_by_z_index[this.layout.z_index - 1]){\n        this.parent.data_layer_ids_by_z_index[this.layout.z_index] = this.parent.data_layer_ids_by_z_index[this.layout.z_index - 1];\n        this.parent.data_layer_ids_by_z_index[this.layout.z_index - 1] = this.id;\n        this.parent.resortDataLayers();\n    }\n    return this;\n};\n\n/**\n * Apply scaling functions to an element or parameter as needed, based on its layout and the element's data\n * If the layout parameter is already a primitive type, simply return the value as given\n * @param {Array|Number|String|Object} layout\n * @param {*} data The value to be used with the filter\n * @returns {*} The transformed value\n */\nLocusZoom.DataLayer.prototype.resolveScalableParameter = function(layout, data){\n    var ret = null;\n    if (Array.isArray(layout)){\n        var idx = 0;\n        while (ret === null && idx < layout.length){\n            ret = this.resolveScalableParameter(layout[idx], data);\n            idx++;\n        }\n    } else {\n        switch (typeof layout){\n        case \"number\":\n        case \"string\":\n            ret = layout;\n            break;\n        case \"object\":\n            if (layout.scale_function){\n                if(layout.field) {\n                    var f = new LocusZoom.Data.Field(layout.field);\n                    ret = LocusZoom.ScaleFunctions.get(layout.scale_function, layout.parameters || {}, f.resolve(data));\n                } else {\n                    ret = LocusZoom.ScaleFunctions.get(layout.scale_function, layout.parameters || {}, data);\n                }\n            }\n            break;\n        }\n    }\n    return ret;\n};\n\n/**\n * Generate dimension extent function based on layout parameters\n * @param {('x'|'y')} dimension\n */\nLocusZoom.DataLayer.prototype.getAxisExtent = function(dimension){\n\n    if ([\"x\", \"y\"].indexOf(dimension) === -1){\n        throw(\"Invalid dimension identifier passed to LocusZoom.DataLayer.getAxisExtent()\");\n    }\n\n    var axis_name = dimension + \"_axis\";\n    var axis_layout = this.layout[axis_name];\n\n    // If a floor AND a ceiling are explicitly defined then just return that extent and be done\n    if (!isNaN(axis_layout.floor) && !isNaN(axis_layout.ceiling)){\n        return [+axis_layout.floor, +axis_layout.ceiling];\n    }\n\n    // If a field is defined for the axis and the data layer has data then generate the extent from the data set\n    var data_extent = [];\n    if (axis_layout.field && this.data) {\n        if (!this.data.length) {\n            // If data has been fetched (but no points in region), enforce the min_extent (with no buffers,\n            //  because we don't need padding around an empty screen)\n            data_extent = axis_layout.min_extent || [];\n            return data_extent;\n        } else {\n            data_extent = d3.extent(this.data, function (d) {\n                var f = new LocusZoom.Data.Field(axis_layout.field);\n                return +f.resolve(d);\n            });\n\n            // Apply upper/lower buffers, if applicable\n            var original_extent_span = data_extent[1] - data_extent[0];\n            if (!isNaN(axis_layout.lower_buffer)) {\n                data_extent[0] -= original_extent_span * axis_layout.lower_buffer;\n            }\n            if (!isNaN(axis_layout.upper_buffer)) {\n                data_extent[1] += original_extent_span * axis_layout.upper_buffer;\n            }\n\n            if (typeof axis_layout.min_extent == \"object\") {\n                // The data should span at least the range specified by min_extent, an array with [low, high]\n                var range_min = axis_layout.min_extent[0];\n                var range_max = axis_layout.min_extent[1];\n                if (!isNaN(range_min) && !isNaN(range_max)) {\n                    data_extent[0] = Math.min(data_extent[0], range_min);\n                }\n                if (!isNaN(range_max)) {\n                    data_extent[1] = Math.max(data_extent[1], range_max);\n                }\n            }\n            // If specified, floor and ceiling will override the actual data range\n            return [\n                isNaN(axis_layout.floor) ? data_extent[0] : axis_layout.floor,\n                isNaN(axis_layout.ceiling) ? data_extent[1] : axis_layout.ceiling\n            ];\n        }\n    }\n\n    // If this is for the x axis and no extent could be generated yet but state has a defined start and end\n    // then default to using the state-defined region as the extent\n    if (dimension === \"x\" && !isNaN(this.state.start) && !isNaN(this.state.end)) {\n        return [this.state.start, this.state.end];\n    }\n\n    // No conditions met for generating a valid extent, return an empty array\n    return [];\n\n};\n\n/**\n * Allow this data layer to tell the panel what axis ticks it thinks it will require. The panel may choose whether\n *   to use some, all, or none of these when rendering, either alone or in conjunction with other data layers.\n *\n *   This method is a stub and should be overridden in data layers that need to specify custom behavior.\n *\n * @param {('x'|'y')} dimension\n * @param {Object} [config] Additional parameters for the panel to specify how it wants ticks to be drawn. The names\n *   and meanings of these parameters may vary between different data layers.\n * @returns {Object[]}\n *   An array of objects: each object must have an 'x' attribute to position the tick.\n *   Other supported object keys:\n *     * text: string to render for a given tick\n *     * style: d3-compatible CSS style object\n *     * transform: SVG transform attribute string\n *     * color: string or LocusZoom scalable parameter object\n */\nLocusZoom.DataLayer.prototype.getTicks = function (dimension, config) {\n    if ([\"x\", \"y\"].indexOf(dimension) === -1) {\n        throw(\"Invalid dimension identifier\");\n    }\n    return [];\n};\n\n/**\n * Generate a tool tip for a given element\n * @param {String|Object} d The element associated with the tooltip\n * @param {String} [id] An identifier to the tooltip\n */\nLocusZoom.DataLayer.prototype.createTooltip = function(d, id){\n    if (typeof this.layout.tooltip != \"object\"){\n        throw (\"DataLayer [\" + this.id + \"] layout does not define a tooltip\");\n    }\n    if (typeof id == \"undefined\"){ id = this.getElementId(d); }\n    if (this.tooltips[id]){\n        this.positionTooltip(id);\n        return;\n    }\n    this.tooltips[id] = {\n        data: d,\n        arrow: null,\n        selector: d3.select(this.parent_plot.svg.node().parentNode).append(\"div\")\n            .attr(\"class\", \"lz-data_layer-tooltip\")\n            .attr(\"id\", id + \"-tooltip\")\n    };\n    this.updateTooltip(d);\n    return this;\n};\n\n/**\n * Update a tool tip (generate its inner HTML)\n * @param {String|Object} d The element associated with the tooltip\n * @param {String} [id] An identifier to the tooltip\n */\nLocusZoom.DataLayer.prototype.updateTooltip = function(d, id){\n    if (typeof id == \"undefined\"){ id = this.getElementId(d); }\n    // Empty the tooltip of all HTML (including its arrow!)\n    this.tooltips[id].selector.html(\"\");\n    this.tooltips[id].arrow = null;\n    // Set the new HTML\n    if (this.layout.tooltip.html){\n        this.tooltips[id].selector.html(LocusZoom.parseFields(d, this.layout.tooltip.html));\n    }\n    // If the layout allows tool tips on this data layer to be closable then add the close button\n    // and add padding to the tooltip to accommodate it\n    if (this.layout.tooltip.closable){\n        this.tooltips[id].selector.insert(\"button\", \":first-child\")\n            .attr(\"class\", \"lz-tooltip-close-button\")\n            .attr(\"title\", \"Close\")\n            .text(\"×\")\n            .on(\"click\", function(){\n                this.destroyTooltip(id);\n            }.bind(this));\n    }\n    // Apply data directly to the tool tip for easier retrieval by custom UI elements inside the tool tip\n    this.tooltips[id].selector.data([d]);\n    // Reposition and draw a new arrow\n    this.positionTooltip(id);\n    return this;\n};\n\n/**\n * Destroy tool tip - remove the tool tip element from the DOM and delete the tool tip's record on the data layer\n * @param {String|Object} d The element associated with the tooltip\n * @param {String} [id] An identifier to the tooltip\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.destroyTooltip = function(d, id){\n    if (typeof d == \"string\"){\n        id = d;\n    } else if (typeof id == \"undefined\"){\n        id = this.getElementId(d);\n    }\n    if (this.tooltips[id]){\n        if (typeof this.tooltips[id].selector == \"object\"){\n            this.tooltips[id].selector.remove();\n        }\n        delete this.tooltips[id];\n    }\n    return this;\n};\n\n/**\n * Loop through and destroy all tool tips on this data layer\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.destroyAllTooltips = function(){\n    for (var id in this.tooltips){\n        this.destroyTooltip(id);\n    }\n    return this;\n};\n\n//\n/**\n * Position tool tip - naïve function to place a tool tip to the lower right of the current mouse element\n *   Most data layers reimplement this method to position tool tips specifically for the data they display\n * @param {String} id The identifier of the tooltip to position\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.positionTooltip = function(id){\n    if (typeof id != \"string\"){\n        throw (\"Unable to position tooltip: id is not a string\");\n    }\n    // Position the div itself\n    this.tooltips[id].selector\n        .style(\"left\", (d3.event.pageX) + \"px\")\n        .style(\"top\", (d3.event.pageY) + \"px\");\n    // Create / update position on arrow connecting tooltip to data\n    if (!this.tooltips[id].arrow){\n        this.tooltips[id].arrow = this.tooltips[id].selector.append(\"div\")\n            .style(\"position\", \"absolute\")\n            .attr(\"class\", \"lz-data_layer-tooltip-arrow_top_left\");\n    }\n    this.tooltips[id].arrow\n        .style(\"left\", \"-1px\")\n        .style(\"top\", \"-1px\");\n    return this;\n};\n\n/**\n * Loop through and position all tool tips on this data layer\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.positionAllTooltips = function(){\n    for (var id in this.tooltips){\n        this.positionTooltip(id);\n    }\n    return this;\n};\n\n/**\n * Show or hide a tool tip by ID depending on directives in the layout and state values relative to the ID\n * @param {String|Object} element The element associated with the tooltip\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.showOrHideTooltip = function(element){\n    \n    if (typeof this.layout.tooltip != \"object\"){ return; }\n    var id = this.getElementId(element);\n\n    var resolveStatus = function(statuses, directive, operator){\n        var status = null;\n        if (typeof statuses != \"object\" || statuses === null){ return null; }\n        if (Array.isArray(directive)){\n            if (typeof operator == \"undefined\"){ operator = \"and\"; }\n            if (directive.length === 1){\n                status = statuses[directive[0]];\n            } else {\n                status = directive.reduce(function(previousValue, currentValue) {\n                    if (operator === \"and\"){\n                        return statuses[previousValue] && statuses[currentValue];\n                    } else if (operator === \"or\"){\n                        return statuses[previousValue] || statuses[currentValue];\n                    }\n                    return null;\n                });\n            }\n        } else if (typeof directive == \"object\"){\n            var sub_status;\n            for (var sub_operator in directive){\n                sub_status = resolveStatus(statuses, directive[sub_operator], sub_operator);\n                if (status === null){\n                    status = sub_status;\n                } else if (operator === \"and\"){\n                    status = status && sub_status;\n                } else if (operator === \"or\"){\n                    status = status || sub_status;\n                }\n            }\n        }\n        return status;\n    };\n\n    var show_directive = {};\n    if (typeof this.layout.tooltip.show == \"string\"){\n        show_directive = { and: [ this.layout.tooltip.show ] };\n    } else if (typeof this.layout.tooltip.show == \"object\"){\n        show_directive = this.layout.tooltip.show;\n    }\n\n    var hide_directive = {};\n    if (typeof this.layout.tooltip.hide == \"string\"){\n        hide_directive = { and: [ this.layout.tooltip.hide ] };\n    } else if (typeof this.layout.tooltip.hide == \"object\"){\n        hide_directive = this.layout.tooltip.hide;\n    }\n\n    var statuses = {};\n    LocusZoom.DataLayer.Statuses.adjectives.forEach(function(status){\n        var antistatus = \"un\" + status;\n        statuses[status] = this.state[this.state_id][status].indexOf(id) !== -1;\n        statuses[antistatus] = !statuses[status];\n    }.bind(this));\n\n    var show_resolved = resolveStatus(statuses, show_directive);\n    var hide_resolved = resolveStatus(statuses, hide_directive);\n\n    // Only show tooltip if the resolved logic explicitly shows and explicitly not hides the tool tip\n    // Otherwise ensure tooltip does not exist\n    if (show_resolved && !hide_resolved){\n        this.createTooltip(element);\n    } else {\n        this.destroyTooltip(element);\n    }\n\n    return this;\n    \n};\n\n/**\n * Find the elements (or indices) that match any of a set of provided filters\n * @protected\n * @param {Array[]} filters A list of filter entries: [field, value] (for equivalence testing) or\n *   [field, operator, value] for other operators\n * @param {('indexes'|'elements')} [return_type='indexes'] Specify whether to return either the indices of the matching\n *   elements, or references to the elements themselves\n * @returns {Array}\n */\nLocusZoom.DataLayer.prototype.filter = function(filters, return_type){\n    if (typeof return_type == \"undefined\" || [\"indexes\",\"elements\"].indexOf(return_type) === -1){\n        return_type = \"indexes\";\n    }\n    if (!Array.isArray(filters)){ return []; }\n    var test = function(element, filter){\n        var operators = {\n            \"=\": function(a,b){ return a === b; },\n            \"<\": function(a,b){ return a < b; },\n            \"<=\": function(a,b){ return a <= b; },\n            \">\": function(a,b){ return a > b; },\n            \">=\": function(a,b){ return a >= b; },\n            \"%\": function(a,b){ return a % b; }\n        };\n        if (!Array.isArray(filter)){ return false; }\n        if (filter.length === 2){\n            return element[filter[0]] === filter[1];\n        } else if (filter.length === 3 && operators[filter[1]]){\n            return operators[filter[1]](element[filter[0]], filter[2]);\n        } else {\n            return false;\n        }\n    };\n    var matches = [];\n    this.data.forEach(function(element, idx){\n        var match = true;\n        filters.forEach(function(filter){\n            if (!test(element, filter)){ match = false; }\n        });\n        if (match){ matches.push(return_type === \"indexes\" ? idx : element); }\n    });\n    return matches;\n};\n\n/**\n * @param filters\n * @returns {Array}\n */\nLocusZoom.DataLayer.prototype.filterIndexes = function(filters){ return this.filter(filters, \"indexes\"); };\n/**\n * @param filters\n * @returns {Array}\n */\nLocusZoom.DataLayer.prototype.filterElements = function(filters){ return this.filter(filters, \"elements\"); };\n\nLocusZoom.DataLayer.Statuses.verbs.forEach(function(verb, idx){\n    var adjective = LocusZoom.DataLayer.Statuses.adjectives[idx];\n    var antiverb = \"un\" + verb;\n    // Set/unset a single element's status\n    // TODO: Improve documentation for dynamically generated methods/properties\n    LocusZoom.DataLayer.prototype[verb + \"Element\"] = function(element, exclusive){\n        if (typeof exclusive == \"undefined\"){ exclusive = false; } else { exclusive = !!exclusive; }\n        this.setElementStatus(adjective, element, true, exclusive);\n        return this;\n    };\n    LocusZoom.DataLayer.prototype[antiverb + \"Element\"] = function(element, exclusive){\n        if (typeof exclusive == \"undefined\"){ exclusive = false; } else { exclusive = !!exclusive; }\n        this.setElementStatus(adjective, element, false, exclusive);\n        return this;\n    };\n    // Set/unset status for arbitrarily many elements given a set of filters\n    LocusZoom.DataLayer.prototype[verb + \"ElementsByFilters\"] = function(filters, exclusive){\n        if (typeof exclusive == \"undefined\"){ exclusive = false; } else { exclusive = !!exclusive; }\n        return this.setElementStatusByFilters(adjective, true, filters, exclusive);\n    };\n    LocusZoom.DataLayer.prototype[antiverb + \"ElementsByFilters\"] = function(filters, exclusive){\n        if (typeof exclusive == \"undefined\"){ exclusive = false; } else { exclusive = !!exclusive; }\n        return this.setElementStatusByFilters(adjective, false, filters, exclusive);\n    };\n    // Set/unset status for all elements\n    LocusZoom.DataLayer.prototype[verb + \"AllElements\"] = function(){\n        this.setAllElementStatus(adjective, true);\n        return this;\n    };\n    LocusZoom.DataLayer.prototype[antiverb + \"AllElements\"] = function(){\n        this.setAllElementStatus(adjective, false);\n        return this;\n    };\n});\n\n/**\n * Toggle a status (e.g. highlighted, selected, identified) on an element\n * @param {String} status\n * @param {String|Object} element\n * @param {Boolean} toggle\n * @param {Boolean} exclusive\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.setElementStatus = function(status, element, toggle, exclusive){\n    \n    // Sanity checks\n    if (typeof status == \"undefined\" || LocusZoom.DataLayer.Statuses.adjectives.indexOf(status) === -1){\n        throw(\"Invalid status passed to DataLayer.setElementStatus()\");\n    }\n    if (typeof element == \"undefined\"){\n        throw(\"Invalid element passed to DataLayer.setElementStatus()\");\n    }\n    if (typeof toggle == \"undefined\"){\n        toggle = true;\n    }\n\n    // Get an ID for the element or return having changed nothing\n    try {\n        var element_id = this.getElementId(element);\n    } catch (get_element_id_error){\n        return this;\n    }\n\n    // Enforce exclusivity (force all elements to have the opposite of toggle first)\n    if (exclusive){\n        this.setAllElementStatus(status, !toggle);\n    }\n    \n    // Set/unset the proper status class on the appropriate DOM element(s)\n    d3.select(\"#\" + element_id).classed(\"lz-data_layer-\" + this.layout.type + \"-\" + status, toggle);\n    var element_status_node_id = this.getElementStatusNodeId(element);\n    if (element_status_node_id !== null){\n        d3.select(\"#\" + element_status_node_id).classed(\"lz-data_layer-\" + this.layout.type + \"-statusnode-\" + status, toggle);\n    }\n    \n    // Track element ID in the proper status state array\n    var element_status_idx = this.state[this.state_id][status].indexOf(element_id);\n    if (toggle && element_status_idx === -1){\n        this.state[this.state_id][status].push(element_id);\n    }\n    if (!toggle && element_status_idx !== -1){\n        this.state[this.state_id][status].splice(element_status_idx, 1);\n    }\n    \n    // Trigger tool tip show/hide logic\n    this.showOrHideTooltip(element);\n\n    // Trigger layout changed event hook\n    this.parent.emit(\"layout_changed\");\n    this.parent_plot.emit(\"layout_changed\");\n\n    return this;\n    \n};\n\n/**\n * Toggle a status on elements in the data layer based on a set of filters\n * @param {String} status\n * @param {Boolean} toggle\n * @param {Array} filters\n * @param {Boolean} exclusive\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.setElementStatusByFilters = function(status, toggle, filters, exclusive){\n    \n    // Sanity check\n    if (typeof status == \"undefined\" || LocusZoom.DataLayer.Statuses.adjectives.indexOf(status) === -1){\n        throw(\"Invalid status passed to DataLayer.setElementStatusByFilters()\");\n    }\n    if (typeof this.state[this.state_id][status] == \"undefined\"){ return this; }\n    if (typeof toggle == \"undefined\"){ toggle = true; } else { toggle = !!toggle; }\n    if (typeof exclusive == \"undefined\"){ exclusive = false; } else { exclusive = !!exclusive; }\n    if (!Array.isArray(filters)){ filters = []; }\n\n    // Enforce exclusivity (force all elements to have the opposite of toggle first)\n    if (exclusive){\n        this.setAllElementStatus(status, !toggle);\n    }\n    \n    // Apply statuses\n    this.filterElements(filters).forEach(function(element){\n        this.setElementStatus(status, element, toggle);\n    }.bind(this));\n    \n    return this;\n};\n\n/**\n * Toggle a status on all elements in the data layer\n * @param {String} status\n * @param {Boolean} toggle\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.setAllElementStatus = function(status, toggle){\n    \n    // Sanity check\n    if (typeof status == \"undefined\" || LocusZoom.DataLayer.Statuses.adjectives.indexOf(status) === -1){\n        throw(\"Invalid status passed to DataLayer.setAllElementStatus()\");\n    }\n    if (typeof this.state[this.state_id][status] == \"undefined\"){ return this; }\n    if (typeof toggle == \"undefined\"){ toggle = true; }\n\n    // Apply statuses\n    if (toggle){\n        this.data.forEach(function(element){\n            this.setElementStatus(status, element, true);\n        }.bind(this));\n    } else {\n        var status_ids = this.state[this.state_id][status].slice();\n        status_ids.forEach(function(id){\n            var element = this.getElementById(id);\n            if (typeof element == \"object\" && element !== null){\n                this.setElementStatus(status, element, false);\n            }\n        }.bind(this));\n        this.state[this.state_id][status] = [];\n    }\n\n    // Update global status flag\n    this.global_statuses[status] = toggle;\n\n    return this;\n};\n\n/**\n * Apply all layout-defined behaviors to a selection of elements with event handlers\n * @param {d3.selection} selection\n */\nLocusZoom.DataLayer.prototype.applyBehaviors = function(selection){\n    if (typeof this.layout.behaviors != \"object\"){ return; }\n    Object.keys(this.layout.behaviors).forEach(function(directive){\n        var event_match = /(click|mouseover|mouseout)/.exec(directive);\n        if (!event_match){ return; }\n        selection.on(event_match[0] + \".\" + directive, this.executeBehaviors(directive, this.layout.behaviors[directive]));\n    }.bind(this));\n};\n\n/**\n * Generate a function that executes an arbitrary list of behaviors on an element during an event\n * @param {String} directive The name of the event, as described in layout.behaviors for this datalayer\n * @param {Object} behaviors An object describing the behavior to attach to this single element\n * @param {string} behaviors.action The name of the action that would trigger this behavior (eg click, mouseover, etc)\n * @param {string} behaviors.status What status to apply to the element when this behavior is triggered (highlighted,\n *  selected, etc)\n * @param {string} [behaviors.exclusive] Whether triggering the event for this element should unset the relevant status\n *   for all other elements. Useful for, eg, click events that exclusively highlight one thing.\n * @returns {function(this:LocusZoom.DataLayer)} Return a function that handles the event in context with the behavior\n *   and the element- can be attached as an event listener\n */\nLocusZoom.DataLayer.prototype.executeBehaviors = function(directive, behaviors) {\n\n    // Determine the required state of control and shift keys during the event\n    var requiredKeyStates = {\n        \"ctrl\": (directive.indexOf(\"ctrl\") !== -1),\n        \"shift\": (directive.indexOf(\"shift\") !== -1)\n    };\n\n    return function(element){\n\n        // Do nothing if the required control and shift key presses (or lack thereof) doesn't match the event\n        if (requiredKeyStates.ctrl !== !!d3.event.ctrlKey || requiredKeyStates.shift !== !!d3.event.shiftKey){ return; }\n\n        // Loop through behaviors making each one go in succession\n        behaviors.forEach(function(behavior){\n            \n            // Route first by the action, if defined\n            if (typeof behavior != \"object\" || behavior === null){ return; }\n            \n            switch (behavior.action){\n                \n            // Set a status (set to true regardless of current status, optionally with exclusivity)\n            case \"set\":\n                this.setElementStatus(behavior.status, element, true, behavior.exclusive);\n                break;\n                \n            // Unset a status (set to false regardless of current status, optionally with exclusivity)\n            case \"unset\":\n                this.setElementStatus(behavior.status, element, false, behavior.exclusive);\n                break;\n                \n            // Toggle a status\n            case \"toggle\":\n                var current_status_boolean = (this.state[this.state_id][behavior.status].indexOf(this.getElementId(element)) !== -1);\n                var exclusive = behavior.exclusive && !current_status_boolean;\n                this.setElementStatus(behavior.status, element, !current_status_boolean, exclusive);\n                break;\n                \n            // Link to a dynamic URL\n            case \"link\":\n                if (typeof behavior.href == \"string\"){\n                    var url = LocusZoom.parseFields(element, behavior.href);\n                    if (typeof behavior.target == \"string\"){\n                        window.open(url, behavior.target);\n                    } else {\n                        window.location.href = url;\n                    }\n                }\n                break;\n                \n            // Action not defined, just return\n            default:\n                break;\n                \n            }\n            \n            return;\n            \n        }.bind(this));\n\n    }.bind(this);\n\n};\n\n/**\n * Get an object with the x and y coordinates of the panel's origin in terms of the entire page\n *   Necessary for positioning any HTML elements over the panel\n * @returns {{x: Number, y: Number}}\n */\nLocusZoom.DataLayer.prototype.getPageOrigin = function(){\n    var panel_origin = this.parent.getPageOrigin();\n    return {\n        x: panel_origin.x + this.parent.layout.margin.left,\n        y: panel_origin.y + this.parent.layout.margin.top\n    };\n};\n\n/**\n * Get a data layer's current underlying data in a standard format (e.g. JSON or CSV)\n * @param {('csv'|'tsv'|'json')} format How to export the data\n * @returns {*}\n */\nLocusZoom.DataLayer.prototype.exportData = function(format){\n    var default_format = \"json\";\n    format = format || default_format;\n    format = (typeof format == \"string\" ? format.toLowerCase() : default_format);\n    if ([\"json\",\"csv\",\"tsv\"].indexOf(format) === -1){ format = default_format; }\n    var ret;\n    switch (format){\n    case \"json\":\n        try {\n            ret = JSON.stringify(this.data);\n        } catch (e){\n            ret = null;\n            console.error(\"Unable to export JSON data from data layer: \" + this.getBaseId() + \";\", e);\n        }\n        break;\n    case \"tsv\":\n    case \"csv\":\n        try {\n            var jsonified = JSON.parse(JSON.stringify(this.data));\n            if (typeof jsonified != \"object\"){\n                ret = jsonified.toString();\n            } else if (!Array.isArray(jsonified)){\n                ret = \"Object\";\n            } else {\n                var delimiter = (format === \"tsv\") ? \"\\t\" : \",\";\n                var header = this.layout.fields.map(function(header){\n                    return JSON.stringify(header);\n                }).join(delimiter) + \"\\n\";\n                ret = header + jsonified.map(function(record){\n                    return this.layout.fields.map(function(field){\n                        if (typeof record[field] == \"undefined\"){\n                            return JSON.stringify(null);\n                        } else if (typeof record[field] == \"object\" && record[field] !== null){\n                            return Array.isArray(record[field]) ? \"\\\"[Array(\" + record[field].length + \")]\\\"\" : \"\\\"[Object]\\\"\";\n                        } else {\n                            return JSON.stringify(record[field]);\n                        }\n                    }).join(delimiter);\n                }.bind(this)).join(\"\\n\");\n            }\n        } catch (e){\n            ret = null;\n            console.error(\"Unable to export CSV data from data layer: \" + this.getBaseId() + \";\", e);\n        }\n        break;\n    }\n    return ret;\n};\n\n/**\n * Position the datalayer and all tooltips\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.draw = function(){\n    this.svg.container.attr(\"transform\", \"translate(\" + this.parent.layout.cliparea.origin.x +  \",\" + this.parent.layout.cliparea.origin.y + \")\");\n    this.svg.clipRect\n        .attr(\"width\", this.parent.layout.cliparea.width)\n        .attr(\"height\", this.parent.layout.cliparea.height);\n    this.positionAllTooltips();\n    return this;\n};\n\n\n/**\n * Re-Map a data layer to reflect changes in the state of a plot (such as viewing region/ chromosome range)\n * @return {Promise}\n */\nLocusZoom.DataLayer.prototype.reMap = function(){\n\n    this.destroyAllTooltips(); // hack - only non-visible tooltips should be destroyed\n    // and then recreated if returning to visibility\n\n    // Fetch new data\n    var promise = this.parent_plot.lzd.getData(this.state, this.layout.fields); //,\"ld:best\"\n    promise.then(function(new_data){\n        this.data = new_data.body;\n        this.applyDataMethods();\n        this.initialized = true;\n    }.bind(this));\n\n    return promise;\n\n};\n\n\n/**\n * The central registry of known data layer definitions (which may be stored in separate files due to length)\n * @namespace\n */\nLocusZoom.DataLayers = (function() {\n    var obj = {};\n    var datalayers = {};\n    /**\n     * @name LocusZoom.DataLayers.get\n     * @param {String} name The name of the datalayer\n     * @param {Object} layout The configuration object for this data layer\n     * @param {LocusZoom.DataLayer|LocusZoom.Panel} parent Where this layout is used\n     * @returns {LocusZoom.DataLayer}\n     */\n    obj.get = function(name, layout, parent) {\n        if (!name) {\n            return null;\n        } else if (datalayers[name]) {\n            if (typeof layout != \"object\"){\n                throw(\"invalid layout argument for data layer [\" + name + \"]\");\n            } else {\n                return new datalayers[name](layout, parent);\n            }\n        } else {\n            throw(\"data layer [\" + name + \"] not found\");\n        }\n    };\n\n    /**\n     * @name LocusZoom.DataLayers.set\n     * @protected\n     * @param {String} name\n     * @param {Function} datalayer Constructor for the datalayer\n     */\n    obj.set = function(name, datalayer) {\n        if (datalayer) {\n            if (typeof datalayer != \"function\"){\n                throw(\"unable to set data layer [\" + name + \"], argument provided is not a function\");\n            } else {\n                datalayers[name] = datalayer;\n                datalayers[name].prototype = new LocusZoom.DataLayer();\n            }\n        } else {\n            delete datalayers[name];\n        }\n    };\n\n    /**\n     * Add a new type of datalayer to the registry of known layer types\n     * @name LocusZoom.DataLayers.add\n     * @param {String} name The name of the data layer to register\n     * @param {Function} datalayer\n     */\n    obj.add = function(name, datalayer) {\n        if (datalayers[name]) {\n            throw(\"data layer already exists with name: \" + name);\n        } else {\n            obj.set(name, datalayer);\n        }\n    };\n\n    /**\n     * Register a new datalayer that inherits and extends basic behaviors from a known datalayer\n     * @param {String} parent_name The name of the parent data layer whose behavior is to be extended\n     * @param {String} name The name of the new datalayer to register\n     * @param {Object} [overrides] Object of properties and methods to combine with the prototype of the parent datalayer\n     * @returns {Function} The constructor for the new child class\n     */\n    obj.extend = function(parent_name, name, overrides) {\n        // TODO: Consider exposing additional constructor argument, if there is a use case for very granular extension\n        overrides = overrides || {};\n\n        var parent = datalayers[parent_name];\n        if (!parent) {\n            throw \"Attempted to subclass an unknown or unregistered datalayer type\";\n        }\n        if (typeof overrides !== \"object\") {\n            throw \"Must specify an object of properties and methods\";\n        }\n        var child = LocusZoom.subclass(parent, overrides);\n        // Bypass .set() because we want a layer of inheritance below `DataLayer`\n        datalayers[name] = child;\n        return child;\n    };\n\n    /**\n     * List the names of all known datalayers\n     * @name LocusZoom.DataLayers.list\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return Object.keys(datalayers);\n    };\n\n    return obj;\n})();\n","\"use strict\";\n\n/**\n * Create a single continuous 2D track that provides information about each datapoint\n *\n * For example, this can be used to color by membership in a group, alongside information in other panels\n *\n * @class LocusZoom.DataLayers.annotation_track\n * @augments LocusZoom.DataLayer\n * @param {Object} layout\n * @param {Object|String} [layout.color]\n * @param {Array[]} An array of filter entries specifying which points to draw annotations for.\n *  See `LocusZoom.DataLayer.filter` for details\n */\nLocusZoom.DataLayers.add(\"annotation_track\", function(layout) {\n    // In the future we may add additional options for controlling marker size/ shape, based on user feedback\n    this.DefaultLayout = {\n        color: \"#000000\",\n        filters: []\n    };\n\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    if (!Array.isArray(layout.filters)) {\n        throw \"Annotation track must specify array of filters for selecting points to annotate\";\n    }\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    this.render = function() {\n        var self = this;\n        // Only render points that currently satisfy all provided filter conditions.\n        var trackData = this.filter(this.layout.filters, \"elements\");\n\n        var selection = this.svg.group\n            .selectAll(\"rect.lz-data_layer-\" + self.layout.type)\n            .data(trackData, function(d) { return d[self.layout.id_field]; });\n\n        // Add new elements as needed\n        selection.enter()\n            .append(\"rect\")\n            .attr(\"class\", \"lz-data_layer-\" + this.layout.type)\n            .attr(\"id\", function (d){ return self.getElementId(d); });\n        // Update the set of elements to reflect new data\n        selection\n            .attr(\"x\", function (d) { return self.parent[\"x_scale\"](d[self.layout.x_axis.field]); })\n            .attr(\"width\", 1)  // TODO autocalc width of track? Based on datarange / pixel width presumably\n            .attr(\"height\", self.parent.layout.height)\n            .attr(\"fill\", function(d){ return self.resolveScalableParameter(self.layout.color, d); });\n        // Remove unused elements\n        selection.exit().remove();\n\n        // Set up tooltips and mouse interaction\n        this.applyBehaviors(selection);\n    };\n\n    // Reimplement the positionTooltip() method to be annotation-specific\n    this.positionTooltip = function(id) {\n        if (typeof id != \"string\") {\n            throw (\"Unable to position tooltip: id is not a string\");\n        }\n        if (!this.tooltips[id]) {\n            throw (\"Unable to position tooltip: id does not point to a valid tooltip\");\n        }\n        var top, left, arrow_type, arrow_top, arrow_left;\n        var tooltip = this.tooltips[id];\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var offset = stroke_width / 2;\n        var page_origin = this.getPageOrigin();\n\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n\n        var x_center = this.parent.x_scale(tooltip.data[this.layout.x_axis.field]);\n        var y_center = data_layer_height / 2;\n\n        // Tooltip should be horizontally centered above the point to be annotated. (or below if space is limited)\n        var offset_right = Math.max((tooltip_box.width / 2) - x_center, 0);\n        var offset_left = Math.max((tooltip_box.width / 2) + x_center - data_layer_width, 0);\n        left = page_origin.x + x_center - (tooltip_box.width / 2) - offset_left + offset_right;\n        arrow_left = (tooltip_box.width / 2) - (arrow_width) + offset_left - offset_right - offset;\n        if (tooltip_box.height + stroke_width + arrow_width > data_layer_height - y_center) {\n            top = page_origin.y + y_center - (tooltip_box.height + stroke_width + arrow_width);\n            arrow_type = \"down\";\n            arrow_top = tooltip_box.height - stroke_width;\n        } else {\n            top = page_origin.y + y_center + stroke_width + arrow_width;\n            arrow_type = \"up\";\n            arrow_top = 0 - stroke_width - arrow_width;\n        }\n        // Apply positions to the main div\n        tooltip.selector.style(\"left\", left + \"px\").style(\"top\", top + \"px\");\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow) {\n            tooltip.arrow = tooltip.selector.append(\"div\").style(\"position\", \"absolute\");\n        }\n        tooltip.arrow\n            .attr(\"class\", \"lz-data_layer-tooltip-arrow_\" + arrow_type)\n            .style(\"left\", arrow_left + \"px\")\n            .style(\"top\", arrow_top + \"px\");\n    };\n\n    return this;\n});\n","\"use strict\";\n\n/*********************\n  Forest Data Layer\n  Implements a standard forest plot\n*/\n\nLocusZoom.DataLayers.add(\"forest\", function(layout){\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        point_size: 40,\n        point_shape: \"square\",\n        color: \"#888888\",\n        fill_opacity: 1,\n        y_axis: {\n            axis: 2\n        },\n        id_field: \"id\",\n        confidence_intervals: {\n            start_field: \"ci_start\",\n            end_field: \"ci_end\"\n        },\n        show_no_significance_line: true\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    // Reimplement the positionTooltip() method to be forest-specific\n    this.positionTooltip = function(id){\n        if (typeof id != \"string\"){\n            throw (\"Unable to position tooltip: id is not a string\");\n        }\n        if (!this.tooltips[id]){\n            throw (\"Unable to position tooltip: id does not point to a valid tooltip\");\n        }\n        var tooltip = this.tooltips[id];\n        var point_size = this.resolveScalableParameter(this.layout.point_size, tooltip.data);\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var border_radius = 6; // as defined in the default stylesheet\n        var page_origin = this.getPageOrigin();\n        var x_center = this.parent.x_scale(tooltip.data[this.layout.x_axis.field]);\n        var y_scale  = \"y\"+this.layout.y_axis.axis+\"_scale\";\n        var y_center = this.parent[y_scale](tooltip.data[this.layout.y_axis.field]);\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        // Position horizontally on the left or the right depending on which side of the plot the point is on\n        var offset = Math.sqrt(point_size / Math.PI);\n        var left, arrow_type, arrow_left;\n        if (x_center <= this.parent.layout.width / 2){\n            left = page_origin.x + x_center + offset + arrow_width + stroke_width;\n            arrow_type = \"left\";\n            arrow_left = -1 * (arrow_width + stroke_width);\n        } else {\n            left = page_origin.x + x_center - tooltip_box.width - offset - arrow_width - stroke_width;\n            arrow_type = \"right\";\n            arrow_left = tooltip_box.width - stroke_width;\n        }\n        // Position vertically centered unless we're at the top or bottom of the plot\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var top, arrow_top;\n        if (y_center - (tooltip_box.height / 2) <= 0){ // Too close to the top, push it down\n            top = page_origin.y + y_center - (1.5 * arrow_width) - border_radius;\n            arrow_top = border_radius;\n        } else if (y_center + (tooltip_box.height / 2) >= data_layer_height){ // Too close to the bottom, pull it up\n            top = page_origin.y + y_center + arrow_width + border_radius - tooltip_box.height;\n            arrow_top = tooltip_box.height - (2 * arrow_width) - border_radius;\n        } else { // vertically centered\n            top = page_origin.y + y_center - (tooltip_box.height / 2);\n            arrow_top = (tooltip_box.height / 2) - arrow_width;\n        }        \n        // Apply positions to the main div\n        tooltip.selector.style(\"left\", left + \"px\").style(\"top\", top + \"px\");\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow){\n            tooltip.arrow = tooltip.selector.append(\"div\").style(\"position\", \"absolute\");\n        }\n        tooltip.arrow\n            .attr(\"class\", \"lz-data_layer-tooltip-arrow_\" + arrow_type)\n            .style(\"left\", arrow_left + \"px\")\n            .style(\"top\", arrow_top + \"px\");\n    };\n\n    // Implement the main render function\n    this.render = function(){\n\n        var x_scale = \"x_scale\";\n        var y_scale = \"y\"+this.layout.y_axis.axis+\"_scale\";\n\n        // Generate confidence interval paths if fields are defined\n        if (this.layout.confidence_intervals\n            && this.layout.fields.indexOf(this.layout.confidence_intervals.start_field) !== -1\n            && this.layout.fields.indexOf(this.layout.confidence_intervals.end_field) !== -1){\n            // Generate a selection for all forest plot confidence intervals\n            var ci_selection = this.svg.group\n                .selectAll(\"rect.lz-data_layer-forest.lz-data_layer-forest-ci\")\n                .data(this.data, function(d){ return d[this.layout.id_field]; }.bind(this));\n            // Create confidence interval rect elements\n            ci_selection.enter()\n                .append(\"rect\")\n                .attr(\"class\", \"lz-data_layer-forest lz-data_layer-forest-ci\")\n                .attr(\"id\", function(d){ return this.getElementId(d) + \"_ci\"; }.bind(this))\n                .attr(\"transform\", \"translate(0,\" + (isNaN(this.parent.layout.height) ? 0 : this.parent.layout.height) + \")\");\n            // Apply position and size parameters using transition if necessary\n            var ci_transform = function(d) {\n                var x = this.parent[x_scale](d[this.layout.confidence_intervals.start_field]);\n                var y = this.parent[y_scale](d[this.layout.y_axis.field]);\n                if (isNaN(x)){ x = -1000; }\n                if (isNaN(y)){ y = -1000; }\n                return \"translate(\" + x + \",\" + y + \")\";\n            }.bind(this);\n            var ci_width = function(d){\n                return this.parent[x_scale](d[this.layout.confidence_intervals.end_field])\n                     - this.parent[x_scale](d[this.layout.confidence_intervals.start_field]);\n            }.bind(this);\n            var ci_height = 1;\n            if (this.canTransition()){\n                ci_selection\n                    .transition()\n                    .duration(this.layout.transition.duration || 0)\n                    .ease(this.layout.transition.ease || \"cubic-in-out\")\n                    .attr(\"transform\", ci_transform)\n                    .attr(\"width\", ci_width).attr(\"height\", ci_height);\n            } else {\n                ci_selection\n                    .attr(\"transform\", ci_transform)\n                    .attr(\"width\", ci_width).attr(\"height\", ci_height);\n            }\n            // Remove old elements as needed\n            ci_selection.exit().remove();\n        }\n            \n        // Generate a selection for all forest plot points\n        var points_selection = this.svg.group\n            .selectAll(\"path.lz-data_layer-forest.lz-data_layer-forest-point\")\n            .data(this.data, function(d){ return d[this.layout.id_field]; }.bind(this));\n\n        // Create elements, apply class, ID, and initial position\n        var initial_y = isNaN(this.parent.layout.height) ? 0 : this.parent.layout.height;\n        points_selection.enter()\n            .append(\"path\")\n            .attr(\"class\", \"lz-data_layer-forest lz-data_layer-forest-point\")\n            .attr(\"id\", function(d){ return this.getElementId(d) + \"_point\"; }.bind(this))\n            .attr(\"transform\", \"translate(0,\" + initial_y + \")\");\n\n        // Generate new values (or functions for them) for position, color, size, and shape\n        var transform = function(d) {\n            var x = this.parent[x_scale](d[this.layout.x_axis.field]);\n            var y = this.parent[y_scale](d[this.layout.y_axis.field]);\n            if (isNaN(x)){ x = -1000; }\n            if (isNaN(y)){ y = -1000; }\n            return \"translate(\" + x + \",\" + y + \")\";\n        }.bind(this);\n\n        var fill = function(d){ return this.resolveScalableParameter(this.layout.color, d); }.bind(this);\n        var fill_opacity = function(d){ return this.resolveScalableParameter(this.layout.fill_opacity, d); }.bind(this);\n\n        var shape = d3.svg.symbol()\n            .size(function(d){ return this.resolveScalableParameter(this.layout.point_size, d); }.bind(this))\n            .type(function(d){ return this.resolveScalableParameter(this.layout.point_shape, d); }.bind(this));\n\n        // Apply position and color, using a transition if necessary\n        if (this.canTransition()){\n            points_selection\n                .transition()\n                .duration(this.layout.transition.duration || 0)\n                .ease(this.layout.transition.ease || \"cubic-in-out\")\n                .attr(\"transform\", transform)\n                .attr(\"fill\", fill)\n                .attr(\"fill-opacity\", fill_opacity)\n                .attr(\"d\", shape);\n        } else {\n            points_selection\n                .attr(\"transform\", transform)\n                .attr(\"fill\", fill)\n                .attr(\"fill-opacity\", fill_opacity)\n                .attr(\"d\", shape);\n        }\n\n        // Remove old elements as needed\n        points_selection.exit().remove();\n\n        // Apply default event emitters to selection\n        points_selection.on(\"click.event_emitter\", function(element){\n            this.parent.emit(\"element_clicked\", element);\n            this.parent_plot.emit(\"element_clicked\", element);\n        }.bind(this));\n       \n        // Apply behaviors to points\n        this.applyBehaviors(points_selection);\n        \n    };\n \n    return this;\n\n});\n","\"use strict\";\n\n/*********************\n * Genes Data Layer\n * Implements a data layer that will render gene tracks\n * @class\n * @augments LocusZoom.DataLayer\n*/\nLocusZoom.DataLayers.add(\"genes\", function(layout){\n    /**\n     * Define a default layout for this DataLayer type and merge it with the passed argument\n     * @protected\n     * @member {Object}\n     * */\n    this.DefaultLayout = {\n        label_font_size: 12,\n        label_exon_spacing: 4,\n        exon_height: 16,\n        bounding_box_padding: 6,\n        track_vertical_spacing: 10,\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    /**\n     * Generate a statusnode ID for a given element\n     * @override\n     * @returns {String}\n     */\n    this.getElementStatusNodeId = function(element){\n        return this.getElementId(element) + \"-statusnode\";\n    };\n\n    /**\n     * Helper function to sum layout values to derive total height for a single gene track\n     * @returns {number}\n     */\n    this.getTrackHeight = function(){\n        return 2 * this.layout.bounding_box_padding\n            + this.layout.label_font_size\n            + this.layout.label_exon_spacing\n            + this.layout.exon_height\n            + this.layout.track_vertical_spacing;\n    };\n\n    /**\n     * A gene may have arbitrarily many transcripts, but this data layer isn't set up to render them yet.\n     * Stash a transcript_idx to point to the first transcript and use that for all transcript refs.\n     * @member {number}\n     * @type {number}\n     */\n    this.transcript_idx = 0;\n\n    /**\n     * An internal counter for the number of tracks in the data layer. Used as an internal counter for looping\n     *   over positions / assignments\n     * @protected\n     * @member {number}\n     */\n    this.tracks = 1;\n\n    /**\n     * Store information about genes in dataset, in a hash indexed by track number: {track_number: [gene_indices]}\n     * @member {Object.<Number, Array>}\n     */\n    this.gene_track_index = { 1: [] };\n\n    /**\n     * Ensure that genes in overlapping chromosome regions are positioned so that parts of different genes do not\n     *   overlap in the view. A track is a row used to vertically separate overlapping genes.\n     * @returns {LocusZoom.DataLayer}\n     */\n    this.assignTracks = function(){\n        /**\n         * Function to get the width in pixels of a label given the text and layout attributes\n         *      TODO: Move to outer scope?\n         * @param {String} gene_name\n         * @param {number|string} font_size\n         * @returns {number}\n         */\n        this.getLabelWidth = function(gene_name, font_size){\n            try {\n                var temp_text = this.svg.group.append(\"text\")\n                    .attr(\"x\", 0).attr(\"y\", 0).attr(\"class\", \"lz-data_layer-genes lz-label\")\n                    .style(\"font-size\", font_size)\n                    .text(gene_name + \"→\");\n                var label_width = temp_text.node().getBBox().width;\n                temp_text.remove();\n                return label_width;\n            } catch (e){\n                return 0;\n            }\n        };\n\n        // Reinitialize some metadata\n        this.tracks = 1;\n        this.gene_track_index = { 1: [] };\n\n        this.data.map(function(d, g){\n\n            // If necessary, split combined gene id / version fields into discrete fields.\n            // NOTE: this may be an issue with CSG's genes data source that may eventually be solved upstream.\n            if (this.data[g].gene_id && this.data[g].gene_id.indexOf(\".\")){\n                var split = this.data[g].gene_id.split(\".\");\n                this.data[g].gene_id = split[0];\n                this.data[g].gene_version = split[1];\n            }\n\n            // Stash the transcript ID on the parent gene\n            this.data[g].transcript_id = this.data[g].transcripts[this.transcript_idx].transcript_id;\n\n            // Determine display range start and end, based on minimum allowable gene display width, bounded by what we can see\n            // (range: values in terms of pixels on the screen)\n            this.data[g].display_range = {\n                start: this.parent.x_scale(Math.max(d.start, this.state.start)),\n                end:   this.parent.x_scale(Math.min(d.end, this.state.end))\n            };\n            this.data[g].display_range.label_width = this.getLabelWidth(this.data[g].gene_name, this.layout.label_font_size);\n            this.data[g].display_range.width = this.data[g].display_range.end - this.data[g].display_range.start;\n            // Determine label text anchor (default to middle)\n            this.data[g].display_range.text_anchor = \"middle\";\n            if (this.data[g].display_range.width < this.data[g].display_range.label_width){\n                if (d.start < this.state.start){\n                    this.data[g].display_range.end = this.data[g].display_range.start\n                        + this.data[g].display_range.label_width\n                        + this.layout.label_font_size;\n                    this.data[g].display_range.text_anchor = \"start\";\n                } else if (d.end > this.state.end){\n                    this.data[g].display_range.start = this.data[g].display_range.end\n                        - this.data[g].display_range.label_width\n                        - this.layout.label_font_size;\n                    this.data[g].display_range.text_anchor = \"end\";\n                } else {\n                    var centered_margin = ((this.data[g].display_range.label_width - this.data[g].display_range.width) / 2)\n                        + this.layout.label_font_size;\n                    if ((this.data[g].display_range.start - centered_margin) < this.parent.x_scale(this.state.start)){\n                        this.data[g].display_range.start = this.parent.x_scale(this.state.start);\n                        this.data[g].display_range.end = this.data[g].display_range.start + this.data[g].display_range.label_width;\n                        this.data[g].display_range.text_anchor = \"start\";\n                    } else if ((this.data[g].display_range.end + centered_margin) > this.parent.x_scale(this.state.end)) {\n                        this.data[g].display_range.end = this.parent.x_scale(this.state.end);\n                        this.data[g].display_range.start = this.data[g].display_range.end - this.data[g].display_range.label_width;\n                        this.data[g].display_range.text_anchor = \"end\";\n                    } else {\n                        this.data[g].display_range.start -= centered_margin;\n                        this.data[g].display_range.end += centered_margin;\n                    }\n                }\n                this.data[g].display_range.width = this.data[g].display_range.end - this.data[g].display_range.start;\n            }\n            // Add bounding box padding to the calculated display range start, end, and width\n            this.data[g].display_range.start -= this.layout.bounding_box_padding;\n            this.data[g].display_range.end   += this.layout.bounding_box_padding;\n            this.data[g].display_range.width += 2 * this.layout.bounding_box_padding;\n            // Convert and stash display range values into domain values\n            // (domain: values in terms of the data set, e.g. megabases)\n            this.data[g].display_domain = {\n                start: this.parent.x_scale.invert(this.data[g].display_range.start),\n                end:   this.parent.x_scale.invert(this.data[g].display_range.end)\n            };\n            this.data[g].display_domain.width = this.data[g].display_domain.end - this.data[g].display_domain.start;\n\n            // Using display range/domain data generated above cast each gene to tracks such that none overlap\n            this.data[g].track = null;\n            var potential_track = 1;\n            while (this.data[g].track === null){\n                var collision_on_potential_track = false;\n                this.gene_track_index[potential_track].map(function(placed_gene){\n                    if (!collision_on_potential_track){\n                        var min_start = Math.min(placed_gene.display_range.start, this.display_range.start);\n                        var max_end = Math.max(placed_gene.display_range.end, this.display_range.end);\n                        if ((max_end - min_start) < (placed_gene.display_range.width + this.display_range.width)){\n                            collision_on_potential_track = true;\n                        }\n                    }\n                }.bind(this.data[g]));\n                if (!collision_on_potential_track){\n                    this.data[g].track = potential_track;\n                    this.gene_track_index[potential_track].push(this.data[g]);\n                } else {\n                    potential_track++;\n                    if (potential_track > this.tracks){\n                        this.tracks = potential_track;\n                        this.gene_track_index[potential_track] = [];\n                    }\n                }\n            }\n\n            // Stash parent references on all genes, trascripts, and exons\n            this.data[g].parent = this;\n            this.data[g].transcripts.map(function(d, t){\n                this.data[g].transcripts[t].parent = this.data[g];\n                this.data[g].transcripts[t].exons.map(function(d, e){\n                    this.data[g].transcripts[t].exons[e].parent = this.data[g].transcripts[t];\n                }.bind(this));\n            }.bind(this));\n\n        }.bind(this));\n        return this;\n    };\n\n    /**\n     * Main render function\n     */\n    this.render = function(){\n\n        this.assignTracks();\n\n        var width, height, x, y;\n\n        // Render gene groups\n        var selection = this.svg.group.selectAll(\"g.lz-data_layer-genes\")\n            .data(this.data, function(d){ return d.gene_name; });\n\n        selection.enter().append(\"g\")\n            .attr(\"class\", \"lz-data_layer-genes\");\n        \n        selection.attr(\"id\", function(d){ return this.getElementId(d); }.bind(this))\n            .each(function(gene){\n\n                var data_layer = gene.parent;\n\n                // Render gene bounding boxes (status nodes to show selected/highlighted)\n                var bboxes = d3.select(this).selectAll(\"rect.lz-data_layer-genes.lz-data_layer-genes-statusnode\")\n                    .data([gene], function(d){ return data_layer.getElementStatusNodeId(d); });\n\n                bboxes.enter().append(\"rect\")\n                    .attr(\"class\", \"lz-data_layer-genes lz-data_layer-genes-statusnode\");\n                \n                bboxes\n                    .attr(\"id\", function(d){\n                        return data_layer.getElementStatusNodeId(d);\n                    })\n                    .attr(\"rx\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .attr(\"ry\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    });\n\n                width = function(d){\n                    return d.display_range.width;\n                };\n                height = function(){\n                    return data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                };\n                x = function(d){\n                    return d.display_range.start;\n                };\n                y = function(d){\n                    return ((d.track-1) * data_layer.getTrackHeight());\n                };\n                if (data_layer.canTransition()){\n                    bboxes\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                } else {\n                    bboxes\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                }\n\n                bboxes.exit().remove();\n\n                // Render gene boundaries\n                var boundaries = d3.select(this).selectAll(\"rect.lz-data_layer-genes.lz-boundary\")\n                    .data([gene], function(d){ return d.gene_name + \"_boundary\"; });\n\n                boundaries.enter().append(\"rect\")\n                    .attr(\"class\", \"lz-data_layer-genes lz-boundary\");\n\n                width = function(d){\n                    return data_layer.parent.x_scale(d.end) - data_layer.parent.x_scale(d.start);\n                };\n                height = function(){\n                    return 1; // TODO: scale dynamically?\n                };\n                x = function(d){\n                    return data_layer.parent.x_scale(d.start);\n                };\n                y = function(d){\n                    return ((d.track-1) * data_layer.getTrackHeight())\n                        + data_layer.layout.bounding_box_padding\n                        + data_layer.layout.label_font_size\n                        + data_layer.layout.label_exon_spacing\n                        + (Math.max(data_layer.layout.exon_height, 3) / 2);\n                };\n                if (data_layer.canTransition()){\n                    boundaries\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                } else {\n                    boundaries\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                }\n                \n                boundaries.exit().remove();\n\n                // Render gene labels\n                var labels = d3.select(this).selectAll(\"text.lz-data_layer-genes.lz-label\")\n                    .data([gene], function(d){ return d.gene_name + \"_label\"; });\n\n                labels.enter().append(\"text\")\n                    .attr(\"class\", \"lz-data_layer-genes lz-label\");\n\n                labels\n                    .attr(\"text-anchor\", function(d){\n                        return d.display_range.text_anchor;\n                    })\n                    .text(function(d){\n                        return (d.strand === \"+\") ? d.gene_name + \"→\" : \"←\" + d.gene_name;\n                    })\n                    .style(\"font-size\", gene.parent.layout.label_font_size);\n\n                x = function(d){\n                    if (d.display_range.text_anchor === \"middle\"){\n                        return d.display_range.start + (d.display_range.width / 2);\n                    } else if (d.display_range.text_anchor === \"start\"){\n                        return d.display_range.start + data_layer.layout.bounding_box_padding;\n                    } else if (d.display_range.text_anchor === \"end\"){\n                        return d.display_range.end - data_layer.layout.bounding_box_padding;\n                    }\n                };\n                y = function(d){\n                    return ((d.track-1) * data_layer.getTrackHeight())\n                        + data_layer.layout.bounding_box_padding\n                        + data_layer.layout.label_font_size;\n                };\n                if (data_layer.canTransition()){\n                    labels\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"x\", x).attr(\"y\", y);\n                } else {\n                    labels\n                        .attr(\"x\", x).attr(\"y\", y);\n                }\n\n                labels.exit().remove();\n\n                // Render exon rects (first transcript only, for now)\n                var exons = d3.select(this).selectAll(\"rect.lz-data_layer-genes.lz-exon\")\n                    .data(gene.transcripts[gene.parent.transcript_idx].exons, function(d){ return d.exon_id; });\n                        \n                exons.enter().append(\"rect\")\n                    .attr(\"class\", \"lz-data_layer-genes lz-exon\");\n                        \n                width = function(d){\n                    return data_layer.parent.x_scale(d.end) - data_layer.parent.x_scale(d.start);\n                };\n                height = function(){\n                    return data_layer.layout.exon_height;\n                };\n                x = function(d){\n                    return data_layer.parent.x_scale(d.start);\n                };\n                y = function(){\n                    return ((gene.track-1) * data_layer.getTrackHeight())\n                        + data_layer.layout.bounding_box_padding\n                        + data_layer.layout.label_font_size\n                        + data_layer.layout.label_exon_spacing;\n                };\n                if (data_layer.canTransition()){\n                    exons\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                } else {\n                    exons\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                }\n\n                exons.exit().remove();\n\n                // Render gene click area\n                var clickareas = d3.select(this).selectAll(\"rect.lz-data_layer-genes.lz-clickarea\")\n                    .data([gene], function(d){ return d.gene_name + \"_clickarea\"; });\n\n                clickareas.enter().append(\"rect\")\n                    .attr(\"class\", \"lz-data_layer-genes lz-clickarea\");\n\n                clickareas\n                    .attr(\"id\", function(d){\n                        return data_layer.getElementId(d) + \"_clickarea\";\n                    })\n                    .attr(\"rx\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .attr(\"ry\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    });\n\n                width = function(d){\n                    return d.display_range.width;\n                };\n                height = function(){\n                    return data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                };\n                x = function(d){\n                    return d.display_range.start;\n                };\n                y = function(d){\n                    return ((d.track-1) * data_layer.getTrackHeight());\n                };\n                if (data_layer.canTransition()){\n                    clickareas\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                } else {\n                    clickareas\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                }\n\n                // Remove old clickareas as needed\n                clickareas.exit().remove();\n\n                // Apply default event emitters to clickareas\n                clickareas.on(\"click.event_emitter\", function(element){\n                    element.parent.parent.emit(\"element_clicked\", element);\n                    element.parent.parent_plot.emit(\"element_clicked\", element);\n                });\n\n                // Apply mouse behaviors to clickareas\n                data_layer.applyBehaviors(clickareas);\n\n            });\n\n        // Remove old elements as needed\n        selection.exit().remove();\n\n    };\n\n    /**\n     * Reimplement the positionTooltip() method to be gene-specific\n     * @param {String} id\n     */\n    this.positionTooltip = function(id){\n        if (typeof id != \"string\"){\n            throw (\"Unable to position tooltip: id is not a string\");\n        }\n        if (!this.tooltips[id]){\n            throw (\"Unable to position tooltip: id does not point to a valid tooltip\");\n        }\n        var tooltip = this.tooltips[id];\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var page_origin = this.getPageOrigin();\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var gene_bbox_id = this.getElementStatusNodeId(tooltip.data);\n        var gene_bbox = d3.select(\"#\" + gene_bbox_id).node().getBBox();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n        // Position horizontally: attempt to center on the portion of the gene that's visible,\n        // pad to either side if bumping up against the edge of the data layer\n        var gene_center_x = ((tooltip.data.display_range.start + tooltip.data.display_range.end) / 2) - (this.layout.bounding_box_padding / 2);\n        var offset_right = Math.max((tooltip_box.width / 2) - gene_center_x, 0);\n        var offset_left = Math.max((tooltip_box.width / 2) + gene_center_x - data_layer_width, 0);\n        var left = page_origin.x + gene_center_x - (tooltip_box.width / 2) - offset_left + offset_right;\n        var arrow_left = (tooltip_box.width / 2) - (arrow_width / 2) + offset_left - offset_right;\n        // Position vertically below the gene unless there's insufficient space\n        var top, arrow_type, arrow_top;\n        if (tooltip_box.height + stroke_width + arrow_width > data_layer_height - (gene_bbox.y + gene_bbox.height)){\n            top = page_origin.y + gene_bbox.y - (tooltip_box.height + stroke_width + arrow_width);\n            arrow_type = \"down\";\n            arrow_top = tooltip_box.height - stroke_width;\n        } else {\n            top = page_origin.y + gene_bbox.y + gene_bbox.height + stroke_width + arrow_width;\n            arrow_type = \"up\";\n            arrow_top = 0 - stroke_width - arrow_width;\n        }\n        // Apply positions to the main div\n        tooltip.selector.style(\"left\", left + \"px\").style(\"top\", top + \"px\");\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow){\n            tooltip.arrow = tooltip.selector.append(\"div\").style(\"position\", \"absolute\");\n        }\n        tooltip.arrow\n            .attr(\"class\", \"lz-data_layer-tooltip-arrow_\" + arrow_type)\n            .style(\"left\", arrow_left + \"px\")\n            .style(\"top\", arrow_top + \"px\");\n    };\n       \n    return this;\n\n});\n","\"use strict\";\n\n/*********************\n  Genome Legend Data Layer\n  Implements a data layer that will render a genome legend\n*/\n\n// Build a custom data layer for a genome legend\nLocusZoom.DataLayers.add(\"genome_legend\", function(layout){\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        chromosome_fill_colors: {\n            light: \"rgb(155, 155, 188)\",\n            dark: \"rgb(95, 95, 128)\"\n        },\n        chromosome_label_colors: {\n            light: \"rgb(120, 120, 186)\",\n            dark: \"rgb(0, 0, 66)\"\n        }\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    // Implement the main render function\n    this.render = function(){\n\n        // Iterate over data to generate genome-wide start/end values for each chromosome\n        var position = 0;\n        this.data.forEach(function(d, i){\n            this.data[i].genome_start = position;\n            this.data[i].genome_end = position + d[\"genome:base_pairs\"];\n            position += d[\"genome:base_pairs\"];\n        }.bind(this));\n\n        var chromosomes = this.svg.group\n            .selectAll(\"rect.lz-data_layer-genome_legend\")\n            .data(this.data, function(d){ return d[\"genome:chr\"]; });\n\n        // Create chromosome elements, apply class\n        chromosomes.enter()\n            .append(\"rect\")\n            .attr(\"class\", \"lz-data_layer-genome_legend\");\n\n        // Position and fill chromosome rects\n        var data_layer = this;\n        var panel = this.parent;\n\n        chromosomes\n            .attr(\"fill\", function(d){ return (d[\"genome:chr\"] % 2 ? data_layer.layout.chromosome_fill_colors.light : data_layer.layout.chromosome_fill_colors.dark); })\n            .attr(\"x\", function(d){ return panel.x_scale(d.genome_start); })\n            .attr(\"y\", 0)\n            .attr(\"width\", function(d){ return panel.x_scale(d[\"genome:base_pairs\"]); })\n            .attr(\"height\", panel.layout.cliparea.height);\n\n        // Remove old elements as needed\n        chromosomes.exit().remove();\n\n        // Parse current state variant into a position\n        // Assumes that variant string is of the format 10:123352136_C/T or 10:123352136\n        var variant_parts = /([^:]+):(\\d+)(?:_.*)?/.exec(this.state.variant);\n        if (!variant_parts) {\n            throw(\"Genome legend cannot understand the specified variant position\");\n        }\n        var chr = variant_parts[1];\n        var offset = variant_parts[2];\n        // TODO: How does this handle representation of X or Y chromosomes?\n        position = +this.data[chr-1].genome_start + +offset;\n\n        // Render the position\n        var region = this.svg.group\n            .selectAll(\"rect.lz-data_layer-genome_legend-marker\")\n            .data([{ start: position, end: position + 1 }]);\n\n        region.enter()\n            .append(\"rect\")\n            .attr(\"class\", \"lz-data_layer-genome_legend-marker\");\n\n        region\n            .transition()\n            .duration(500)\n            .style({\n                \"fill\": \"rgba(255, 250, 50, 0.8)\",\n                \"stroke\": \"rgba(255, 250, 50, 0.8)\",\n                \"stroke-width\": \"3px\"\n            })\n            .attr(\"x\", function(d){ return panel.x_scale(d.start); })\n            .attr(\"y\", 0)\n            .attr(\"width\", function(d){ return panel.x_scale(d.end - d.start); })\n            .attr(\"height\", panel.layout.cliparea.height);\n\n        region.exit().remove();\n        \n    };\n       \n    return this;\n\n});\n","\"use strict\";\n\n/**\n * Intervals Data Layer\n * Implements a data layer that will render interval annotation tracks (intervals must provide start and end values)\n * @class LocusZoom.DataLayers.intervals\n * @augments LocusZoom.DataLayer\n */\nLocusZoom.DataLayers.add(\"intervals\", function(layout){\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        start_field: \"start\",\n        end_field: \"end\",\n        track_split_field: \"state_id\",\n        track_split_order: \"DESC\",\n        track_split_legend_to_y_axis: 2,\n        split_tracks: true,\n        track_height: 15,\n        track_vertical_spacing: 3,\n        bounding_box_padding: 2,\n        always_hide_legend: false,\n        color: \"#B8B8B8\",\n        fill_opacity: 1\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n    \n    /**\n     * To define shared highlighting on the track split field define the status node id override\n     * to generate an ID common to the track when we're actively splitting data out to separate tracks\n     * @override\n     * @returns {String}\n     */\n    this.getElementStatusNodeId = function(element){\n        if (this.layout.split_tracks){\n            return (this.getBaseId() + \"-statusnode-\" + element[this.layout.track_split_field]).replace(/[:.[\\],]/g, \"_\");\n        }\n        return this.getElementId(element) + \"-statusnode\";\n    }.bind(this);\n    \n    // Helper function to sum layout values to derive total height for a single interval track\n    this.getTrackHeight = function(){\n        return this.layout.track_height\n            + this.layout.track_vertical_spacing\n            + (2 * this.layout.bounding_box_padding);\n    };\n\n    this.tracks = 1;\n    this.previous_tracks = 1;\n    \n    // track-number-indexed object with arrays of interval indexes in the dataset\n    this.interval_track_index = { 1: [] };\n\n    // After we've loaded interval data interpret it to assign\n    // each to a track so that they do not overlap in the view\n    this.assignTracks = function(){\n\n        // Reinitialize some metadata\n        this.previous_tracks = this.tracks;\n        this.tracks = 0;\n        this.interval_track_index = { 1: [] };\n        this.track_split_field_index = {};\n        \n        // If splitting tracks by a field's value then do a first pass determine\n        // a value/track mapping that preserves the order of possible values\n        if (this.layout.track_split_field && this.layout.split_tracks){\n            this.data.map(function(d){\n                this.track_split_field_index[d[this.layout.track_split_field]] = null;\n            }.bind(this));\n            var index = Object.keys(this.track_split_field_index);\n            if (this.layout.track_split_order === \"DESC\"){ index.reverse(); }\n            index.forEach(function(val){\n                this.track_split_field_index[val] = this.tracks + 1;\n                this.interval_track_index[this.tracks + 1] = [];\n                this.tracks++;\n            }.bind(this));\n        }\n\n        this.data.map(function(d, i){\n\n            // Stash a parent reference on the interval\n            this.data[i].parent = this;\n\n            // Determine display range start and end, based on minimum allowable interval display width,\n            // bounded by what we can see (range: values in terms of pixels on the screen)\n            this.data[i].display_range = {\n                start: this.parent.x_scale(Math.max(d[this.layout.start_field], this.state.start)),\n                end:   this.parent.x_scale(Math.min(d[this.layout.end_field], this.state.end))\n            };\n            this.data[i].display_range.width = this.data[i].display_range.end - this.data[i].display_range.start;\n            \n            // Convert and stash display range values into domain values\n            // (domain: values in terms of the data set, e.g. megabases)\n            this.data[i].display_domain = {\n                start: this.parent.x_scale.invert(this.data[i].display_range.start),\n                end:   this.parent.x_scale.invert(this.data[i].display_range.end)\n            };\n            this.data[i].display_domain.width = this.data[i].display_domain.end - this.data[i].display_domain.start;\n\n            // If splitting to tracks based on the value of the designated track split field\n            // then don't bother with collision detection (intervals will be grouped on tracks\n            // solely by the value of track_split_field)\n            if (this.layout.track_split_field && this.layout.split_tracks){\n                var val = this.data[i][this.layout.track_split_field];\n                this.data[i].track = this.track_split_field_index[val];\n                this.interval_track_index[this.data[i].track].push(i);\n            } else {\n                // If not splitting to tracks based on a field value then do so based on collision\n                // detection (as how it's done for genes). Use display range/domain data generated\n                // above and cast each interval to tracks such that none overlap\n                this.tracks = 1;\n                this.data[i].track = null;\n                var potential_track = 1;\n                while (this.data[i].track === null){\n                    var collision_on_potential_track = false;\n                    this.interval_track_index[potential_track].map(function(placed_interval){\n                        if (!collision_on_potential_track){\n                            var min_start = Math.min(placed_interval.display_range.start, this.display_range.start);\n                            var max_end = Math.max(placed_interval.display_range.end, this.display_range.end);\n                            if ((max_end - min_start) < (placed_interval.display_range.width + this.display_range.width)){\n                                collision_on_potential_track = true;\n                            }\n                        }\n                    }.bind(this.data[i]));\n                    if (!collision_on_potential_track){\n                        this.data[i].track = potential_track;\n                        this.interval_track_index[potential_track].push(this.data[i]);\n                    } else {\n                        potential_track++;\n                        if (potential_track > this.tracks){\n                            this.tracks = potential_track;\n                            this.interval_track_index[potential_track] = [];\n                        }\n                    }\n                }\n\n            }\n\n        }.bind(this));\n\n        return this;\n    };\n\n    // Implement the main render function\n    this.render = function(){\n\n        this.assignTracks();\n\n        // Remove any shared highlight nodes and re-render them if we're splitting on tracks\n        // At most there will only be dozen or so nodes here (one per track) and each time\n        // we render data we may have new tracks, so wiping/redrawing all is reasonable.\n        this.svg.group.selectAll(\".lz-data_layer-intervals-statusnode.lz-data_layer-intervals-shared\").remove();\n        Object.keys(this.track_split_field_index).forEach(function(key){\n            // Make a psuedo-element so that we can generate an id for the shared node\n            var psuedoElement = {};\n            psuedoElement[this.layout.track_split_field] = key;\n            // Insert the shared node\n            var sharedstatusnode_style = {display: (this.layout.split_tracks ? null : \"none\")};\n            this.svg.group.insert(\"rect\", \":first-child\")\n                .attr(\"id\", this.getElementStatusNodeId(psuedoElement))\n                .attr(\"class\", \"lz-data_layer-intervals lz-data_layer-intervals-statusnode lz-data_layer-intervals-shared\")\n                .attr(\"rx\", this.layout.bounding_box_padding).attr(\"ry\", this.layout.bounding_box_padding)\n                .attr(\"width\", this.parent.layout.cliparea.width)\n                .attr(\"height\", this.getTrackHeight() - this.layout.track_vertical_spacing)\n                .attr(\"x\", 0)\n                .attr(\"y\", (this.track_split_field_index[key]-1) * this.getTrackHeight())\n                .style(sharedstatusnode_style);\n        }.bind(this));\n\n        var width, height, x, y, fill, fill_opacity;\n            \n        // Render interval groups\n        var selection = this.svg.group.selectAll(\"g.lz-data_layer-intervals\")\n            .data(this.data, function(d){ return d[this.layout.id_field]; }.bind(this));\n\n        selection.enter().append(\"g\")\n            .attr(\"class\", \"lz-data_layer-intervals\");\n        \n        selection.attr(\"id\", function(d){ return this.getElementId(d); }.bind(this))\n            .each(function(interval){\n\n                var data_layer = interval.parent;\n\n                // Render interval status nodes (displayed behind intervals to show highlight\n                // without needing to modify interval display element(s))\n                var statusnode_style = {display: (data_layer.layout.split_tracks ? \"none\" : null)};\n                var statusnodes = d3.select(this).selectAll(\"rect.lz-data_layer-intervals.lz-data_layer-intervals-statusnode.lz-data_layer-intervals-statusnode-discrete\")\n                    .data([interval], function(d){ return data_layer.getElementId(d) + \"-statusnode\"; });\n                statusnodes.enter().insert(\"rect\", \":first-child\")\n                    .attr(\"class\", \"lz-data_layer-intervals lz-data_layer-intervals-statusnode lz-data_layer-intervals-statusnode-discrete\");\n                statusnodes\n                    .attr(\"id\", function(d){\n                        return data_layer.getElementId(d) + \"-statusnode\";\n                    })\n                    .attr(\"rx\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .attr(\"ry\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .style(statusnode_style);\n                width = function(d){\n                    return d.display_range.width + (2 * data_layer.layout.bounding_box_padding);\n                };\n                height = function(){\n                    return data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                };\n                x = function(d){\n                    return d.display_range.start - data_layer.layout.bounding_box_padding;\n                };\n                y = function(d){\n                    return ((d.track-1) * data_layer.getTrackHeight());\n                };\n                if (data_layer.canTransition()){\n                    statusnodes\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                } else {\n                    statusnodes\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                }\n                statusnodes.exit().remove();\n\n                // Render primary interval rects\n                var rects = d3.select(this).selectAll(\"rect.lz-data_layer-intervals.lz-interval_rect\")\n                    .data([interval], function(d){ return d[data_layer.layout.id_field] + \"_interval_rect\"; });\n\n                rects.enter().append(\"rect\")\n                    .attr(\"class\", \"lz-data_layer-intervals lz-interval_rect\");\n\n                height = data_layer.layout.track_height;\n                width = function(d){\n                    return d.display_range.width;\n                };\n                x = function(d){\n                    return d.display_range.start;\n                };\n                y = function(d){\n                    return ((d.track-1) * data_layer.getTrackHeight())\n                        + data_layer.layout.bounding_box_padding;\n                };\n                fill = function(d){\n                    return data_layer.resolveScalableParameter(data_layer.layout.color, d);\n                };\n                fill_opacity = function(d){\n                    return data_layer.resolveScalableParameter(data_layer.layout.fill_opacity, d);\n                };\n                \n                \n                if (data_layer.canTransition()){\n                    rects\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"width\", width).attr(\"height\", height)\n                        .attr(\"x\", x).attr(\"y\", y)\n                        .attr(\"fill\", fill)\n                        .attr(\"fill-opacity\", fill_opacity);\n                } else {\n                    rects\n                        .attr(\"width\", width).attr(\"height\", height)\n                        .attr(\"x\", x).attr(\"y\", y)\n                        .attr(\"fill\", fill)\n                        .attr(\"fill-opacity\", fill_opacity);\n                }\n                \n                rects.exit().remove();\n\n                // Render interval click areas\n                var clickareas = d3.select(this).selectAll(\"rect.lz-data_layer-intervals.lz-clickarea\")\n                    .data([interval], function(d){ return d.interval_name + \"_clickarea\"; });\n\n                clickareas.enter().append(\"rect\")\n                    .attr(\"class\", \"lz-data_layer-intervals lz-clickarea\");\n\n                clickareas\n                    .attr(\"id\", function(d){\n                        return data_layer.getElementId(d) + \"_clickarea\";\n                    })\n                    .attr(\"rx\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .attr(\"ry\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    });\n\n                width = function(d){\n                    return d.display_range.width;\n                };\n                height = function(){\n                    return data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                };\n                x = function(d){\n                    return d.display_range.start;\n                };\n                y = function(d){\n                    return ((d.track-1) * data_layer.getTrackHeight());\n                };\n                if (data_layer.canTransition()){\n                    clickareas\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                } else {\n                    clickareas\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                }\n\n                // Remove old clickareas as needed\n                clickareas.exit().remove();\n\n                // Apply default event emitters to clickareas\n                clickareas.on(\"click\", function(element){\n                    element.parent.parent.emit(\"element_clicked\", element);\n                    element.parent.parent_plot.emit(\"element_clicked\", element);\n                }.bind(this));\n\n                // Apply mouse behaviors to clickareas\n                data_layer.applyBehaviors(clickareas);\n\n            });\n\n        // Remove old elements as needed\n        selection.exit().remove();\n\n        // Update the legend axis if the number of ticks changed\n        if (this.previous_tracks !== this.tracks){\n            this.updateSplitTrackAxis();\n        }\n\n        return this;\n\n    };\n    \n    // Reimplement the positionTooltip() method to be interval-specific\n    this.positionTooltip = function(id){\n        if (typeof id != \"string\"){\n            throw (\"Unable to position tooltip: id is not a string\");\n        }\n        if (!this.tooltips[id]){\n            throw (\"Unable to position tooltip: id does not point to a valid tooltip\");\n        }\n        var tooltip = this.tooltips[id];\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var page_origin = this.getPageOrigin();\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var interval_bbox = d3.select(\"#\" + this.getElementStatusNodeId(tooltip.data)).node().getBBox();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n        // Position horizontally: attempt to center on the portion of the interval that's visible,\n        // pad to either side if bumping up against the edge of the data layer\n        var interval_center_x = ((tooltip.data.display_range.start + tooltip.data.display_range.end) / 2) - (this.layout.bounding_box_padding / 2);\n        var offset_right = Math.max((tooltip_box.width / 2) - interval_center_x, 0);\n        var offset_left = Math.max((tooltip_box.width / 2) + interval_center_x - data_layer_width, 0);\n        var left = page_origin.x + interval_center_x - (tooltip_box.width / 2) - offset_left + offset_right;\n        var arrow_left = (tooltip_box.width / 2) - (arrow_width / 2) + offset_left - offset_right;\n        // Position vertically below the interval unless there's insufficient space\n        var top, arrow_type, arrow_top;\n        if (tooltip_box.height + stroke_width + arrow_width > data_layer_height - (interval_bbox.y + interval_bbox.height)){\n            top = page_origin.y + interval_bbox.y - (tooltip_box.height + stroke_width + arrow_width);\n            arrow_type = \"down\";\n            arrow_top = tooltip_box.height - stroke_width;\n        } else {\n            top = page_origin.y + interval_bbox.y + interval_bbox.height + stroke_width + arrow_width;\n            arrow_type = \"up\";\n            arrow_top = 0 - stroke_width - arrow_width;\n        }\n        // Apply positions to the main div\n        tooltip.selector.style(\"left\", left + \"px\").style(\"top\", top + \"px\");\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow){\n            tooltip.arrow = tooltip.selector.append(\"div\").style(\"position\", \"absolute\");\n        }\n        tooltip.arrow\n            .attr(\"class\", \"lz-data_layer-tooltip-arrow_\" + arrow_type)\n            .style(\"left\", arrow_left + \"px\")\n            .style(\"top\", arrow_top + \"px\");\n    };\n\n    // Redraw split track axis or hide it, and show/hide the legend, as determined\n    // by current layout parameters and data\n    this.updateSplitTrackAxis = function(){\n        var legend_axis = this.layout.track_split_legend_to_y_axis ? \"y\" + this.layout.track_split_legend_to_y_axis : false;\n        if (this.layout.split_tracks){\n            var tracks = +this.tracks || 0;\n            var track_height = +this.layout.track_height || 0;\n            var track_spacing =  2 * (+this.layout.bounding_box_padding || 0) + (+this.layout.track_vertical_spacing || 0);\n            var target_height = (tracks * track_height) + ((tracks - 1) * track_spacing);\n            this.parent.scaleHeightToData(target_height);\n            if (legend_axis && this.parent.legend){\n                this.parent.legend.hide();                            \n                this.parent.layout.axes[legend_axis] = {\n                    render: true,\n                    ticks: [],\n                    range: {\n                        start: (target_height - (this.layout.track_height/2)),\n                        end: (this.layout.track_height/2)\n                    }\n                };\n                this.layout.legend.forEach(function(element){\n                    var key = element[this.layout.track_split_field];\n                    var track = this.track_split_field_index[key];\n                    if (track){\n                        if (this.layout.track_split_order === \"DESC\"){\n                            track = Math.abs(track - tracks - 1);\n                        }\n                        this.parent.layout.axes[legend_axis].ticks.push({\n                            y: track,\n                            text: element.label\n                        });\n                    }\n                }.bind(this));\n                this.layout.y_axis = {\n                    axis: this.layout.track_split_legend_to_y_axis,\n                    floor: 1,\n                    ceiling: tracks\n                };\n                this.parent.render();\n            }\n            this.parent_plot.positionPanels();\n        } else {\n            if (legend_axis && this.parent.legend){\n                if (!this.layout.always_hide_legend){ this.parent.legend.show(); }\n                this.parent.layout.axes[legend_axis] = { render: false };\n                this.parent.render();\n            }\n        }\n        return this;\n    };\n\n    // Method to not only toggle the split tracks boolean but also update\n    // necessary display values to animate a complete merge/split\n    this.toggleSplitTracks = function(){\n        this.layout.split_tracks = !this.layout.split_tracks;\n        if (this.parent.legend && !this.layout.always_hide_legend){\n            this.parent.layout.margin.bottom = 5 + (this.layout.split_tracks ? 0 : this.parent.legend.layout.height + 5);\n        }\n        this.render();\n        this.updateSplitTrackAxis();\n        return this;\n    };\n       \n    return this;\n\n});\n","\"use strict\";\n\n/*********************\n * Line Data Layer\n * Implements a standard line plot\n * @class\n * @augments LocusZoom.DataLayer\n*/\nLocusZoom.DataLayers.add(\"line\", function(layout){\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    /** @member {Object} */\n    this.DefaultLayout = {\n        style: {\n            fill: \"none\",\n            \"stroke-width\": \"2px\"\n        },\n        interpolate: \"linear\",\n        x_axis: { field: \"x\" },\n        y_axis: { field: \"y\", axis: 1 },\n        hitarea_width: 5\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Var for storing mouse events for use in tool tip positioning\n    /** @member {String} */\n    this.mouse_event = null;\n\n    /**\n     * Var for storing the generated line function itself\n     * @member {d3.svg.line}\n     * */\n    this.line = null;\n\n    /**\n     * The timeout identifier returned by setTimeout\n     * @member {Number}\n     */\n    this.tooltip_timeout = null;\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n\n    /**\n     * Helper function to get display and data objects representing\n     *   the x/y coordinates of the current mouse event with respect to the line in terms of the display\n     *   and the interpolated values of the x/y fields with respect to the line\n     * @returns {{display: {x: *, y: null}, data: {}, slope: null}}\n     */\n    this.getMouseDisplayAndData = function(){\n        var ret = {\n            display: {\n                x: d3.mouse(this.mouse_event)[0],\n                y: null\n            },\n            data: {},\n            slope: null\n        };\n        var x_field = this.layout.x_axis.field;\n        var y_field = this.layout.y_axis.field;\n        var x_scale = \"x_scale\";\n        var y_scale = \"y\" + this.layout.y_axis.axis + \"_scale\";\n        ret.data[x_field] = this.parent[x_scale].invert(ret.display.x);\n        var bisect = d3.bisector(function(datum) { return +datum[x_field]; }).left;\n        var index = bisect(this.data, ret.data[x_field]) - 1;\n        var startDatum = this.data[index];\n        var endDatum = this.data[index + 1];\n        var interpolate = d3.interpolateNumber(+startDatum[y_field], +endDatum[y_field]);\n        var range = +endDatum[x_field] - +startDatum[x_field];\n        ret.data[y_field] = interpolate((ret.data[x_field] % range) / range);\n        ret.display.y = this.parent[y_scale](ret.data[y_field]);\n        if (this.layout.tooltip.x_precision){\n            ret.data[x_field] = ret.data[x_field].toPrecision(this.layout.tooltip.x_precision);\n        }\n        if (this.layout.tooltip.y_precision){\n            ret.data[y_field] = ret.data[y_field].toPrecision(this.layout.tooltip.y_precision);\n        }\n        ret.slope = (this.parent[y_scale](endDatum[y_field]) - this.parent[y_scale](startDatum[y_field]))\n                  / (this.parent[x_scale](endDatum[x_field]) - this.parent[x_scale](startDatum[x_field]));\n        return ret;\n    };\n\n    /**\n     * Reimplement the positionTooltip() method to be line-specific\n     * @param {String} id Identify the tooltip to be positioned\n     */\n    this.positionTooltip = function(id){\n        if (typeof id != \"string\"){\n            throw (\"Unable to position tooltip: id is not a string\");\n        }\n        if (!this.tooltips[id]){\n            throw (\"Unable to position tooltip: id does not point to a valid tooltip\");\n        }\n        var tooltip = this.tooltips[id];\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var arrow_width = 7; // as defined in the default stylesheet\n        var border_radius = 6; // as defined in the default stylesheet\n        var stroke_width = parseFloat(this.layout.style[\"stroke-width\"]) || 1;\n        var page_origin = this.getPageOrigin();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n        var top, left, arrow_top, arrow_left, arrow_type;\n\n        // Determine x/y coordinates for display and data\n        var dd = this.getMouseDisplayAndData();\n\n        // If the absolute value of the slope of the line at this point is above 1 (including Infinity)\n        // then position the tool tip left/right. Otherwise position top/bottom.\n        if (Math.abs(dd.slope) > 1){\n\n            // Position horizontally on the left or the right depending on which side of the plot the point is on\n            if (dd.display.x <= this.parent.layout.width / 2){\n                left = page_origin.x + dd.display.x + stroke_width + arrow_width + stroke_width;\n                arrow_type = \"left\";\n                arrow_left = -1 * (arrow_width + stroke_width);\n            } else {\n                left = page_origin.x + dd.display.x - tooltip_box.width - stroke_width - arrow_width - stroke_width;\n                arrow_type = \"right\";\n                arrow_left = tooltip_box.width - stroke_width;\n            }\n            // Position vertically centered unless we're at the top or bottom of the plot\n            if (dd.display.y - (tooltip_box.height / 2) <= 0){ // Too close to the top, push it down\n                top = page_origin.y + dd.display.y - (1.5 * arrow_width) - border_radius;\n                arrow_top = border_radius;\n            } else if (dd.display.y + (tooltip_box.height / 2) >= data_layer_height){ // Too close to the bottom, pull it up\n                top = page_origin.y + dd.display.y + arrow_width + border_radius - tooltip_box.height;\n                arrow_top = tooltip_box.height - (2 * arrow_width) - border_radius;\n            } else { // vertically centered\n                top = page_origin.y + dd.display.y - (tooltip_box.height / 2);\n                arrow_top = (tooltip_box.height / 2) - arrow_width;\n            }\n\n        } else {\n\n            // Position horizontally: attempt to center on the mouse's x coordinate\n            // pad to either side if bumping up against the edge of the data layer\n            var offset_right = Math.max((tooltip_box.width / 2) - dd.display.x, 0);\n            var offset_left = Math.max((tooltip_box.width / 2) + dd.display.x - data_layer_width, 0);\n            left = page_origin.x + dd.display.x - (tooltip_box.width / 2) - offset_left + offset_right;\n            var min_arrow_left = arrow_width / 2;\n            var max_arrow_left = tooltip_box.width - (2.5 * arrow_width);\n            arrow_left = (tooltip_box.width / 2) - arrow_width + offset_left - offset_right;\n            arrow_left = Math.min(Math.max(arrow_left, min_arrow_left), max_arrow_left);\n\n            // Position vertically above the line unless there's insufficient space\n            if (tooltip_box.height + stroke_width + arrow_width > dd.display.y){\n                top = page_origin.y + dd.display.y + stroke_width + arrow_width;\n                arrow_type = \"up\";\n                arrow_top = 0 - stroke_width - arrow_width;\n            } else {\n                top = page_origin.y + dd.display.y - (tooltip_box.height + stroke_width + arrow_width);\n                arrow_type = \"down\";\n                arrow_top = tooltip_box.height - stroke_width;\n            }\n        }\n\n        // Apply positions to the main div\n        tooltip.selector.style({ left: left + \"px\", top: top + \"px\" });\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow){\n            tooltip.arrow = tooltip.selector.append(\"div\").style(\"position\", \"absolute\");\n        }\n        tooltip.arrow\n            .attr(\"class\", \"lz-data_layer-tooltip-arrow_\" + arrow_type)\n            .style({ \"left\": arrow_left + \"px\", top: arrow_top + \"px\" });\n\n    };\n\n    /**\n     * Implement the main render function\n     */\n    this.render = function(){\n\n        // Several vars needed to be in scope\n        var data_layer = this;\n        var panel = this.parent;\n        var x_field = this.layout.x_axis.field;\n        var y_field = this.layout.y_axis.field;\n        var x_scale = \"x_scale\";\n        var y_scale = \"y\" + this.layout.y_axis.axis + \"_scale\";\n\n        // Join data to the line selection\n        var selection = this.svg.group\n            .selectAll(\"path.lz-data_layer-line\")\n            .data([this.data]);\n\n        // Create path element, apply class\n        this.path = selection.enter()\n            .append(\"path\")\n            .attr(\"class\", \"lz-data_layer-line\");\n\n        // Generate the line\n        this.line = d3.svg.line()\n            .x(function(d) { return parseFloat(panel[x_scale](d[x_field])); })\n            .y(function(d) { return parseFloat(panel[y_scale](d[y_field])); })\n            .interpolate(this.layout.interpolate);\n\n        // Apply line and style\n        if (this.canTransition()){\n            selection\n                .transition()\n                .duration(this.layout.transition.duration || 0)\n                .ease(this.layout.transition.ease || \"cubic-in-out\")\n                .attr(\"d\", this.line)\n                .style(this.layout.style);\n        } else {\n            selection\n                .attr(\"d\", this.line)\n                .style(this.layout.style);\n        }\n\n        // Apply tooltip, etc\n        if (this.layout.tooltip){\n            // Generate an overlaying transparent \"hit area\" line for more intuitive mouse events\n            var hitarea_width = parseFloat(this.layout.hitarea_width).toString() + \"px\";\n            var hitarea = this.svg.group\n                .selectAll(\"path.lz-data_layer-line-hitarea\")\n                .data([this.data]);\n            hitarea.enter()\n                .append(\"path\")\n                .attr(\"class\", \"lz-data_layer-line-hitarea\")\n                .style(\"stroke-width\", hitarea_width);\n            var hitarea_line = d3.svg.line()\n                .x(function(d) { return parseFloat(panel[x_scale](d[x_field])); })\n                .y(function(d) { return parseFloat(panel[y_scale](d[y_field])); })\n                .interpolate(this.layout.interpolate);\n            hitarea\n                .attr(\"d\", hitarea_line)\n                .on(\"mouseover\", function(){\n                    clearTimeout(data_layer.tooltip_timeout);\n                    data_layer.mouse_event = this;\n                    var dd = data_layer.getMouseDisplayAndData();\n                    data_layer.createTooltip(dd.data);\n                })\n                .on(\"mousemove\", function(){\n                    clearTimeout(data_layer.tooltip_timeout);\n                    data_layer.mouse_event = this;\n                    var dd = data_layer.getMouseDisplayAndData();\n                    data_layer.updateTooltip(dd.data);\n                    data_layer.positionTooltip(data_layer.getElementId());\n                })\n                .on(\"mouseout\", function(){\n                    data_layer.tooltip_timeout = setTimeout(function(){\n                        data_layer.mouse_event = null;\n                        data_layer.destroyTooltip(data_layer.getElementId());\n                    }, 300);\n                });\n            hitarea.exit().remove();\n        }\n\n        // Remove old elements as needed\n        selection.exit().remove();\n        \n    };\n\n    /**\n     * Redefine setElementStatus family of methods as line data layers will only ever have a single path element\n     * @param {String} status A member of `LocusZoom.DataLayer.Statuses.adjectives`\n     * @param {String|Object} element\n     * @param {Boolean} toggle\n     * @returns {LocusZoom.DataLayer}\n     */\n    this.setElementStatus = function(status, element, toggle){\n        return this.setAllElementStatus(status, toggle);\n    };\n    this.setElementStatusByFilters = function(status, toggle){\n        return this.setAllElementStatus(status, toggle);\n    };\n    this.setAllElementStatus = function(status, toggle){\n        // Sanity check\n        if (typeof status == \"undefined\" || LocusZoom.DataLayer.Statuses.adjectives.indexOf(status) === -1){\n            throw(\"Invalid status passed to DataLayer.setAllElementStatus()\");\n        }\n        if (typeof this.state[this.state_id][status] == \"undefined\"){ return this; }\n        if (typeof toggle == \"undefined\"){ toggle = true; }\n\n        // Update global status flag\n        this.global_statuses[status] = toggle;\n\n        // Apply class to path based on global status flags\n        var path_class = \"lz-data_layer-line\";\n        Object.keys(this.global_statuses).forEach(function(global_status){\n            if (this.global_statuses[global_status]){ path_class += \" lz-data_layer-line-\" + global_status; }\n        }.bind(this));\n        this.path.attr(\"class\", path_class);\n\n        // Trigger layout changed event hook\n        this.parent.emit(\"layout_changed\");\n        this.parent_plot.emit(\"layout_changed\");\n        \n        return this;\n    };\n\n    return this;\n\n});\n\n\n/***************************\n *  Orthogonal Line Data Layer\n *  Implements a horizontal or vertical line given an orientation and an offset in the layout\n *  Does not require a data source\n * @class\n * @augments LocusZoom.DataLayer\n*/\nLocusZoom.DataLayers.add(\"orthogonal_line\", function(layout){\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        style: {\n            \"stroke\": \"#D3D3D3\",\n            \"stroke-width\": \"3px\",\n            \"stroke-dasharray\": \"10px 10px\"\n        },\n        orientation: \"horizontal\",\n        x_axis: {\n            axis: 1,\n            decoupled: true\n        },\n        y_axis: {\n            axis: 1,\n            decoupled: true\n        },\n        offset: 0\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Require that orientation be \"horizontal\" or \"vertical\" only\n    if ([\"horizontal\",\"vertical\"].indexOf(layout.orientation) === -1){\n        layout.orientation = \"horizontal\";\n    }\n\n    // Vars for storing the data generated line\n    /** @member {Array} */\n    this.data = [];\n    /** @member {d3.svg.line} */\n    this.line = null;\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    /**\n     * Implement the main render function\n     */\n    this.render = function(){\n\n        // Several vars needed to be in scope\n        var panel = this.parent;\n        var x_scale = \"x_scale\";\n        var y_scale = \"y\" + this.layout.y_axis.axis + \"_scale\";\n        var x_extent = \"x_extent\";\n        var y_extent = \"y\" + this.layout.y_axis.axis + \"_extent\";\n        var x_range = \"x_range\";\n        var y_range = \"y\" + this.layout.y_axis.axis + \"_range\";\n\n        // Generate data using extents depending on orientation\n        if (this.layout.orientation === \"horizontal\"){\n            this.data = [\n                { x: panel[x_extent][0], y: this.layout.offset },\n                { x: panel[x_extent][1], y: this.layout.offset }\n            ];\n        } else {\n            this.data = [\n                { x: this.layout.offset, y: panel[y_extent][0] },\n                { x: this.layout.offset, y: panel[y_extent][1] }\n            ];\n        }\n\n        // Join data to the line selection\n        var selection = this.svg.group\n            .selectAll(\"path.lz-data_layer-line\")\n            .data([this.data]);\n\n        // Create path element, apply class\n        this.path = selection.enter()\n            .append(\"path\")\n            .attr(\"class\", \"lz-data_layer-line\");\n\n        // Generate the line\n        this.line = d3.svg.line()\n            .x(function(d, i) {\n                var x = parseFloat(panel[x_scale](d[\"x\"]));\n                return isNaN(x) ? panel[x_range][i] : x;\n            })\n            .y(function(d, i) {\n                var y = parseFloat(panel[y_scale](d[\"y\"]));\n                return isNaN(y) ? panel[y_range][i] : y;\n            })\n            .interpolate(\"linear\");\n\n        // Apply line and style\n        if (this.canTransition()){\n            selection\n                .transition()\n                .duration(this.layout.transition.duration || 0)\n                .ease(this.layout.transition.ease || \"cubic-in-out\")\n                .attr(\"d\", this.line)\n                .style(this.layout.style);\n        } else {\n            selection\n                .attr(\"d\", this.line)\n                .style(this.layout.style);\n        }\n\n        // Remove old elements as needed\n        selection.exit().remove();\n        \n    };\n\n    return this;\n\n});\n","\"use strict\";\n\n/*********************\n  Scatter Data Layer\n  Implements a standard scatter plot\n*/\n\nLocusZoom.DataLayers.add(\"scatter\", function(layout){\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        point_size: 40,\n        point_shape: \"circle\",\n        tooltip_positioning: \"horizontal\",\n        color: \"#888888\",\n        fill_opacity: 1,\n        y_axis: {\n            axis: 1\n        },\n        id_field: \"id\"\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Extra default for layout spacing\n    // Not in default layout since that would make the label attribute always present\n    if (layout.label && isNaN(layout.label.spacing)){\n        layout.label.spacing = 4;\n    }\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    // Reimplement the positionTooltip() method to be scatter-specific\n    this.positionTooltip = function(id){\n        if (typeof id != \"string\"){\n            throw (\"Unable to position tooltip: id is not a string\");\n        }\n        if (!this.tooltips[id]){\n            throw (\"Unable to position tooltip: id does not point to a valid tooltip\");\n        }\n        var top, left, arrow_type, arrow_top, arrow_left;\n        var tooltip = this.tooltips[id];\n        var point_size = this.resolveScalableParameter(this.layout.point_size, tooltip.data);\n        var offset = Math.sqrt(point_size / Math.PI);\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var border_radius = 6; // as defined in the default stylesheet\n        var page_origin = this.getPageOrigin();\n        var x_center = this.parent.x_scale(tooltip.data[this.layout.x_axis.field]);\n        var y_scale  = \"y\"+this.layout.y_axis.axis+\"_scale\";\n        var y_center = this.parent[y_scale](tooltip.data[this.layout.y_axis.field]);\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n        if (this.layout.tooltip_positioning === \"vertical\"){\n            // Position horizontally centered above the point\n            var offset_right = Math.max((tooltip_box.width / 2) - x_center, 0);\n            var offset_left = Math.max((tooltip_box.width / 2) + x_center - data_layer_width, 0);\n            left = page_origin.x + x_center - (tooltip_box.width / 2) - offset_left + offset_right;\n            arrow_left = (tooltip_box.width / 2) - (arrow_width / 2) + offset_left - offset_right - offset;\n            // Position vertically above the point unless there's insufficient space, then go below\n            if (tooltip_box.height + stroke_width + arrow_width > data_layer_height - (y_center + offset)){\n                top = page_origin.y + y_center - (offset + tooltip_box.height + stroke_width + arrow_width);\n                arrow_type = \"down\";\n                arrow_top = tooltip_box.height - stroke_width;\n            } else {\n                top = page_origin.y + y_center + offset + stroke_width + arrow_width;\n                arrow_type = \"up\";\n                arrow_top = 0 - stroke_width - arrow_width;\n            }\n        } else {\n            // Position horizontally on the left or the right depending on which side of the plot the point is on\n            if (x_center <= this.parent.layout.width / 2){\n                left = page_origin.x + x_center + offset + arrow_width + stroke_width;\n                arrow_type = \"left\";\n                arrow_left = -1 * (arrow_width + stroke_width);\n            } else {\n                left = page_origin.x + x_center - tooltip_box.width - offset - arrow_width - stroke_width;\n                arrow_type = \"right\";\n                arrow_left = tooltip_box.width - stroke_width;\n            }\n            // Position vertically centered unless we're at the top or bottom of the plot\n            data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n            if (y_center - (tooltip_box.height / 2) <= 0){ // Too close to the top, push it down\n                top = page_origin.y + y_center - (1.5 * arrow_width) - border_radius;\n                arrow_top = border_radius;\n            } else if (y_center + (tooltip_box.height / 2) >= data_layer_height){ // Too close to the bottom, pull it up\n                top = page_origin.y + y_center + arrow_width + border_radius - tooltip_box.height;\n                arrow_top = tooltip_box.height - (2 * arrow_width) - border_radius;\n            } else { // vertically centered\n                top = page_origin.y + y_center - (tooltip_box.height / 2);\n                arrow_top = (tooltip_box.height / 2) - arrow_width;\n            }\n        }\n        // Apply positions to the main div\n        tooltip.selector.style(\"left\", left + \"px\").style(\"top\", top + \"px\");\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow){\n            tooltip.arrow = tooltip.selector.append(\"div\").style(\"position\", \"absolute\");\n        }\n        tooltip.arrow\n            .attr(\"class\", \"lz-data_layer-tooltip-arrow_\" + arrow_type)\n            .style(\"left\", arrow_left + \"px\")\n            .style(\"top\", arrow_top + \"px\");\n    };\n\n    // Function to flip labels from being anchored at the start of the text to the end\n    // Both to keep labels from running outside the data layer and  also as a first\n    // pass on recursive separation\n    this.flip_labels = function(){\n        var data_layer = this;\n        var point_size = data_layer.resolveScalableParameter(data_layer.layout.point_size, {});\n        var spacing = data_layer.layout.label.spacing;\n        var handle_lines = Boolean(data_layer.layout.label.lines);\n        var min_x = 2 * spacing;\n        var max_x = data_layer.parent.layout.width - data_layer.parent.layout.margin.left - data_layer.parent.layout.margin.right - (2 * spacing);\n        var flip = function(dn, dnl){\n            var dnx = +dn.attr(\"x\");\n            var text_swing = (2 * spacing) + (2 * Math.sqrt(point_size));\n            if (handle_lines){\n                var dnlx2 = +dnl.attr(\"x2\");\n                var line_swing = spacing + (2 * Math.sqrt(point_size));\n            }\n            if (dn.style(\"text-anchor\") === \"start\"){\n                dn.style(\"text-anchor\", \"end\");\n                dn.attr(\"x\", dnx - text_swing);\n                if (handle_lines){ dnl.attr(\"x2\", dnlx2 - line_swing); }\n            } else {\n                dn.style(\"text-anchor\", \"start\");\n                dn.attr(\"x\", dnx + text_swing);\n                if (handle_lines){ dnl.attr(\"x2\", dnlx2 + line_swing); }\n            }\n        };\n        // Flip any going over the right edge from the right side to the left side\n        // (all labels start on the right side)\n        data_layer.label_texts.each(function (d, i) {\n            var a = this;\n            var da = d3.select(a);\n            var dax = +da.attr(\"x\");\n            var abound = da.node().getBoundingClientRect();\n            if (dax + abound.width + spacing > max_x){\n                var dal = handle_lines ? d3.select(data_layer.label_lines[0][i]) : null;\n                flip(da, dal);\n            }\n        });\n        // Second pass to flip any others that haven't flipped yet if they collide with another label\n        data_layer.label_texts.each(function (d, i) {\n            var a = this;\n            var da = d3.select(a);\n            if (da.style(\"text-anchor\") === \"end\") return;\n            var dax = +da.attr(\"x\");\n            var abound = da.node().getBoundingClientRect();\n            var dal = handle_lines ? d3.select(data_layer.label_lines[0][i]) : null;\n            data_layer.label_texts.each(function () {\n                var b = this;\n                var db = d3.select(b);\n                var bbound = db.node().getBoundingClientRect();\n                var collision = abound.left < bbound.left + bbound.width + (2*spacing) &&\n                    abound.left + abound.width + (2*spacing) > bbound.left &&\n                    abound.top < bbound.top + bbound.height + (2*spacing) &&\n                    abound.height + abound.top + (2*spacing) > bbound.top;\n                if (collision){\n                    flip(da, dal);\n                    // Double check that this flip didn't push the label past min_x. If it did, immediately flip back.\n                    dax = +da.attr(\"x\");\n                    if (dax - abound.width - spacing < min_x){\n                        flip(da, dal);\n                    }\n                }\n                return;\n            });\n        });\n    };\n\n    // Recursive function to space labels apart immediately after initial render\n    // Adapted from thudfactor's fiddle here: https://jsfiddle.net/thudfactor/HdwTH/\n    // TODO: Make labels also aware of data elements\n    this.separate_labels = function(){\n        this.seperate_iterations++;\n        var data_layer = this;\n        var alpha = 0.5;\n        var spacing = this.layout.label.spacing;\n        var again = false;\n        data_layer.label_texts.each(function () {\n            var a = this;\n            var da = d3.select(a);\n            var y1 = da.attr(\"y\");\n            data_layer.label_texts.each(function () {\n                var b = this;\n                // a & b are the same element and don't collide.\n                if (a === b) return;\n                var db = d3.select(b);\n                // a & b are on opposite sides of the chart and\n                // don't collide\n                if (da.attr(\"text-anchor\") !== db.attr(\"text-anchor\")) return;\n                // Determine if the  bounding rects for the two text elements collide\n                var abound = da.node().getBoundingClientRect();\n                var bbound = db.node().getBoundingClientRect();\n                var collision = abound.left < bbound.left + bbound.width + (2*spacing) &&\n                    abound.left + abound.width + (2*spacing) > bbound.left &&\n                    abound.top < bbound.top + bbound.height + (2*spacing) &&\n                    abound.height + abound.top + (2*spacing) > bbound.top;\n                if (!collision) return;\n                again = true;\n                // If the labels collide, we'll push each\n                // of the two labels up and down a little bit.\n                var y2 = db.attr(\"y\");\n                var sign = abound.top < bbound.top ? 1 : -1;\n                var adjust = sign * alpha;\n                var new_a_y = +y1 - adjust;\n                var new_b_y = +y2 + adjust;\n                // Keep new values from extending outside the data layer\n                var min_y = 2 * spacing;\n                var max_y = data_layer.parent.layout.height - data_layer.parent.layout.margin.top - data_layer.parent.layout.margin.bottom - (2 * spacing);\n                var delta;\n                if (new_a_y - (abound.height/2) < min_y){\n                    delta = +y1 - new_a_y;\n                    new_a_y = +y1;\n                    new_b_y += delta;\n                } else if (new_b_y - (bbound.height/2) < min_y){\n                    delta = +y2 - new_b_y;\n                    new_b_y = +y2;\n                    new_a_y += delta;\n                }\n                if (new_a_y + (abound.height/2) > max_y){\n                    delta = new_a_y - +y1;\n                    new_a_y = +y1;\n                    new_b_y -= delta;\n                } else if (new_b_y + (bbound.height/2) > max_y){\n                    delta = new_b_y - +y2;\n                    new_b_y = +y2;\n                    new_a_y -= delta;\n                }\n                da.attr(\"y\",new_a_y);\n                db.attr(\"y\",new_b_y);\n            });\n        });\n        if (again) {\n            // Adjust lines to follow the labels\n            if (data_layer.layout.label.lines){\n                var label_elements = data_layer.label_texts[0];\n                data_layer.label_lines.attr(\"y2\",function(d,i) {\n                    var label_line = d3.select(label_elements[i]);\n                    return label_line.attr(\"y\");\n                });\n            }\n            // After ~150 iterations we're probably beyond diminising returns, so stop recursing\n            if (this.seperate_iterations < 150){\n                setTimeout(function(){\n                    this.separate_labels();\n                }.bind(this), 1);\n            }\n        }\n    };\n\n    // Implement the main render function\n    this.render = function(){\n\n        var data_layer = this;\n        var x_scale = \"x_scale\";\n        var y_scale = \"y\"+this.layout.y_axis.axis+\"_scale\";\n\n        // Generate labels first (if defined)\n        if (this.layout.label){\n            // Apply filters to generate a filtered data set\n            var filtered_data = this.data.filter(function(d){\n                if (!data_layer.layout.label.filters){\n                    return true;\n                } else {\n                    // Start by assuming a match, run through all filters to test if not a match on any one\n                    var match = true;\n                    data_layer.layout.label.filters.forEach(function(filter){\n                        var field_value = (new LocusZoom.Data.Field(filter.field)).resolve(d);\n                        if (isNaN(field_value)){\n                            match = false;\n                        } else {\n                            switch (filter.operator){\n                            case \"<\":\n                                if (!(field_value < filter.value)){ match = false; }\n                                break;\n                            case \"<=\":\n                                if (!(field_value <= filter.value)){ match = false; }\n                                break;\n                            case \">\":\n                                if (!(field_value > filter.value)){ match = false; }\n                                break;\n                            case \">=\":\n                                if (!(field_value >= filter.value)){ match = false; }\n                                break;\n                            case \"=\":\n                                if (!(field_value === filter.value)){ match = false; }\n                                break;\n                            default:\n                                // If we got here the operator is not valid, so the filter should fail\n                                match = false;\n                                break;\n                            }\n                        }\n                    });\n                    return match;\n                }\n            });\n            // Render label groups\n            var self = this;\n            this.label_groups = this.svg.group\n                .selectAll(\"g.lz-data_layer-\" + this.layout.type + \"-label\")\n                .data(filtered_data, function(d){ return d[self.layout.id_field]  + \"_label\"; });\n            this.label_groups.enter()\n                .append(\"g\")\n                .attr(\"class\", \"lz-data_layer-\"+ this.layout.type + \"-label\");\n            // Render label texts\n            if (this.label_texts){ this.label_texts.remove(); }\n            this.label_texts = this.label_groups.append(\"text\")\n                .attr(\"class\", \"lz-data_layer-\" + this.layout.type + \"-label\");\n            this.label_texts\n                .text(function(d){\n                    return LocusZoom.parseFields(d, data_layer.layout.label.text || \"\");\n                })\n                .style(data_layer.layout.label.style || {})\n                .attr({\n                    \"x\": function(d){\n                        var x = data_layer.parent[x_scale](d[data_layer.layout.x_axis.field])\n                              + Math.sqrt(data_layer.resolveScalableParameter(data_layer.layout.point_size, d))\n                              + data_layer.layout.label.spacing;\n                        if (isNaN(x)){ x = -1000; }\n                        return x;\n                    },\n                    \"y\": function(d){\n                        var y = data_layer.parent[y_scale](d[data_layer.layout.y_axis.field]);\n                        if (isNaN(y)){ y = -1000; }\n                        return y;\n                    },\n                    \"text-anchor\": function(){\n                        return \"start\";\n                    }\n                });\n            // Render label lines\n            if (data_layer.layout.label.lines){\n                if (this.label_lines){ this.label_lines.remove(); }\n                this.label_lines = this.label_groups.append(\"line\")\n                    .attr(\"class\", \"lz-data_layer-\" + this.layout.type + \"-label\");\n                this.label_lines\n                    .style(data_layer.layout.label.lines.style || {})\n                    .attr({\n                        \"x1\": function(d){\n                            var x = data_layer.parent[x_scale](d[data_layer.layout.x_axis.field]);\n                            if (isNaN(x)){ x = -1000; }\n                            return x;\n                        },\n                        \"y1\": function(d){\n                            var y = data_layer.parent[y_scale](d[data_layer.layout.y_axis.field]);\n                            if (isNaN(y)){ y = -1000; }\n                            return y;\n                        },\n                        \"x2\": function(d){\n                            var x = data_layer.parent[x_scale](d[data_layer.layout.x_axis.field])\n                                  + Math.sqrt(data_layer.resolveScalableParameter(data_layer.layout.point_size, d))\n                                  + (data_layer.layout.label.spacing/2);\n                            if (isNaN(x)){ x = -1000; }\n                            return x;\n                        },\n                        \"y2\": function(d){\n                            var y = data_layer.parent[y_scale](d[data_layer.layout.y_axis.field]);\n                            if (isNaN(y)){ y = -1000; }\n                            return y;\n                        }\n                    });\n            }\n            // Remove labels when they're no longer in the filtered data set\n            this.label_groups.exit().remove();\n        }\n            \n        // Generate main scatter data elements\n        var selection = this.svg.group\n            .selectAll(\"path.lz-data_layer-\" + this.layout.type)\n            .data(this.data, function(d){ return d[this.layout.id_field]; }.bind(this));\n\n        // Create elements, apply class, ID, and initial position\n        var initial_y = isNaN(this.parent.layout.height) ? 0 : this.parent.layout.height;\n        selection.enter()\n            .append(\"path\")\n            .attr(\"class\", \"lz-data_layer-\" + this.layout.type)\n            .attr(\"id\", function(d){ return this.getElementId(d); }.bind(this))\n            .attr(\"transform\", \"translate(0,\" + initial_y + \")\");\n\n        // Generate new values (or functions for them) for position, color, size, and shape\n        var transform = function(d) {\n            var x = this.parent[x_scale](d[this.layout.x_axis.field]);\n            var y = this.parent[y_scale](d[this.layout.y_axis.field]);\n            if (isNaN(x)){ x = -1000; }\n            if (isNaN(y)){ y = -1000; }\n            return \"translate(\" + x + \",\" + y + \")\";\n        }.bind(this);\n\n        var fill = function(d){ return this.resolveScalableParameter(this.layout.color, d); }.bind(this);\n        var fill_opacity = function(d){ return this.resolveScalableParameter(this.layout.fill_opacity, d); }.bind(this);\n\n        var shape = d3.svg.symbol()\n            .size(function(d){ return this.resolveScalableParameter(this.layout.point_size, d); }.bind(this))\n            .type(function(d){ return this.resolveScalableParameter(this.layout.point_shape, d); }.bind(this));\n\n        // Apply position and color, using a transition if necessary\n\n        if (this.canTransition()){\n            selection\n                .transition()\n                .duration(this.layout.transition.duration || 0)\n                .ease(this.layout.transition.ease || \"cubic-in-out\")\n                .attr(\"transform\", transform)\n                .attr(\"fill\", fill)\n                .attr(\"fill-opacity\", fill_opacity)\n                .attr(\"d\", shape);\n        } else {\n            selection\n                .attr(\"transform\", transform)\n                .attr(\"fill\", fill)\n                .attr(\"fill-opacity\", fill_opacity)\n                .attr(\"d\", shape);\n        }\n\n        // Remove old elements as needed\n        selection.exit().remove();\n\n        // Apply default event emitters to selection\n        selection.on(\"click.event_emitter\", function(element){\n            this.parent.emit(\"element_clicked\", element);\n            this.parent_plot.emit(\"element_clicked\", element);\n        }.bind(this));\n       \n        // Apply mouse behaviors\n        this.applyBehaviors(selection);\n        \n        // Apply method to keep labels from overlapping each other\n        if (this.layout.label){\n            this.flip_labels();\n            this.seperate_iterations = 0;\n            this.separate_labels();\n            // Extend mouse behaviors to labels\n            this.applyBehaviors(this.label_texts);\n        }\n        \n    };\n\n    // Method to set a passed element as the LD reference in the plot-level state\n    this.makeLDReference = function(element){\n        var ref = null;\n        if (typeof element == \"undefined\"){\n            throw(\"makeLDReference requires one argument of any type\");\n        } else if (typeof element == \"object\"){\n            if (this.layout.id_field && typeof element[this.layout.id_field] != \"undefined\"){\n                ref = element[this.layout.id_field].toString();\n            } else if (typeof element[\"id\"] != \"undefined\"){\n                ref = element[\"id\"].toString();\n            } else {\n                ref = element.toString();\n            }\n        } else {\n            ref = element.toString();\n        }\n        this.parent_plot.applyState({ ldrefvar: ref });\n    };\n \n    return this;\n\n});\n\n/**\n * A scatter plot in which the x-axis represents categories, rather than individual positions.\n * For example, this can be used by PheWAS plots to show related groups. This plot allows the categories to be\n *   determined dynamically when data is first loaded.\n *\n * @class LocusZoom.DataLayers.category_scatter\n * @augments LocusZoom.DataLayers.scatter\n */\nLocusZoom.DataLayers.extend(\"scatter\", \"category_scatter\", {\n    /**\n     * This plot layer makes certain assumptions about the data passed in. Transform the raw array of records from\n     *   the datasource to prepare it for plotting, as follows:\n     * 1. The scatter plot assumes that all records are given in sequence (pre-grouped by `category_field`)\n     * 2. It assumes that all records have an x coordinate for individual plotting\n     * @private\n     */\n    _prepareData: function() {\n        var xField = this.layout.x_axis.field || \"x\";\n        // The (namespaced) field from `this.data` that will be used to assign datapoints to a given category & color\n        var category_field = this.layout.x_axis.category_field;\n        if (!category_field) {\n            throw \"Layout for \" + this.layout.id + \" must specify category_field\";\n        }\n        // Sort the data so that things in the same category are adjacent (case-insensitive by specified field)\n        var sourceData = this.data\n            .sort(function(a, b) {\n                var ak = a[category_field];\n                var bk = b[category_field];\n                var av = ak.toString ? ak.toString().toLowerCase() : ak;\n                var bv = bk.toString ? bk.toString().toLowerCase() : bk;\n                return (av === bv) ? 0 : (av < bv ? -1 : 1);});\n        sourceData.forEach(function(d, i){\n            // Implementation detail: Scatter plot requires specifying an x-axis value, and most datasources do not\n            //   specify plotting positions. If a point is missing this field, fill in a synthetic value.\n            d[xField] = d[xField] || i;\n        });\n        return sourceData;\n    },\n\n    /**\n     * Identify the unique categories on the plot, and update the layout with an appropriate color scheme\n     *\n     * Also identify the min and max x value associated with the category, which will be used to generate ticks\n     * @private\n     * @returns {Object.<String, Number[]>} Series of entries used to build category name ticks {category_name: [min_x, max_x]}\n     */\n    _generateCategoryBounds: function() {\n        // TODO: API may return null values in category_field; should we add placeholder category label?\n        // The (namespaced) field from `this.data` that will be used to assign datapoints to a given category & color\n        var category_field = this.layout.x_axis.category_field;\n        var xField = this.layout.x_axis.field || \"x\";\n        var uniqueCategories = {};\n        this.data.forEach(function(item) {\n            var category = item[category_field];\n            var x = item[xField];\n            var bounds = uniqueCategories[category] || [x, x];\n            uniqueCategories[category] = [Math.min(bounds[0], x), Math.max(bounds[1], x)];\n        });\n\n        var categoryNames = Object.keys(uniqueCategories);\n        // Construct a color scale with a sufficient number of visually distinct colors\n        // TODO: This will break for more than 20 categories in a single API response payload for a single PheWAS plot\n        var color_scale = categoryNames.length <= 10 ? d3.scale.category10 : d3.scale.category20;\n        var colors = color_scale().range().slice(0, categoryNames.length);  // List of hex values, should be of same length as categories array\n\n        this.layout.color.parameters.categories = categoryNames;\n        this.layout.color.parameters.values = colors;\n        return uniqueCategories;\n    },\n\n    /**\n     *\n     * @param dimension\n     * @param {Object} [config] Parameters that customize how ticks are calculated (not style)\n     * @param {('left'|'center'|'right')} [config.position='left'] Align ticks with the center or edge of category\n     * @returns {Array}\n     */\n    getTicks: function(dimension, config) { // Overrides parent method\n        if ([\"x\", \"y\"].indexOf(dimension) === -1) {\n            throw \"Invalid dimension identifier\";\n        }\n        var position = config.position || \"left\";\n        if ([\"left\", \"center\", \"right\"].indexOf(position) === -1) {\n            throw \"Invalid tick position\";\n        }\n\n        var categoryBounds = this._categories;\n        if (!categoryBounds || !Object.keys(categoryBounds).length) {\n            return [];\n        }\n\n        if (dimension === \"y\") {\n            return [];\n        }\n\n        if (dimension === \"x\") {\n            // If colors have been defined by this layer, use them to make tick colors match scatterplot point colors\n            var knownColors = this.layout.color.parameters.values || [];\n\n            return Object.keys(categoryBounds).map(function (category, index) {\n                var bounds = categoryBounds[category];\n                var xPos;\n\n                switch(position) {\n                case \"left\":\n                    xPos = bounds[0];\n                    break;\n                case \"center\":\n                    // Center tick under one or many elements as appropriate\n                    var diff = bounds[1] - bounds[0];\n                    xPos = bounds[0] + (diff !== 0 ? diff : bounds[0]) / 2;\n                    break;\n                case \"right\":\n                    xPos = bounds[1];\n                    break;\n                }\n                return {\n                    x: xPos,\n                    text: category,\n                    style: {\n                        \"fill\": knownColors[index] || \"#000000\"\n                    }\n                };\n            });\n        }\n    },\n\n    applyCustomDataMethods: function() {\n        this.data = this._prepareData();\n        /**\n         * Define category names and extents (boundaries) for plotting.  TODO: properties in constructor\n         * @member {Object.<String, Number[]>} Category names and extents, in the form {category_name: [min_x, max_x]}\n         */\n        this._categories = this._generateCategoryBounds();\n        return this;\n    }\n});","/* global LocusZoom */\n\"use strict\";\n\n/**\n *\n * LocusZoom has various singleton objects that are used for registering functions or classes.\n * These objects provide safe, standard methods to redefine or delete existing functions/classes\n * as well as define new custom functions/classes to be used in a plot.\n *\n * @namespace Singletons\n */\n\n\n/*\n * The Collection of \"Known\" Data Sources. This registry is used internally by the `DataSources` class\n * @class\n * @static\n */\nLocusZoom.KnownDataSources = (function() {\n    /** @lends LocusZoom.KnownDataSources */\n    var obj = {};\n    /* @member {function[]} */\n    var sources = [];\n\n    var findSourceByName = function(x) {\n        for(var i=0; i<sources.length; i++) {\n            if (!sources[i].SOURCE_NAME) {\n                throw(\"KnownDataSources at position \" + i + \" does not have a 'SOURCE_NAME' static property\");\n            }\n            if (sources[i].SOURCE_NAME === x) {\n                return sources[i];\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Identify the datasource associated with a given name\n     * @param {String} name\n     * @returns {function} The constructor for the data source; will usually extend `Data.Source`\n     */\n    obj.get = function(name) {\n        return findSourceByName(name);\n    };\n\n    /**\n     * Register a data source constructor so that it may be located by name\n     * @param {function} source A constructor function for a data source; will usually extend `Data.Source`,\n     *   and should have a `SOURCE_NAME` property\n     */\n    obj.add = function(source) {\n        if (!source.SOURCE_NAME) {\n            console.warn(\"Data source added does not have a SOURCE_NAME\");\n        }\n        sources.push(source);\n    };\n\n    /**\n     * Create a custom source type that extends the behavior of an existing source, and registers that\n     *  source by the provided name\n     * @param {String} parent_name The name of a previously registered data source type to use as a template\n     * @param {String} source_name The new name to use when registering this data source\n     * @param {Object} overrides An object of additional properties and methods to add/override behavior\n     * @returns {LocusZoom.Data.Source} The newly defined class for this source\n     */\n    obj.extend = function(parent_name, source_name, overrides) {\n        var parent = findSourceByName(parent_name);\n        if (!parent) {\n            throw \"Attempted to subclass an unknown or unregistered data source\";\n        }\n        if (!source_name) {\n            throw \"Must provide a name for the new data source\";\n        }\n        if (typeof overrides !== \"object\") {\n            throw \"Must specify an object of properties and methods\";\n        }\n        var child = LocusZoom.subclass(parent, overrides);\n        child.SOURCE_NAME = source_name;\n        sources.push(child);\n        return child;\n    };\n\n    /** @deprecated */\n    obj.push = function(source) {\n        console.warn(\"Warning: KnownDataSources.push() is deprecated. Use .add() instead\");\n        obj.add(source);\n    };\n\n    /**\n     * List the names of all registered datasources\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return sources.map(function(x) {return x.SOURCE_NAME;});\n    };\n\n    /**\n     * Create a datasource instance\n     * @param {String} name The name of the desired datasource to instantiate (must be defined in the registry)\n     * @returns {LocusZoom.Data.Source}\n     */\n    obj.create = function(name) {\n        //create new object (pass additional parameters to constructor)\n        var newObj = findSourceByName(name);\n        if (newObj) {\n            var params = arguments;\n            params[0] = null;\n            return new (Function.prototype.bind.apply(newObj, params));\n        } else {\n            throw(\"Unable to find data source for name: \" + name); \n        }\n    };\n\n    /**\n     * Get the array of all registered constructors\n     *   Generally only used for unit tests internally\n     * @private\n     * @returns {function[]}\n     */\n    obj.getAll = function() {\n        return sources;\n    };\n\n    /**\n     * Register an entire collection of data sources\n     *   Generally only used for unit tests internally\n     * @private\n     * @param {function[]} x An array of datasource constructors\n     */\n    obj.setAll = function(x) {\n        sources = x;\n    };\n\n    /**\n     * Unregister all known data sources\n     *   Generally only used for unit tests internally\n     * @private\n     */\n    obj.clear = function() {\n        sources = [];\n    };\n\n    return obj;\n})();\n\n/**************************\n * Transformation Functions\n *\n * Singleton for formatting or transforming a single input, for instance turning raw p values into negative log10 form\n * Transformation functions are chainable with a pipe on a field name, like so: \"pvalue|neglog10\"\n *\n * NOTE: Because these functions are chainable the FUNCTION is returned by get(), not the result of that function.\n *\n * All transformation functions must accept an object of parameters and a value to process.\n * @class\n */\nLocusZoom.TransformationFunctions = (function() {\n    /** @lends LocusZoom.TransformationFunctions */\n    var obj = {};\n    var transformations = {};\n\n    var getTrans = function(name) {\n        if (!name) {\n            return null;\n        }\n        var fun = transformations[name];\n        if (fun)  {\n            return fun;\n        } else {\n            throw(\"transformation \" + name + \" not found\");\n        }\n    };\n\n    //a single transformation with any parameters\n    //(parameters not currently supported)\n    var parseTrans = function(name) {\n        return getTrans(name);\n    };\n\n    //a \"raw\" transformation string with a leading pipe\n    //and one or more transformations\n    var parseTransString = function(x) {\n        var funs = [];\n        var re = /\\|([^|]+)/g;\n        var result;\n        while((result = re.exec(x))!==null) {\n            funs.push(result[1]);\n        }\n        if (funs.length===1) {\n            return parseTrans(funs[0]);\n        } else if (funs.length > 1) {\n            return function(x) {\n                var val = x;\n                for(var i = 0; i<funs.length; i++) {\n                    val = parseTrans(funs[i])(val);\n                }\n                return val;\n            };\n        }\n        return null;\n    };\n\n    /**\n     * Retrieve a transformation function by name\n     * @param {String} name The name of the transformation function to retrieve. May optionally be prefixed with a\n     *   pipe (`|`) when chaining multiple transformation functions.\n     * @returns {function} The constructor for the transformation function\n     */\n    obj.get = function(name) {\n        if (name && name.substring(0,1)===\"|\") {\n            return parseTransString(name);\n        } else {\n            return parseTrans(name);\n        }\n    };\n    /**\n     * Internal logic that registers a transformation function\n     * @protected\n     * @param {String} name\n     * @param {function} fn\n     */\n    obj.set = function(name, fn) {\n        if (name.substring(0,1)===\"|\") {\n            throw(\"transformation name should not start with a pipe\");\n        } else {\n            if (fn) {\n                transformations[name] = fn;\n            } else {\n                delete transformations[name];\n            }\n        }\n    };\n\n    /**\n     * Register a transformation function\n     * @param {String} name\n     * @param {function} fn A transformation function (should accept one argument with the value)\n     */\n    obj.add = function(name, fn) {\n        if (transformations[name]) {\n            throw(\"transformation already exists with name: \" + name);\n        } else {\n            obj.set(name, fn);\n        }\n    };\n    /**\n     * List the names of all registered transformation functions\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return Object.keys(transformations);\n    };\n\n    return obj;\n})();\n\n/**\n * Return the -log (base 10)\n * @function neglog10\n */\nLocusZoom.TransformationFunctions.add(\"neglog10\", function(x) {\n    if (isNaN(x) || x <= 0){ return null; }\n    return -Math.log(x) / Math.LN10;\n});\n\n/**\n * Convert a number from logarithm to scientific notation. Useful for, eg, a datasource that returns -log(p) by default\n * @function logtoscinotation\n */\nLocusZoom.TransformationFunctions.add(\"logtoscinotation\", function(x) {\n    if (isNaN(x)){ return \"NaN\"; }\n    if (x === 0){ return \"1\"; }\n    var exp = Math.ceil(x);\n    var diff = exp - x;\n    var base = Math.pow(10, diff);\n    if (exp === 1){\n        return (base / 10).toFixed(4);\n    } else if (exp === 2){\n        return (base / 100).toFixed(3);\n    } else {\n        return base.toFixed(2) + \" × 10^-\" + exp;\n    }\n});\n\n/**\n * Represent a number in scientific notation\n * @function scinotation\n * @param {Number} x\n * @returns {String}\n */\nLocusZoom.TransformationFunctions.add(\"scinotation\", function(x) {\n    if (isNaN(x)){ return \"NaN\"; }\n    if (x === 0){ return \"0\"; }\n    var log;\n    if (Math.abs(x) > 1){\n        log = Math.ceil(Math.log(x) / Math.LN10);\n    } else {\n        log = Math.floor(Math.log(x) / Math.LN10);\n    }\n    if (Math.abs(log) <= 3){\n        return x.toFixed(3);\n    } else {\n        return x.toExponential(2).replace(\"+\", \"\").replace(\"e\", \" × 10^\");\n    }\n});\n\n/**\n * URL-encode the provided text, eg for constructing hyperlinks\n * @function urlencode\n * @param {String} str\n */\nLocusZoom.TransformationFunctions.add(\"urlencode\", function(str) {\n    return encodeURIComponent(str);\n});\n\n/**\n * HTML-escape user entered values for use in constructed HTML fragments\n *\n * For example, this filter can be used on tooltips with custom HTML display\n * @function htmlescape\n * @param {String} str HTML-escape the provided value\n */\nLocusZoom.TransformationFunctions.add(\"htmlescape\", function(str) {\n    if ( !str ) {\n        return \"\";\n    }\n    str = str + \"\";\n\n    return str.replace( /['\"<>&`]/g, function( s ) {\n        switch ( s ) {\n        case \"'\":\n            return \"&#039;\";\n        case \"\\\"\":\n            return \"&quot;\";\n        case \"<\":\n            return \"&lt;\";\n        case \">\":\n            return \"&gt;\";\n        case \"&\":\n            return \"&amp;\";\n        case \"`\":\n            return \"&#x60;\";\n        }\n    });\n});\n\n/**\n * Singleton for accessing/storing functions that will convert arbitrary data points to values in a given scale\n * Useful for anything that needs to scale discretely with data (e.g. color, point size, etc.)\n *\n * A Scale Function can be thought of as a modifier to a layout directive that adds extra logic to how a piece of data\n *   can be resolved to a value.\n *\n * All scale functions must accept an object of parameters and a value to process.\n * @class\n * @static\n */\nLocusZoom.ScaleFunctions = (function() {\n    /** @lends LocusZoom.ScaleFunctions */\n    var obj = {};\n    var functions = {};\n\n    /**\n     * Find a scale function and return it. If parameters and values are passed, calls the function directly; otherwise\n     *   returns a callable.\n     * @param {String} name\n     * @param {Object} [parameters] Configuration parameters specific to the specified scale function\n     * @param {*} [value] The value to operate on\n     * @returns {*}\n     */\n    obj.get = function(name, parameters, value) {\n        if (!name) {\n            return null;\n        } else if (functions[name]) {\n            if (typeof parameters === \"undefined\" && typeof value === \"undefined\"){\n                return functions[name];\n            } else {\n                return functions[name](parameters, value);\n            }\n        } else {\n            throw(\"scale function [\" + name + \"] not found\");\n        }\n    };\n\n    /**\n     * @protected\n     * @param {String} name The name of the function to set/unset\n     * @param {Function} [fn] The function to register. If blank, removes this function name from the registry.\n     */\n    obj.set = function(name, fn) {\n        if (fn) {\n            functions[name] = fn;\n        } else {\n            delete functions[name];\n        }\n    };\n\n    /**\n     * Add a new scale function to the registry\n     * @param {String} name The name of the scale function\n     * @param {function} fn A scale function that accepts two parameters: an object of configuration and a value\n     */\n    obj.add = function(name, fn) {\n        if (functions[name]) {\n            throw(\"scale function already exists with name: \" + name);\n        } else {\n            obj.set(name, fn);\n        }\n    };\n\n    /**\n     * List the names of all registered scale functions\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return Object.keys(functions);\n    };\n\n    return obj;\n})();\n\n/**\n * Basic conditional function to evaluate the value of the input field and return based on equality.\n * @param {Object} parameters\n * @param {*} parameters.field_value The value against which to test the input value.\n * @param {*} parameters.then The value to return if the input value matches the field value\n * @param {*} parameters.else  The value to return if the input value does not match the field value. Optional. If not\n *   defined this scale function will return null (or value of null_value parameter, if defined) when input value fails\n *   to match field_value.\n * @param {*} input value\n */\nLocusZoom.ScaleFunctions.add(\"if\", function(parameters, input){\n    if (typeof input == \"undefined\" || parameters.field_value !== input){\n        if (typeof parameters.else != \"undefined\"){\n            return parameters.else;\n        } else {\n            return null;\n        }\n    } else {\n        return parameters.then;\n    }\n});\n\n/**\n * Function to sort numerical values into bins based on numerical break points. Will only operate on numbers and\n *   return null (or value of null_value parameter, if defined) if provided a non-numeric input value. Parameters:\n * @function numerical_bin\n * @param {Object} parameters\n * @param {Number[]} parameters.breaks  Array of numerical break points against which to evaluate the input value.\n *   Must be of equal length to values parameter. If the input value is greater than or equal to break n and less than\n *   or equal to break n+1 (or break n+1 doesn't exist) then returned value is the nth entry in the values parameter.\n * @param {Array} parameters.values  Array of values to return given evaluations against break points. Must be of\n *   equal length to breaks parameter. Each entry n represents the value to return if the input value is greater than\n *   or equal to break n and less than or equal to break n+1 (or break n+1 doesn't exist).\n * @param {*} null_value\n * @param {*} input value\n * @returns\n */\nLocusZoom.ScaleFunctions.add(\"numerical_bin\", function(parameters, input){\n    var breaks = parameters.breaks || [];\n    var values = parameters.values || [];\n    if (typeof input == \"undefined\" || input === null || isNaN(+input)){\n        return (parameters.null_value ? parameters.null_value : null);\n    }\n    var threshold = breaks.reduce(function(prev, curr){\n        if (+input < prev || (+input >= prev && +input < curr)){\n            return prev;\n        } else {\n            return curr;\n        }\n    });\n    return values[breaks.indexOf(threshold)];\n});\n\n/**\n * Function to sort values of any type into bins based on direct equality testing with a list of categories.\n *   Will return null if provided an input value that does not match to a listed category.\n * @function categorical_bin\n * @param {Object} parameters\n * @param {Array} parameters.categories  Array of values against which to evaluate the input value. Must be of equal\n *   length to values parameter. If the input value is equal to category n then returned value is the nth entry in the\n *   values parameter.\n * @param {Array} parameters.values  Array of values to return given evaluations against categories. Must be of equal\n *   length to categories parameter. Each entry n represents the value to return if the input value is equal to the nth\n *   value in the categories parameter.\n * @param {*} parameters.null_value  Value to return if the input value fails to match to any categories. Optional.\n */\nLocusZoom.ScaleFunctions.add(\"categorical_bin\", function(parameters, value){\n    if (typeof value == \"undefined\" || parameters.categories.indexOf(value) === -1){\n        return (parameters.null_value ? parameters.null_value : null); \n    } else {\n        return parameters.values[parameters.categories.indexOf(value)];\n    }\n});\n\n/**\n * Function for continuous interpolation of numerical values along a gradient with arbitrarily many break points.\n * @function interpolate\n * @parameters {Object} parameters\n * @parameters {Number[]} parameters.breaks  Array of numerical break points against which to evaluate the input value.\n *   Must be of equal length to values parameter and contain at least two elements. Input value will be evaluated for\n *   relative position between two break points n and n+1 and the returned value will be interpolated at a relative\n *   position between values n and n+1.\n * @parameters {*[]} parameters.values  Array of values to interpolate and return given evaluations against break\n *   points. Must be of equal length to breaks parameter and contain at least two elements. Each entry n represents\n *   the value to return if the input value matches the nth entry in breaks exactly. Note that this scale function\n *   uses d3.interpolate to provide for effective interpolation of many different value types, including numbers,\n *   colors, shapes, etc.\n * @parameters {*} parameters.null_value\n */\nLocusZoom.ScaleFunctions.add(\"interpolate\", function(parameters, input){\n    var breaks = parameters.breaks || [];\n    var values = parameters.values || [];\n    var nullval = (parameters.null_value ? parameters.null_value : null);\n    if (breaks.length < 2 || breaks.length !== values.length){ return nullval; }\n    if (typeof input == \"undefined\" || input === null || isNaN(+input)){ return nullval; }\n    if (+input <= parameters.breaks[0]){\n        return values[0];\n    } else if (+input >= parameters.breaks[parameters.breaks.length-1]){\n        return values[breaks.length-1];\n    } else {\n        var upper_idx = null;\n        breaks.forEach(function(brk, idx){\n            if (!idx){ return; }\n            if (breaks[idx-1] <= +input && breaks[idx] >= +input){ upper_idx = idx; }\n        });\n        if (upper_idx === null){ return nullval; }\n        var normalized_input = (+input - breaks[upper_idx-1]) / (breaks[upper_idx] - breaks[upper_idx-1]);\n        if (!isFinite(normalized_input)){ return nullval; }\n        return d3.interpolate(values[upper_idx-1], values[upper_idx])(normalized_input);\n    }\n});\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n * A Dashboard is an HTML element used for presenting arbitrary user interface components. Dashboards are anchored\n *   to either the entire Plot or to individual Panels.\n *\n * Each dashboard is an HTML-based (read: not SVG) collection of components used to display information or provide\n *   user interface. Dashboards can exist on entire plots, where their visibility is permanent and vertically adjacent\n *   to the plot, or on individual panels, where their visibility is tied to a behavior (e.g. a mouseover) and is as\n *   an overlay.\n * @class\n */\nLocusZoom.Dashboard = function(parent){\n    // parent must be a locuszoom plot or panel\n    if (!(parent instanceof LocusZoom.Plot) && !(parent instanceof LocusZoom.Panel)){\n        throw \"Unable to create dashboard, parent must be a locuszoom plot or panel\";\n    }\n    /** @member {LocusZoom.Plot|LocusZoom.Panel} */\n    this.parent = parent;\n    /** @member {String} */\n    this.id = this.parent.getBaseId() + \".dashboard\";\n    /** @member {('plot'|'panel')} */\n    this.type = (this.parent instanceof LocusZoom.Plot) ? \"plot\" : \"panel\";\n    /** @member {LocusZoom.Plot} */\n    this.parent_plot = this.type === \"plot\" ? this.parent : this.parent.parent;\n\n    /** @member {d3.selection} */\n    this.selector = null;\n    /** @member {LocusZoom.Dashboard.Component[]} */\n    this.components = [];\n    /**\n     * The timer identifier as returned by setTimeout\n     * @member {Number}\n     */\n    this.hide_timeout = null;\n    /**\n     * Whether to hide the dashboard. Can be overridden by a child component. Check via `shouldPersist`\n     * @protected\n     * @member {Boolean}\n     */\n    this.persist = false;\n\n    // TODO: Return value from constructor function?\n    return this.initialize();\n};\n\n/**\n * Prepare the dashboard for first use: generate all component instances for this dashboard, based on the provided\n *   layout of the parent. Connects event listeners and shows/hides as appropriate.\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.initialize = function() {\n    // Parse layout to generate component instances\n    if (Array.isArray(this.parent.layout.dashboard.components)){\n        this.parent.layout.dashboard.components.forEach(function(layout){\n            try {\n                var component = LocusZoom.Dashboard.Components.get(layout.type, layout, this);\n                this.components.push(component);\n            } catch (e) {\n                console.warn(e);\n            }\n        }.bind(this));\n    }\n\n    // Add mouseover event handlers to show/hide panel dashboard\n    if (this.type === \"panel\"){\n        d3.select(this.parent.parent.svg.node().parentNode).on(\"mouseover.\" + this.id, function(){\n            clearTimeout(this.hide_timeout);\n            if (!this.selector || this.selector.style(\"visibility\") === \"hidden\"){ this.show(); }\n        }.bind(this));\n        d3.select(this.parent.parent.svg.node().parentNode).on(\"mouseout.\" + this.id, function(){\n            clearTimeout(this.hide_timeout);\n            this.hide_timeout = setTimeout(function(){ this.hide(); }.bind(this), 300);\n        }.bind(this));\n    }\n\n    return this;\n\n};\n\n/**\n * Whether to persist the dashboard. Returns true if at least one component should persist, or if the panel is engaged\n *   in an active drag event.\n * @returns {boolean}\n */\nLocusZoom.Dashboard.prototype.shouldPersist = function(){\n    if (this.persist){ return true; }\n    var persist = false;\n    // Persist if at least one component should also persist\n    this.components.forEach(function(component){\n        persist = persist || component.shouldPersist();\n    });\n    // Persist if in a parent drag event\n    persist = persist || (this.parent_plot.panel_boundaries.dragging || this.parent_plot.interaction.dragging);\n    return !!persist;\n};\n\n/**\n * Make the dashboard appear. If it doesn't exist yet create it, including creating/positioning all components within,\n *   and make sure it is set to be visible.\n */\nLocusZoom.Dashboard.prototype.show = function(){\n    if (!this.selector){\n        switch (this.type){\n        case \"plot\":\n            this.selector = d3.select(this.parent.svg.node().parentNode)\n                .insert(\"div\",\":first-child\");\n            break;\n        case \"panel\":\n            this.selector = d3.select(this.parent.parent.svg.node().parentNode)\n                .insert(\"div\", \".lz-data_layer-tooltip, .lz-dashboard-menu, .lz-curtain\").classed(\"lz-panel-dashboard\", true);\n            break;\n        }\n        this.selector.classed(\"lz-dashboard\", true).classed(\"lz-\"+this.type+\"-dashboard\", true).attr(\"id\", this.id);\n    }\n    this.components.forEach(function(component){ component.show(); });\n    this.selector.style({ visibility: \"visible\" });\n    return this.update();\n};\n\n/**\n * Update the dashboard and rerender all child components. This can be called whenever plot state changes.\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.update = function(){\n    if (!this.selector){ return this; }\n    this.components.forEach(function(component){ component.update(); });\n    return this.position();\n};\n\n/**\n * Position the dashboard (and child components) within the panel\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.position = function(){\n    if (!this.selector){ return this; }\n    // Position the dashboard itself (panel only)\n    if (this.type === \"panel\"){\n        var page_origin = this.parent.getPageOrigin();\n        var top = (page_origin.y + 3.5).toString() + \"px\";\n        var left = page_origin.x.toString() + \"px\";\n        var width = (this.parent.layout.width - 4).toString() + \"px\";\n        this.selector.style({ position: \"absolute\", top: top, left: left, width: width });\n    }\n    // Recursively position components\n    this.components.forEach(function(component){ component.position(); });\n    return this;\n};\n\n/**\n * Hide the dashboard (make invisible but do not destroy). Will do nothing if `shouldPersist` returns true.\n *\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.hide = function(){\n    if (!this.selector || this.shouldPersist()){ return this; }\n    this.components.forEach(function(component){ component.hide(); });\n    this.selector.style({ visibility: \"hidden\" });\n    return this;\n};\n\n/**\n * Completely remove dashboard and all child components. (may be overridden by persistence settings)\n * @param {Boolean} [force=false] If true, will ignore persistence settings and always destroy the dashboard\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.destroy = function(force){\n    if (typeof force == \"undefined\"){ force = false; }\n    if (!this.selector){ return this; }\n    if (this.shouldPersist() && !force){ return this; }\n    this.components.forEach(function(component){ component.destroy(true); });\n    this.components = [];\n    this.selector.remove();\n    this.selector = null;\n    return this;\n};\n\n/**\n *\n * A dashboard component is an empty div rendered on a dashboard that can display custom\n * html of user interface elements. LocusZoom.Dashboard.Components is a singleton used to\n * define and manage an extendable collection of dashboard components.\n * (e.g. by LocusZoom.Dashboard.Components.add())\n * @class\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n * @param {('left'|'right')} [layout.position='left']  Whether to float the component left or right.\n * @param {('start'|'middle'|'end')} [layout.group_position] Buttons can optionally be gathered into a visually\n *  distinctive group whose elements are closer together. If a button is identified as the start or end of a group,\n *  it will be drawn with rounded corners and an extra margin of spacing from any button not part of the group.\n *  For example, the region_nav_plot dashboard is a defined as a group.\n * @param {('gray'|'red'|'orange'|'yellow'|'green'|'blue'|'purple'} [layout.color='gray']  Color scheme for the\n *   component. Applies to buttons and menus.\n * @param {LocusZoom.Dashboard} parent The dashboard that contains this component\n*/\nLocusZoom.Dashboard.Component = function(layout, parent) {\n    /** @member {Object} */\n    this.layout = layout || {};\n    if (!this.layout.color){ this.layout.color = \"gray\"; }\n\n    /** @member {LocusZoom.Dashboard|*} */\n    this.parent = parent || null;\n    /**\n     * Some dashboards are attached to a panel, rather than directly to a plot\n     * @member {LocusZoom.Panel|null}\n     */\n    this.parent_panel = null;\n    /** @member {LocusZoom.Plot} */\n    this.parent_plot = null;\n    /**\n     * This is a reference to either the panel or the plot, depending on what the dashboard is\n     *   tied to. Useful when absolutely positioning dashboard components relative to their SVG anchor.\n     * @member {LocusZoom.Plot|LocusZoom.Panel}\n     */\n    this.parent_svg = null;\n    if (this.parent instanceof LocusZoom.Dashboard){\n        // TODO: when is the immediate parent *not* a dashboard?\n        if (this.parent.type === \"panel\"){\n            this.parent_panel = this.parent.parent;\n            this.parent_plot = this.parent.parent.parent;\n            this.parent_svg = this.parent_panel;\n        } else {\n            this.parent_plot = this.parent.parent;\n            this.parent_svg = this.parent_plot;\n        }\n    }\n    /** @member {d3.selection} */\n    this.selector = null;\n    /**\n     * If this is an interactive component, it will contain a button or menu instance that handles the interactivity.\n     *   There is a 1-to-1 relationship of dashboard component to button\n     * @member {null|LocusZoom.Dashboard.Component.Button}\n     */\n    this.button  = null;\n    /**\n     * If any single component is marked persistent, it will bubble up to prevent automatic hide behavior on a\n     *   component's parent dashboard. Check via `shouldPersist`\n     * @protected\n     * @member {Boolean}\n     */\n    this.persist = false;\n    if (!this.layout.position){ this.layout.position = \"left\"; }\n\n    // TODO: Return value in constructor\n    return this;\n};\n/**\n * Perform all rendering of component, including toggling visibility to true. Will initialize and create SVG element\n *   if necessary, as well as updating with new data and performing layout actions.\n */\nLocusZoom.Dashboard.Component.prototype.show = function(){\n    if (!this.parent || !this.parent.selector){ return; }\n    if (!this.selector){\n        var group_position = ([\"start\",\"middle\",\"end\"].indexOf(this.layout.group_position) !== -1 ? \" lz-dashboard-group-\" + this.layout.group_position : \"\");\n        this.selector = this.parent.selector.append(\"div\")\n            .attr(\"class\", \"lz-dashboard-\" + this.layout.position + group_position);\n        if (this.layout.style){ this.selector.style(this.layout.style); }\n        if (typeof this.initialize == \"function\"){ this.initialize(); }\n    }\n    if (this.button && this.button.status === \"highlighted\"){ this.button.menu.show(); }\n    this.selector.style({ visibility: \"visible\" });\n    this.update();\n    return this.position();\n};\n/**\n * Update the dashboard component with any new data or plot state as appropriate. This method performs all\n *  necessary rendering steps.\n */\nLocusZoom.Dashboard.Component.prototype.update = function(){ /* stub */ };\n/**\n * Place the component correctly in the plot\n * @returns {LocusZoom.Dashboard.Component}\n */\nLocusZoom.Dashboard.Component.prototype.position = function(){\n    if (this.button){ this.button.menu.position(); }\n    return this;\n};\n/**\n * Determine whether the component should persist (will bubble up to parent dashboard)\n * @returns {boolean}\n */\nLocusZoom.Dashboard.Component.prototype.shouldPersist = function(){\n    if (this.persist){ return true; }\n    if (this.button && this.button.persist){ return true; }\n    return false;\n};\n/**\n * Toggle visibility to hidden, unless marked as persistent\n * @returns {LocusZoom.Dashboard.Component}\n */\nLocusZoom.Dashboard.Component.prototype.hide = function(){\n    if (!this.selector || this.shouldPersist()){ return this; }\n    if (this.button){ this.button.menu.hide(); }\n    this.selector.style({ visibility: \"hidden\" });\n    return this;\n};\n/**\n * Completely remove component and button. (may be overridden by persistence settings)\n * @param {Boolean} [force=false] If true, will ignore persistence settings and always destroy the dashboard\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.Component.prototype.destroy = function(force){\n    if (typeof force == \"undefined\"){ force = false; }\n    if (!this.selector){ return this; }\n    if (this.shouldPersist() && !force){ return this; }\n    if (this.button && this.button.menu){ this.button.menu.destroy(); }\n    this.selector.remove();\n    this.selector = null;\n    this.button = null;\n    return this;\n};\n\n/**\n * Singleton registry of all known components\n * @class\n * @static\n */\nLocusZoom.Dashboard.Components = (function() {\n    /** @lends LocusZoom.Dashboard.Components */\n    var obj = {};\n    var components = {};\n\n    /**\n     * Create a new component instance by name\n     * @param {String} name The string identifier of the desired component\n     * @param {Object} layout The layout to use to create the component\n     * @param {LocusZoom.Dashboard} parent The containing dashboard to use when creating the component\n     * @returns {LocusZoom.Dashboard.Component}\n     */\n    obj.get = function(name, layout, parent) {\n        if (!name) {\n            return null;\n        } else if (components[name]) {\n            if (typeof layout != \"object\"){\n                throw(\"invalid layout argument for dashboard component [\" + name + \"]\");\n            } else {\n                return new components[name](layout, parent);\n            }\n        } else {\n            throw(\"dashboard component [\" + name + \"] not found\");\n        }\n    };\n    /**\n     * Add a new component constructor to the registry and ensure that it extends the correct parent class\n     * @protected\n     * @param name\n     * @param component\n     */\n    obj.set = function(name, component) {\n        if (component) {\n            if (typeof component != \"function\"){\n                throw(\"unable to set dashboard component [\" + name + \"], argument provided is not a function\");\n            } else {\n                components[name] = component;\n                components[name].prototype = new LocusZoom.Dashboard.Component();\n            }\n        } else {\n            delete components[name];\n        }\n    };\n\n    /**\n     * Register a new component constructor by name\n     * @param {String} name\n     * @param {function} component The component constructor\n     */\n    obj.add = function(name, component) {\n        if (components[name]) {\n            throw(\"dashboard component already exists with name: \" + name);\n        } else {\n            obj.set(name, component);\n        }\n    };\n\n    /**\n     * List the names of all registered components\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return Object.keys(components);\n    };\n\n    return obj;\n})();\n\n/**\n * Plots and panels may have a \"dashboard\" element suited for showing HTML components that may be interactive.\n *   When components need to incorporate a generic button, or additionally a button that generates a menu, this\n *   class provides much of the necessary framework.\n * @class\n * @param {LocusZoom.Dashboard.Component} parent\n */\nLocusZoom.Dashboard.Component.Button = function(parent) {   \n    \n    if (!(parent instanceof LocusZoom.Dashboard.Component)){\n        throw \"Unable to create dashboard component button, invalid parent\";\n    }\n    /** @member {LocusZoom.Dashboard.Component} */\n    this.parent = parent;\n    /** @member {LocusZoom.Dashboard.Panel} */\n    this.parent_panel = this.parent.parent_panel;\n    /** @member {LocusZoom.Dashboard.Plot} */\n    this.parent_plot = this.parent.parent_plot;\n    /** @member {LocusZoom.Plot|LocusZoom.Panel} */\n    this.parent_svg = this.parent.parent_svg;\n\n    /** @member {LocusZoom.Dashboard|null|*} */\n    this.parent_dashboard = this.parent.parent;\n    /** @member {d3.selection} */\n    this.selector = null;\n\n    /**\n     * Tag to use for the button (default: a)\n     * @member {String}\n     */\n    this.tag = \"a\";\n\n    /**\n     * TODO This method does not appear to be used anywhere\n     * @param {String} tag\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setTag = function(tag){\n        if (typeof tag != \"undefined\"){ this.tag = tag.toString(); }\n        return this;\n    };\n\n    /**\n     * HTML for the button to show.\n     * @protected\n     * @member {String}\n     */\n    this.html = \"\";\n    /**\n     * Specify the HTML content of this button.\n     * WARNING: The string provided will be inserted into the document as raw markup; XSS mitigation is the\n     *   responsibility of each button implementation.\n     * @param {String} html\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setHtml = function(html){\n        if (typeof html != \"undefined\"){ this.html = html.toString(); }\n        return this;\n    };\n    /**\n     * @deprecated since 0.5.6; use setHTML instead\n     */\n    this.setText = this.setHTML;\n\n    /**\n     * Mouseover title text for the button to show\n     * @protected\n     * @member {String}\n     */\n    this.title = \"\";\n    /**\n     * Set the mouseover title text for the button (if any)\n     * @param {String} title Simple text to display\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setTitle = function(title){\n        if (typeof title != \"undefined\"){ this.title = title.toString(); }\n        return this;\n    };\n\n    /**\n     * Color of the button\n     * @member {String}\n     */\n    this.color = \"gray\";\n\n    /**\n     * Set the color associated with this button\n     * @param {('gray'|'red'|'orange'|'yellow'|'green'|'blue'|'purple')} color Any selection not in the preset list\n     *   will be replaced with gray.\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setColor = function(color){\n        if (typeof color != \"undefined\"){\n            if ([\"gray\", \"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\"].indexOf(color) !== -1){ this.color = color; }\n            else { this.color = \"gray\"; }\n        }\n        return this;\n    };\n\n    /**\n     * Hash of arbitrary button styles to apply as {name: value} entries\n     * @protected\n     * @member {Object}\n     */\n    this.style = {};\n    /**\n     * Set a collection of custom styles to be used by the button\n     * @param {Object} style Hash of {name:value} entries\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setStyle = function(style){\n        if (typeof style != \"undefined\"){ this.style = style; }\n        return this;\n    };\n\n    //\n    /**\n     * Method to generate a CSS class string\n     * @returns {string}\n     */\n    this.getClass = function(){\n        var group_position = ([\"start\",\"middle\",\"end\"].indexOf(this.parent.layout.group_position) !== -1 ? \" lz-dashboard-button-group-\" + this.parent.layout.group_position : \"\");\n        return \"lz-dashboard-button lz-dashboard-button-\" + this.color + (this.status ? \"-\" + this.status : \"\") + group_position;\n    };\n\n    // Permanence\n    /**\n     * Track internal state on whether to keep showing the button/ menu contents at the moment\n     * @protected\n     * @member {Boolean}\n     */\n    this.persist = false;\n    /**\n     * Configuration when defining a button: track whether this component should be allowed to keep open\n     *   menu/button contents in response to certain events\n     * @protected\n     * @member {Boolean}\n     */\n    this.permanent = false;\n    /**\n     * Allow code to change whether the button is allowed to be `permanent`\n     * @param {boolean} bool\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setPermanent = function(bool){\n        if (typeof bool == \"undefined\"){ bool = true; } else { bool = Boolean(bool); }\n        this.permanent = bool;\n        if (this.permanent){ this.persist = true; }\n        return this;\n    };\n    /**\n     * Determine whether the button/menu contents should persist in response to a specific event\n     * @returns {Boolean}\n     */\n    this.shouldPersist = function(){\n        return this.permanent || this.persist;\n    };\n\n    /**\n     * Button status (highlighted / disabled/ etc)\n     * @protected\n     * @member {String}\n     */\n    this.status = \"\";\n    /**\n     * Change button state\n     * @param {('highlighted'|'disabled'|'')} status\n     */\n    this.setStatus = function(status){\n        if (typeof status != \"undefined\" && [\"\", \"highlighted\", \"disabled\"].indexOf(status) !== -1){ this.status = status; }\n        return this.update();\n    };\n    /**\n     * Toggle whether the button is highlighted\n     * @param {boolean} bool If provided, explicitly set highlighted state\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.highlight = function(bool){\n        if (typeof bool == \"undefined\"){ bool = true; } else { bool = Boolean(bool); }\n        if (bool){ return this.setStatus(\"highlighted\"); }\n        else if (this.status === \"highlighted\"){ return this.setStatus(\"\"); }\n        return this;\n    };\n    /**\n     * Toggle whether the button is disabled\n     * @param {boolean} bool If provided, explicitly set disabled state\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.disable = function(bool){\n        if (typeof bool == \"undefined\"){ bool = true; } else { bool = Boolean(bool); }\n        if (bool){ return this.setStatus(\"disabled\"); }\n        else if (this.status === \"disabled\"){ return this.setStatus(\"\"); }\n        return this;\n    };\n\n    // Mouse events\n    /** @member {function} */\n    this.onmouseover = function(){};\n    this.setOnMouseover = function(onmouseover){\n        if (typeof onmouseover == \"function\"){ this.onmouseover = onmouseover; }\n        else { this.onmouseover = function(){}; }\n        return this;\n    };\n    /** @member {function} */\n    this.onmouseout = function(){};\n    this.setOnMouseout = function(onmouseout){\n        if (typeof onmouseout == \"function\"){ this.onmouseout = onmouseout; }\n        else { this.onmouseout = function(){}; }\n        return this;\n    };\n    /** @member {function} */\n    this.onclick = function(){};\n    this.setOnclick = function(onclick){\n        if (typeof onclick == \"function\"){ this.onclick = onclick; }\n        else { this.onclick = function(){}; }\n        return this;\n    };\n    \n    // Primary behavior functions\n    /**\n     * Show the button, including creating DOM elements if necessary for first render\n     */\n    this.show = function(){\n        if (!this.parent){ return; }\n        if (!this.selector){\n            this.selector = this.parent.selector.append(this.tag).attr(\"class\", this.getClass());\n        }\n        return this.update();\n    };\n    /**\n     * Hook for any actions or state cleanup to be performed before rerendering\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.preUpdate = function(){ return this; };\n    /**\n     * Update button state and contents, and fully rerender\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.update = function(){\n        if (!this.selector){ return this; }\n        this.preUpdate();\n        this.selector\n            .attr(\"class\", this.getClass())\n            .attr(\"title\", this.title).style(this.style)\n            .on(\"mouseover\", (this.status === \"disabled\") ? null : this.onmouseover)\n            .on(\"mouseout\", (this.status === \"disabled\") ? null : this.onmouseout)\n            .on(\"click\", (this.status === \"disabled\") ? null : this.onclick)\n            .html(this.html);\n        this.menu.update();\n        this.postUpdate();\n        return this;\n    };\n    /**\n     * Hook for any behavior to be added/changed after the button has been re-rendered\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.postUpdate = function(){ return this; };\n    /**\n     * Hide the button by removing it from the DOM (may be overridden by current persistence setting)\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.hide = function(){\n        if (this.selector && !this.shouldPersist()){\n            this.selector.remove();\n            this.selector = null;\n        }\n        return this;\n    };    \n\n    /**\n     * Button Menu Object\n     * The menu is an HTML overlay that can appear below a button. It can contain arbitrary HTML and\n     *   has logic to be automatically positioned and sized to behave more or less like a dropdown menu.\n     * @member {Object}\n     */\n    this.menu = {\n        outer_selector: null,\n        inner_selector: null,\n        scroll_position: 0,\n        hidden: true,\n        /**\n         * Show the button menu, including setting up any DOM elements needed for first rendering\n         */\n        show: function(){\n            if (!this.menu.outer_selector){\n                this.menu.outer_selector = d3.select(this.parent_plot.svg.node().parentNode).append(\"div\")\n                    .attr(\"class\", \"lz-dashboard-menu lz-dashboard-menu-\" + this.color)\n                    .attr(\"id\", this.parent_svg.getBaseId() + \".dashboard.menu\");\n                this.menu.inner_selector = this.menu.outer_selector.append(\"div\")\n                    .attr(\"class\", \"lz-dashboard-menu-content\");\n                this.menu.inner_selector.on(\"scroll\", function(){\n                    this.menu.scroll_position = this.menu.inner_selector.node().scrollTop;\n                }.bind(this));\n            }\n            this.menu.outer_selector.style({ visibility: \"visible\" });\n            this.menu.hidden = false;\n            return this.menu.update();\n        }.bind(this),\n        /**\n         * Update the rendering of the menu\n         */\n        update: function(){\n            if (!this.menu.outer_selector){ return this.menu; }\n            this.menu.populate(); // This function is stubbed for all buttons by default and custom implemented in component definition\n            if (this.menu.inner_selector){ this.menu.inner_selector.node().scrollTop = this.menu.scroll_position; }\n            return this.menu.position();\n        }.bind(this),\n        position: function(){\n            if (!this.menu.outer_selector){ return this.menu; }\n            // Unset any explicitly defined outer selector height so that menus dynamically shrink if content is removed\n            this.menu.outer_selector.style({ height: null });\n            var padding = 3;\n            var scrollbar_padding = 20;\n            var menu_height_padding = 14; // 14: 2x 6px padding, 2x 1px border\n            var page_origin = this.parent_svg.getPageOrigin();\n            var page_scroll_top = document.documentElement.scrollTop || document.body.scrollTop;\n            var container_offset = this.parent_plot.getContainerOffset();\n            var dashboard_client_rect = this.parent_dashboard.selector.node().getBoundingClientRect();\n            var button_client_rect = this.selector.node().getBoundingClientRect();\n            var menu_client_rect = this.menu.outer_selector.node().getBoundingClientRect();\n            var total_content_height = this.menu.inner_selector.node().scrollHeight;\n            var top = 0; var left = 0;\n            if (this.parent_dashboard.type === \"panel\"){\n                top = (page_origin.y + dashboard_client_rect.height + (2 * padding));\n                left = Math.max(page_origin.x + this.parent_svg.layout.width - menu_client_rect.width - padding, page_origin.x + padding);\n            } else {\n                top = button_client_rect.bottom + page_scroll_top + padding - container_offset.top;\n                left = Math.max(button_client_rect.left + button_client_rect.width - menu_client_rect.width - container_offset.left, page_origin.x + padding);\n            }\n            var base_max_width = Math.max(this.parent_svg.layout.width - (2 * padding) - scrollbar_padding, scrollbar_padding);\n            var container_max_width = base_max_width;\n            var content_max_width = (base_max_width - (4 * padding));\n            var base_max_height = Math.max(this.parent_svg.layout.height - (10 * padding) - menu_height_padding, menu_height_padding);\n            var height = Math.min(total_content_height, base_max_height);\n            var max_height = base_max_height;\n            this.menu.outer_selector.style({\n                \"top\": top.toString() + \"px\",\n                \"left\": left.toString() + \"px\",\n                \"max-width\": container_max_width.toString() + \"px\",\n                \"max-height\": max_height.toString() + \"px\",\n                \"height\": height.toString() + \"px\"\n            });\n            this.menu.inner_selector.style({ \"max-width\": content_max_width.toString() + \"px\" });\n            this.menu.inner_selector.node().scrollTop = this.menu.scroll_position;\n            return this.menu;\n        }.bind(this),\n        hide: function(){\n            if (!this.menu.outer_selector){ return this.menu; }\n            this.menu.outer_selector.style({ visibility: \"hidden\" });\n            this.menu.hidden = true;\n            return this.menu;\n        }.bind(this),\n        destroy: function(){\n            if (!this.menu.outer_selector){ return this.menu; }\n            this.menu.inner_selector.remove();\n            this.menu.outer_selector.remove();\n            this.menu.inner_selector = null;\n            this.menu.outer_selector = null;\n            return this.menu;\n        }.bind(this),\n        /**\n         * Internal method definition\n         * By convention populate() does nothing and should be reimplemented with each dashboard button definition\n         *   Reimplement by way of Dashboard.Component.Button.menu.setPopulate to define the populate method and hook\n         *   up standard menu click-toggle behavior prototype.\n         * @protected\n         */\n        populate: function(){ /* stub */ }.bind(this),\n        /**\n         * Define how the menu is populated with items, and set up click and display properties as appropriate\n         * @public\n         */\n        setPopulate: function(menu_populate_function){\n            if (typeof menu_populate_function == \"function\"){\n                this.menu.populate = menu_populate_function;\n                this.setOnclick(function(){\n                    if (this.menu.hidden){\n                        this.menu.show();\n                        this.highlight().update();\n                        this.persist = true;\n                    } else {\n                        this.menu.hide();\n                        this.highlight(false).update();\n                        if (!this.permanent){ this.persist = false; }\n                    }\n                }.bind(this));\n            } else {\n                this.setOnclick();\n            }\n            return this;\n        }.bind(this)\n    };\n\n};\n\n/**\n * Renders arbitrary text with title formatting\n * @class LocusZoom.Dashboard.Components.title\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {string} layout.title Text to render\n */\nLocusZoom.Dashboard.Components.add(\"title\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.show = function(){\n        this.div_selector = this.parent.selector.append(\"div\")\n            .attr(\"class\", \"lz-dashboard-title lz-dashboard-\" + this.layout.position);\n        this.title_selector = this.div_selector.append(\"h3\");\n        return this.update();\n    };\n    this.update = function(){\n        var title = layout.title.toString();\n        if (this.layout.subtitle){ title += \" <small>\" + this.layout.subtitle + \"</small>\"; }\n        this.title_selector.html(title);\n        return this;\n    };\n});\n\n/**\n * Renders text to display the current dimensions of the plot. Automatically updated as plot dimensions change\n * @class LocusZoom.Dashboard.Components.dimensions\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"dimensions\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        var display_width = this.parent_plot.layout.width.toString().indexOf(\".\") === -1 ? this.parent_plot.layout.width : this.parent_plot.layout.width.toFixed(2);\n        var display_height = this.parent_plot.layout.height.toString().indexOf(\".\") === -1 ? this.parent_plot.layout.height : this.parent_plot.layout.height.toFixed(2);\n        this.selector.html(display_width + \"px × \" + display_height + \"px\");\n        if (layout.class){ this.selector.attr(\"class\", layout.class); }\n        if (layout.style){ this.selector.style(layout.style); }\n        return this;\n    };\n});\n\n/**\n * Display the current scale of the genome region displayed in the plot, as defined by the difference between\n *  `state.end` and `state.start`.\n * @class LocusZoom.Dashboard.Components.region_scale\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"region_scale\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        if (!isNaN(this.parent_plot.state.start) && !isNaN(this.parent_plot.state.end)\n            && this.parent_plot.state.start !== null && this.parent_plot.state.end !== null){\n            this.selector.style(\"display\", null);\n            this.selector.html(LocusZoom.positionIntToString(this.parent_plot.state.end - this.parent_plot.state.start, null, true));\n        } else {\n            this.selector.style(\"display\", \"none\");\n        }\n        if (layout.class){ this.selector.attr(\"class\", layout.class); }\n        if (layout.style){ this.selector.style(layout.style); }\n        return this;\n    };\n});\n\n/**\n * Button to export current plot to an SVG image\n * @class LocusZoom.Dashboard.Components.download\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"download\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        if (this.button){ return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(\"Download Image\").setTitle(\"Download image of the current plot as locuszoom.svg\")\n            .setOnMouseover(function() {\n                this.button.selector\n                    .classed(\"lz-dashboard-button-gray-disabled\", true)\n                    .html(\"Preparing Image\");\n                this.generateBase64SVG().then(function(base64_string){\n                    this.button.selector\n                        .attr(\"href\", \"data:image/svg+xml;base64,\\n\" + base64_string)\n                        .classed(\"lz-dashboard-button-gray-disabled\", false)\n                        .classed(\"lz-dashboard-button-gray-highlighted\", true)\n                        .html(\"Download Image\");\n                }.bind(this));\n            }.bind(this))\n            .setOnMouseout(function() {\n                this.button.selector.classed(\"lz-dashboard-button-gray-highlighted\", false);\n            }.bind(this));\n        this.button.show();\n        this.button.selector.attr(\"href-lang\", \"image/svg+xml\").attr(\"download\", \"locuszoom.svg\");\n        return this;\n    };\n    this.css_string = \"\";\n    for (var stylesheet in Object.keys(document.styleSheets)){\n        if ( document.styleSheets[stylesheet].href !== null\n             && document.styleSheets[stylesheet].href.indexOf(\"locuszoom.css\") !== -1){\n            LocusZoom.createCORSPromise(\"GET\", document.styleSheets[stylesheet].href)\n                .then(function(response){\n                    this.css_string = response.replace(/[\\r\\n]/g,\" \").replace(/\\s+/g,\" \");\n                    if (this.css_string.indexOf(\"/* ! LocusZoom HTML Styles */\")){\n                        this.css_string = this.css_string.substring(0, this.css_string.indexOf(\"/* ! LocusZoom HTML Styles */\"));\n                    }\n                }.bind(this));\n            break;\n        }\n    } \n    this.generateBase64SVG = function(){\n        return Q.fcall(function () {\n            // Insert a hidden div, clone the node into that so we can modify it with d3\n            var container = this.parent.selector.append(\"div\").style(\"display\", \"none\")\n                .html(this.parent_plot.svg.node().outerHTML);\n            // Remove unnecessary elements\n            container.selectAll(\"g.lz-curtain\").remove();\n            container.selectAll(\"g.lz-mouse_guide\").remove();\n            // Convert units on axis tick dy attributes from ems to pixels\n            container.selectAll(\"g.tick text\").each(function(){\n                var dy = +(d3.select(this).attr(\"dy\").substring(-2).slice(0,-2))*10;\n                d3.select(this).attr(\"dy\", dy);\n            });\n            // Pull the svg into a string and add the contents of the locuszoom stylesheet\n            // Don't add this with d3 because it will escape the CDATA declaration incorrectly\n            var initial_html = d3.select(container.select(\"svg\").node().parentNode).html();\n            var style_def = \"<style type=\\\"text/css\\\"><![CDATA[ \" + this.css_string + \" ]]></style>\";\n            var insert_at = initial_html.indexOf(\">\") + 1;\n            initial_html = initial_html.slice(0,insert_at) + style_def + initial_html.slice(insert_at);\n            // Delete the container node\n            container.remove();\n            // Base64-encode the string and return it\n            return btoa(encodeURIComponent(initial_html).replace(/%([0-9A-F]{2})/g, function(match, p1) {\n                return String.fromCharCode(\"0x\" + p1);\n            }));\n        }.bind(this));\n    };\n});\n\n/**\n * Button to remove panel from plot.\n *   NOTE: Will only work on panel dashboards.\n * @class LocusZoom.Dashboard.Components.remove_panel\n * @augments LocusZoom.Dashboard.Component\n * @param {Boolean} [layout.suppress_confirm=false] If true, removes the panel without prompting user for confirmation\n */\nLocusZoom.Dashboard.Components.add(\"remove_panel\", function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function() {\n        if (this.button){ return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(\"×\").setTitle(\"Remove panel\")\n            .setOnclick(function(){\n                if (!layout.suppress_confirm && !confirm(\"Are you sure you want to remove this panel? This cannot be undone!\")){\n                    return false;\n                }\n                var panel = this.parent_panel;\n                panel.dashboard.hide(true);\n                d3.select(panel.parent.svg.node().parentNode).on(\"mouseover.\" + panel.getBaseId() + \".dashboard\", null);\n                d3.select(panel.parent.svg.node().parentNode).on(\"mouseout.\" + panel.getBaseId() + \".dashboard\", null);\n                return panel.parent.removePanel(panel.id);\n            }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Button to move panel up relative to other panels (in terms of y-index on the page)\n *   NOTE: Will only work on panel dashboards.\n * @class LocusZoom.Dashboard.Components.move_panel_up\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"move_panel_up\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        if (this.button){\n            var is_at_top = (this.parent_panel.layout.y_index === 0);\n            this.button.disable(is_at_top);\n            return this;\n        }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(\"▴\").setTitle(\"Move panel up\")\n            .setOnclick(function(){\n                this.parent_panel.moveUp();\n                this.update();\n            }.bind(this));\n        this.button.show();\n        return this.update();\n    };\n});\n\n/**\n * Button to move panel down relative to other panels (in terms of y-index on the page)\n *   NOTE: Will only work on panel dashboards.\n * @class LocusZoom.Dashboard.Components.move_panel_down\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"move_panel_down\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        if (this.button){\n            var is_at_bottom = (this.parent_panel.layout.y_index === this.parent_plot.panel_ids_by_y_index.length-1);\n            this.button.disable(is_at_bottom);\n            return this;\n        }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(\"▾\").setTitle(\"Move panel down\")\n            .setOnclick(function(){\n                this.parent_panel.moveDown();\n                this.update();\n            }.bind(this));\n        this.button.show();\n        return this.update();\n    };\n});\n\n/**\n * Button to shift plot region forwards or back by a `step` increment provided in the layout\n * @class LocusZoom.Dashboard.Components.shift_region\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {number} [layout.step=50000] The stepsize to change the region by\n * @param {string} [layout.button_html]\n * @param {string} [layout.button_title]\n */\nLocusZoom.Dashboard.Components.add(\"shift_region\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    if (isNaN(this.parent_plot.state.start) || isNaN(this.parent_plot.state.end)){\n        this.update = function(){};\n        console.warn(\"Unable to add shift_region dashboard component: plot state does not have region bounds\");\n        return;\n    }\n    if (isNaN(layout.step) || layout.step === 0){ layout.step = 50000; }\n    if (typeof layout.button_html !== \"string\"){ layout.button_html = layout.step > 0 ? \">\" : \"<\"; }\n    if (typeof layout.button_title !== \"string\"){\n        layout.button_title = \"Shift region by \" + (layout.step > 0 ? \"+\" : \"-\") + LocusZoom.positionIntToString(Math.abs(layout.step),null,true);\n    }\n    this.update = function(){\n        if (this.button){ return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title)\n            .setOnclick(function(){\n                this.parent_plot.applyState({\n                    start: Math.max(this.parent_plot.state.start + layout.step, 1),\n                    end: this.parent_plot.state.end + layout.step\n                });\n            }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Zoom in or out on the plot, centered on the middle of the plot region, by the specified amount\n * @class LocusZoom.Dashboard.Components.zoom_region\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {number} [layout.step=0.2] The amount to zoom in by (where 1 indicates 100%)\n */\nLocusZoom.Dashboard.Components.add(\"zoom_region\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    if (isNaN(this.parent_plot.state.start) || isNaN(this.parent_plot.state.end)){\n        this.update = function(){};\n        console.warn(\"Unable to add zoom_region dashboard component: plot state does not have region bounds\");\n        return;\n    }\n    if (isNaN(layout.step) || layout.step === 0){ layout.step = 0.2; }\n    if (typeof layout.button_html != \"string\"){ layout.button_html = layout.step > 0 ? \"z–\" : \"z+\"; }\n    if (typeof layout.button_title != \"string\"){\n        layout.button_title = \"Zoom region \" + (layout.step > 0 ? \"out\" : \"in\") + \" by \" + (Math.abs(layout.step)*100).toFixed(1) + \"%\";\n    }\n    this.update = function(){\n        if (this.button){\n            var can_zoom = true;\n            var current_region_scale = this.parent_plot.state.end - this.parent_plot.state.start;\n            if (layout.step > 0 && !isNaN(this.parent_plot.layout.max_region_scale) && current_region_scale >= this.parent_plot.layout.max_region_scale){\n                can_zoom = false;\n            }\n            if (layout.step < 0 && !isNaN(this.parent_plot.layout.min_region_scale) && current_region_scale <= this.parent_plot.layout.min_region_scale){\n                can_zoom = false;\n            }\n            this.button.disable(!can_zoom);\n            return this;\n        }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title)\n            .setOnclick(function(){\n                var current_region_scale = this.parent_plot.state.end - this.parent_plot.state.start;\n                var zoom_factor = 1 + layout.step;\n                var new_region_scale = current_region_scale * zoom_factor;\n                if (!isNaN(this.parent_plot.layout.max_region_scale)){\n                    new_region_scale = Math.min(new_region_scale, this.parent_plot.layout.max_region_scale);\n                }\n                if (!isNaN(this.parent_plot.layout.min_region_scale)){\n                    new_region_scale = Math.max(new_region_scale, this.parent_plot.layout.min_region_scale);\n                }\n                var delta = Math.floor((new_region_scale - current_region_scale) / 2);\n                this.parent_plot.applyState({\n                    start: Math.max(this.parent_plot.state.start - delta, 1),\n                    end: this.parent_plot.state.end + delta\n                });\n            }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Renders button with arbitrary text that, when clicked, shows a dropdown containing arbitrary HTML\n *  NOTE: Trusts content exactly as given. XSS prevention is the responsibility of the implementer.\n * @class LocusZoom.Dashboard.Components.menu\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {string} layout.button_html The HTML to render inside the button\n * @param {string} layout.button_title Text to display as a tooltip when hovering over the button\n * @param {string} layout.menu_html The HTML content of the dropdown menu\n */\nLocusZoom.Dashboard.Components.add(\"menu\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        if (this.button){ return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title);\n        this.button.menu.setPopulate(function(){\n            this.button.menu.inner_selector.html(layout.menu_html);\n        }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Special button/menu to allow model building by tracking individual covariants. Will track a list of covariate\n *   objects and store them in the special `model.covariates` field of plot `state`.\n * @class LocusZoom.Dashboard.Components.covariates_model\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {string} layout.button_html The HTML to render inside the button\n * @param {string} layout.button_title Text to display as a tooltip when hovering over the button\n */\nLocusZoom.Dashboard.Components.add(\"covariates_model\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n\n    this.initialize = function(){\n        // Initialize state.model.covariates\n        this.parent_plot.state.model = this.parent_plot.state.model || {};\n        this.parent_plot.state.model.covariates = this.parent_plot.state.model.covariates || [];\n        // Create an object at the plot level for easy access to interface methods in custom client-side JS\n        /**\n         * When a covariates model dashboard element is present, create (one) object at the plot level that exposes\n         *   component data and state for custom interactions with other plot elements.\n         * @class LocusZoom.Plot.CovariatesModel\n         */\n        this.parent_plot.CovariatesModel = {\n            /** @member {LocusZoom.Dashboard.Component.Button} */\n            button: this,\n            /**\n             * Add an element to the model and show a representation of it in the dashboard component menu. If the\n             *   element is already part of the model, do nothing (to avoid adding duplicates).\n             * When plot state is changed, this will automatically trigger requests for new data accordingly.\n             * @param {string|object} element_reference Can be any value that can be put through JSON.stringify()\n             *   to create a serialized representation of itself.\n             */\n            add: function(element_reference){\n                var element = JSON.parse(JSON.stringify(element_reference));\n                if (typeof element_reference == \"object\" && typeof element.html != \"string\"){\n                    element.html = ( (typeof element_reference.toHTML == \"function\") ? element_reference.toHTML() : element_reference.toString());\n                }\n                // Check if the element is already in the model covariates array and return if it is.\n                for (var i = 0; i < this.state.model.covariates.length; i++) {\n                    if (JSON.stringify(this.state.model.covariates[i]) === JSON.stringify(element)) {\n                        return this;\n                    }\n                }\n                this.state.model.covariates.push(element);\n                this.applyState();\n                this.CovariatesModel.updateComponent();\n                return this;\n            }.bind(this.parent_plot),\n            /**\n             * Remove an element from `state.model.covariates` (and from the dashboard component menu's\n             *  representation of the state model). When plot state is changed, this will automatically trigger\n             *  requests for new data accordingly.\n             * @param {number} idx Array index of the element, in the `state.model.covariates array`.\n             */\n            removeByIdx: function(idx){\n                if (typeof this.state.model.covariates[idx] == \"undefined\"){\n                    throw(\"Unable to remove model covariate, invalid index: \" + idx.toString());\n                }\n                this.state.model.covariates.splice(idx, 1);\n                this.applyState();\n                this.CovariatesModel.updateComponent();\n                return this;\n            }.bind(this.parent_plot),\n            /**\n             * Empty the `state.model.covariates` array (and dashboard component menu representation thereof) of all\n             *  elements. When plot state is changed, this will automatically trigger requests for new data accordingly\n             */\n            removeAll: function(){\n                this.state.model.covariates = [];\n                this.applyState();\n                this.CovariatesModel.updateComponent();\n                return this;\n            }.bind(this.parent_plot),\n            /**\n             * Manually trigger the update methods on the dashboard component's button and menu elements to force\n             *   display of most up-to-date content. Can be used to force the dashboard to reflect changes made, eg if\n             *   modifying `state.model.covariates` directly instead of via `plot.CovariatesModel`\n             */\n            updateComponent: function(){\n                this.button.update();\n                this.button.menu.update();\n            }.bind(this)\n        };\n    }.bind(this);\n\n    this.update = function(){\n\n        if (this.button){ return this; }\n\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title)\n            .setOnclick(function(){\n                this.button.menu.populate();\n            }.bind(this));\n\n        this.button.menu.setPopulate(function(){\n            var selector = this.button.menu.inner_selector;\n            selector.html(\"\");\n            // General model HTML representation\n            if (typeof this.parent_plot.state.model.html != \"undefined\"){\n                selector.append(\"div\").html(this.parent_plot.state.model.html);\n            }\n            // Model covariates table\n            if (!this.parent_plot.state.model.covariates.length){\n                selector.append(\"i\").html(\"no covariates in model\");\n            } else {\n                selector.append(\"h5\").html(\"Model Covariates (\" + this.parent_plot.state.model.covariates.length + \")\");\n                var table = selector.append(\"table\");\n                this.parent_plot.state.model.covariates.forEach(function(covariate, idx){\n                    var html = ( (typeof covariate == \"object\" && typeof covariate.html == \"string\") ? covariate.html : covariate.toString() );\n                    var row = table.append(\"tr\");\n                    row.append(\"td\").append(\"button\")\n                        .attr(\"class\", \"lz-dashboard-button lz-dashboard-button-\" + this.layout.color)\n                        .style({ \"margin-left\": \"0em\" })\n                        .on(\"click\", function(){\n                            this.parent_plot.CovariatesModel.removeByIdx(idx);\n                        }.bind(this))\n                        .html(\"×\");\n                    row.append(\"td\").html(html);\n                }.bind(this));\n                selector.append(\"button\")\n                    .attr(\"class\", \"lz-dashboard-button lz-dashboard-button-\" + this.layout.color)\n                    .style({ \"margin-left\": \"4px\" }).html(\"× Remove All Covariates\")\n                    .on(\"click\", function(){\n                        this.parent_plot.CovariatesModel.removeAll();\n                    }.bind(this));\n            }\n        }.bind(this));\n\n        this.button.preUpdate = function(){\n            var html = \"Model\";\n            if (this.parent_plot.state.model.covariates.length){\n                var cov = this.parent_plot.state.model.covariates.length > 1 ? \"covariates\" : \"covariate\";\n                html += \" (\" + this.parent_plot.state.model.covariates.length + \" \" + cov + \")\";\n            }\n            this.button.setHtml(html).disable(false);\n        }.bind(this);\n\n        this.button.show();\n\n        return this;\n    };\n});\n\n/**\n * Button to toggle split tracks\n * @class LocusZoom.Dashboard.Components.toggle_split_tracks\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"toggle_split_tracks\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    if (!layout.data_layer_id){ layout.data_layer_id = \"intervals\"; }\n    if (!this.parent_panel.data_layers[layout.data_layer_id]){\n        throw (\"Dashboard toggle split tracks component missing valid data layer ID\");\n    }\n    this.update = function(){\n        var data_layer = this.parent_panel.data_layers[layout.data_layer_id];\n        var html = data_layer.layout.split_tracks ? \"Merge Tracks\" : \"Split Tracks\";\n        if (this.button){\n            this.button.setHtml(html);\n            this.button.show();\n            this.parent.position();\n            return this;\n        } else {\n            this.button = new LocusZoom.Dashboard.Component.Button(this)\n                .setColor(layout.color).setHtml(html)\n                .setTitle(\"Toggle whether tracks are split apart or merged together\")\n                .setOnclick(function(){\n                    data_layer.toggleSplitTracks();\n                    if (this.scale_timeout){ clearTimeout(this.scale_timeout); }\n                    var timeout = data_layer.layout.transition ? +data_layer.layout.transition.duration || 0 : 0;\n                    this.scale_timeout = setTimeout(function(){\n                        this.parent_panel.scaleHeightToData();\n                        this.parent_plot.positionPanels();\n                    }.bind(this), timeout);\n                    this.update();\n                }.bind(this));\n            return this.update();\n        }\n    };\n});\n\n/**\n * Button to resize panel height to fit available data (eg when showing a list of tracks)\n * @class LocusZoom.Dashboard.Components.resize_to_data\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"resize_to_data\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        if (this.button){ return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(\"Resize to Data\")\n            .setTitle(\"Automatically resize this panel to fit the data its currently showing\")\n            .setOnclick(function(){\n                this.parent_panel.scaleHeightToData();\n                this.update();\n            }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Button to toggle legend\n * @class LocusZoom.Dashboard.Components.toggle_legend\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"toggle_legend\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        var html = this.parent_panel.legend.layout.hidden ? \"Show Legend\" : \"Hide Legend\";\n        if (this.button){\n            this.button.setHtml(html).show();\n            this.parent.position();\n            return this;\n        }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color)\n            .setTitle(\"Show or hide the legend for this panel\")\n            .setOnclick(function(){\n                this.parent_panel.legend.layout.hidden = !this.parent_panel.legend.layout.hidden;\n                this.parent_panel.legend.render();\n                this.update();\n            }.bind(this));\n        return this.update();\n    };\n});\n\n/**\n * Menu for manipulating multiple data layers in a single panel: show/hide, change order, etc.\n * @class LocusZoom.Dashboard.Components.data_layers\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"data_layers\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n\n    this.update = function(){\n\n        if (typeof layout.button_html != \"string\"){ layout.button_html = \"Data Layers\"; }\n        if (typeof layout.button_title != \"string\"){ layout.button_title = \"Manipulate Data Layers (sort, dim, show/hide, etc.)\"; }\n\n        if (this.button){ return this; }\n\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title)\n            .setOnclick(function(){\n                this.button.menu.populate();\n            }.bind(this));\n\n        this.button.menu.setPopulate(function(){\n            this.button.menu.inner_selector.html(\"\");\n            var table = this.button.menu.inner_selector.append(\"table\");\n            this.parent_panel.data_layer_ids_by_z_index.slice().reverse().forEach(function(id, idx){\n                var data_layer = this.parent_panel.data_layers[id];\n                var name = (typeof data_layer.layout.name != \"string\") ? data_layer.id : data_layer.layout.name;\n                var row = table.append(\"tr\");\n                // Layer name\n                row.append(\"td\").html(name);\n                // Status toggle buttons\n                layout.statuses.forEach(function(status_adj){\n                    var status_idx = LocusZoom.DataLayer.Statuses.adjectives.indexOf(status_adj);\n                    var status_verb = LocusZoom.DataLayer.Statuses.verbs[status_idx];\n                    var html, onclick, highlight;\n                    if (data_layer.global_statuses[status_adj]){\n                        html = LocusZoom.DataLayer.Statuses.menu_antiverbs[status_idx];\n                        onclick = \"un\" + status_verb + \"AllElements\";\n                        highlight = \"-highlighted\";\n                    } else {\n                        html = LocusZoom.DataLayer.Statuses.verbs[status_idx];\n                        onclick = status_verb + \"AllElements\";\n                        highlight = \"\";\n                    }\n                    row.append(\"td\").append(\"a\")\n                        .attr(\"class\", \"lz-dashboard-button lz-dashboard-button-\" + this.layout.color + highlight)\n                        .style({ \"margin-left\": \"0em\" })\n                        .on(\"click\", function(){ data_layer[onclick](); this.button.menu.populate(); }.bind(this))\n                        .html(html);\n                }.bind(this));\n                // Sort layer buttons\n                var at_top = (idx === 0);\n                var at_bottom = (idx === (this.parent_panel.data_layer_ids_by_z_index.length - 1));\n                var td = row.append(\"td\");\n                td.append(\"a\")\n                    .attr(\"class\", \"lz-dashboard-button lz-dashboard-button-group-start lz-dashboard-button-\" + this.layout.color + (at_bottom ? \"-disabled\" : \"\"))\n                    .style({ \"margin-left\": \"0em\" })\n                    .on(\"click\", function(){ data_layer.moveDown(); this.button.menu.populate(); }.bind(this))\n                    .html(\"▾\").attr(\"title\", \"Move layer down (further back)\");\n                td.append(\"a\")\n                    .attr(\"class\", \"lz-dashboard-button lz-dashboard-button-group-middle lz-dashboard-button-\" + this.layout.color + (at_top ? \"-disabled\" : \"\"))\n                    .style({ \"margin-left\": \"0em\" })\n                    .on(\"click\", function(){ data_layer.moveUp(); this.button.menu.populate(); }.bind(this))\n                    .html(\"▴\").attr(\"title\", \"Move layer up (further front)\");\n                td.append(\"a\")\n                    .attr(\"class\", \"lz-dashboard-button lz-dashboard-button-group-end lz-dashboard-button-red\")\n                    .style({ \"margin-left\": \"0em\" })\n                    .on(\"click\", function(){\n                        if (confirm(\"Are you sure you want to remove the \" + name + \" layer? This cannot be undone!\")){\n                            data_layer.parent.removeDataLayer(id);\n                        }\n                        return this.button.menu.populate();\n                    }.bind(this))\n                    .html(\"×\").attr(\"title\", \"Remove layer\");\n            }.bind(this));\n            return this;\n        }.bind(this));\n\n        this.button.show();\n\n        return this;\n    };\n});\n\n/**\n * Dropdown menu allowing the user to choose between different display options for a single specific data layer\n *  within a panel.\n *\n * This allows controlling how points on a datalayer can be displayed- any display options supported via the layout for the target datalayer. This includes point\n *  size/shape, coloring, etc.\n *\n * This button intentionally limits display options it can control to those available on common plot types.\n *   Although the list of options it sets can be overridden (to control very special custom plot types), this\n *   capability should be used sparingly if at all.\n *\n * @class LocusZoom.Dashboard.Components.display_options\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {String} [layout.button_html=\"Display options\"] Text to display on the toolbar button\n * @param {String} [layout.button_title=\"Control how plot items are displayed\"] Hover text for the toolbar button\n * @param {string} layout.layer_name Specify the datalayer that this button should affect\n * @param {string} [layout.default_config_display_name] Store the default configuration for this datalayer\n *  configuration, and show a button to revert to the \"default\" (listing the human-readable display name provided)\n * @param {Array} [layout.fields_whitelist='see code'] The list of presentation fields that this button can control.\n *  This can be overridden if this button needs to be used on a custom layer type with special options.\n * @typedef {{display_name: string, display: Object}} DisplayOptionsButtonConfigField\n * @param {DisplayOptionsButtonConfigField[]} layout.options Specify a label and set of layout directives associated\n *  with this `display` option. Display field should include all changes to datalayer presentation options.\n */\nLocusZoom.Dashboard.Components.add(\"display_options\", function (layout) {\n    if (typeof layout.button_html != \"string\"){ layout.button_html = \"Display options\"; }\n    if (typeof layout.button_title != \"string\"){ layout.button_title = \"Control how plot items are displayed\"; }\n\n    // Call parent constructor\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n\n    // List of layout fields that this button is allowed to control. This ensures that we don't override any other\n    //  information (like plot height etc) while changing point rendering\n    var allowed_fields = layout.fields_whitelist || [\"color\", \"fill_opacity\", \"label\", \"legend\",\n        \"point_shape\", \"point_size\", \"tooltip\", \"tooltip_positioning\"];\n\n    var dataLayer = this.parent_panel.data_layers[layout.layer_name];\n    var dataLayerLayout = dataLayer.layout;\n\n    // Store default configuration for the layer as a clean deep copy, so we may revert later\n    var defaultConfig = {};\n    allowed_fields.forEach(function(name) {\n        var configSlot = dataLayerLayout[name];\n        if (configSlot) {\n            defaultConfig[name] = JSON.parse(JSON.stringify(configSlot));\n        }\n    });\n\n    /**\n     * Which item in the menu is currently selected. (track for rerendering menu)\n     * @member {String}\n     * @private\n     */\n    this._selected_item = \"default\";\n\n    // Define the button + menu that provides the real functionality for this dashboard component\n    var self = this;\n    this.button = new LocusZoom.Dashboard.Component.Button(self)\n        .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title)\n        .setOnclick(function () {\n            self.button.menu.populate();\n        });\n    this.button.menu.setPopulate(function () {\n        // Multiple copies of this button might be used on a single LZ page; append unique IDs where needed\n        var uniqueID = Math.floor(Math.random() * 1e4).toString();\n\n        self.button.menu.inner_selector.html(\"\");\n        var table = self.button.menu.inner_selector.append(\"table\");\n\n        var menuLayout = self.layout;\n\n        var renderRow = function(display_name, display_options, row_id) { // Helper method\n            var row = table.append(\"tr\");\n            row.append(\"td\")\n                .append(\"input\")\n                .attr({type: \"radio\", name: \"color-picker-\" + uniqueID, value: row_id})\n                .property(\"checked\", (row_id === self._selected_item))\n                .on(\"click\", function () {\n                    Object.keys(display_options).forEach(function(field_name) {\n                        dataLayer.layout[field_name] = display_options[field_name];\n                    });\n                    self._selected_item = row_id;\n                    self.parent_panel.render();\n                    var legend = self.parent_panel.legend;\n                    if (legend && display_options.legend) {\n                        // Update the legend only if necessary\n                        legend.render();\n                    }\n                });\n            row.append(\"td\").text(display_name);\n        };\n        // Render the \"display options\" menu: default and special custom options\n        var defaultName = menuLayout.default_config_display_name || \"Default style\";\n        renderRow(defaultName, defaultConfig, \"default\");\n        menuLayout.options.forEach(function (item, index) {\n            renderRow(item.display_name, item.display, index);\n        });\n        return self;\n    });\n\n    this.update = function () {\n        this.button.show();\n        return this;\n    };\n});\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n * An SVG object used to display contextual information about a panel.\n * Panel layouts determine basic features of a legend - its position in the panel, orientation, title, etc.\n * Layouts of child data layers of the panel determine the actual content of the legend.\n *\n * @class\n * @param {LocusZoom.Panel} parent\n*/\nLocusZoom.Legend = function(parent){\n    if (!(parent instanceof LocusZoom.Panel)){\n        throw \"Unable to create legend, parent must be a locuszoom panel\";\n    }\n    /** @member {LocusZoom.Panel} */\n    this.parent = parent;\n    /** @member {String} */\n    this.id = this.parent.getBaseId() + \".legend\";\n\n    this.parent.layout.legend = LocusZoom.Layouts.merge(this.parent.layout.legend || {}, LocusZoom.Legend.DefaultLayout);\n    /** @member {Object} */\n    this.layout = this.parent.layout.legend;\n\n    /** @member {d3.selection} */\n    this.selector = null;\n    /** @member {d3.selection} */\n    this.background_rect = null;\n    /** @member {d3.selection[]} */\n    this.elements = [];\n    /**\n     * SVG selector for the group containing all elements in the legend\n     * @protected\n     * @member {d3.selection|null}\n     */\n    this.elements_group = null;\n\n    /**\n     * TODO: Not sure if this property is used; the external-facing methods are setting `layout.hidden` instead. Tentatively mark deprecated.\n     * @deprecated\n     * @protected\n     * @member {Boolean}\n     */\n    this.hidden = false;\n\n    // TODO Revisit constructor return value; see https://stackoverflow.com/a/3350364/1422268\n    return this.render();\n};\n\n/**\n * The default layout used by legends (used internally)\n * @protected\n * @member {Object}\n */\nLocusZoom.Legend.DefaultLayout = {\n    orientation: \"vertical\",\n    origin: { x: 0, y: 0 },\n    width: 10,\n    height: 10,\n    padding: 5,\n    label_size: 12,\n    hidden: false\n};\n\n/**\n * Render the legend in the parent panel\n */\nLocusZoom.Legend.prototype.render = function(){\n\n    // Get a legend group selector if not yet defined\n    if (!this.selector){\n        this.selector = this.parent.svg.group.append(\"g\")\n            .attr(\"id\", this.parent.getBaseId() + \".legend\").attr(\"class\", \"lz-legend\");\n    }\n\n    // Get a legend background rect selector if not yet defined\n    if (!this.background_rect){\n        this.background_rect = this.selector.append(\"rect\")\n            .attr(\"width\", 100).attr(\"height\", 100).attr(\"class\", \"lz-legend-background\");\n    }\n\n    // Get a legend elements group selector if not yet defined\n    if (!this.elements_group){\n        this.elements_group = this.selector.append(\"g\");\n    }\n\n    // Remove all elements from the document and re-render from scratch\n    this.elements.forEach(function(element){\n        element.remove();\n    });\n    this.elements = [];\n\n    // Gather all elements from data layers in order (top to bottom) and render them\n    var padding = +this.layout.padding || 1;\n    var x = padding;\n    var y = padding;\n    var line_height = 0;\n    this.parent.data_layer_ids_by_z_index.slice().reverse().forEach(function(id){\n        if (Array.isArray(this.parent.data_layers[id].layout.legend)){\n            this.parent.data_layers[id].layout.legend.forEach(function(element){\n                var selector = this.elements_group.append(\"g\")\n                    .attr(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n                var label_size = +element.label_size || +this.layout.label_size || 12;\n                var label_x = 0;\n                var label_y = (label_size/2) + (padding/2);\n                line_height = Math.max(line_height, label_size + padding);\n                // Draw the legend element symbol (line, rect, shape, etc)\n                if (element.shape === \"line\"){\n                    // Line symbol\n                    var length = +element.length || 16;\n                    var path_y = (label_size/4) + (padding/2);\n                    selector.append(\"path\").attr(\"class\", element.class || \"\")\n                        .attr(\"d\", \"M0,\" + path_y + \"L\" + length + \",\" + path_y)\n                        .style(element.style || {});\n                    label_x = length + padding;\n                } else if (element.shape === \"rect\"){\n                    // Rect symbol\n                    var width = +element.width || 16;\n                    var height = +element.height || width;\n                    selector.append(\"rect\").attr(\"class\", element.class || \"\")\n                        .attr(\"width\", width).attr(\"height\", height)\n                        .attr(\"fill\", element.color || {})\n                        .style(element.style || {});\n                    label_x = width + padding;\n                    line_height = Math.max(line_height, height + padding);\n                } else if (d3.svg.symbolTypes.indexOf(element.shape) !== -1) {\n                    // Shape symbol (circle, diamond, etc.)\n                    var size = +element.size || 40;\n                    var radius = Math.ceil(Math.sqrt(size/Math.PI));\n                    selector.append(\"path\").attr(\"class\", element.class || \"\")\n                        .attr(\"d\", d3.svg.symbol().size(size).type(element.shape))\n                        .attr(\"transform\", \"translate(\" + radius + \",\" + (radius+(padding/2)) + \")\")\n                        .attr(\"fill\", element.color || {})\n                        .style(element.style || {});\n                    label_x = (2*radius) + padding;\n                    label_y = Math.max((2*radius)+(padding/2), label_y);\n                    line_height = Math.max(line_height, (2*radius) + padding);\n                }\n                // Draw the legend element label\n                selector.append(\"text\").attr(\"text-anchor\", \"left\").attr(\"class\", \"lz-label\")\n                    .attr(\"x\", label_x).attr(\"y\", label_y).style({\"font-size\": label_size}).text(element.label);\n                // Position the legend element group based on legend layout orientation\n                var bcr = selector.node().getBoundingClientRect();\n                if (this.layout.orientation === \"vertical\"){\n                    y += bcr.height + padding;\n                    line_height = 0;\n                } else {\n                    // Ensure this element does not exceed the panel width\n                    // (E.g. drop to the next line if it does, but only if it's not the only element on this line)\n                    var right_x = this.layout.origin.x + x + bcr.width;\n                    if (x > padding && right_x > this.parent.layout.width){\n                        y += line_height;\n                        x = padding;\n                        selector.attr(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n                    }\n                    x += bcr.width + (3*padding);\n                }\n                // Store the element\n                this.elements.push(selector);\n            }.bind(this));\n        }\n    }.bind(this));\n\n    // Scale the background rect to the elements in the legend\n    var bcr = this.elements_group.node().getBoundingClientRect();\n    this.layout.width = bcr.width + (2*this.layout.padding);\n    this.layout.height = bcr.height + (2*this.layout.padding);\n    this.background_rect\n        .attr(\"width\", this.layout.width)\n        .attr(\"height\", this.layout.height);\n\n    // Set the visibility on the legend from the \"hidden\" flag\n    // TODO: `show()` and `hide()` call a full rerender; might be able to make this more lightweight?\n    this.selector.style({ visibility: this.layout.hidden ? \"hidden\" : \"visible\" });\n\n    // TODO: Annotate return type and make consistent\n    return this.position();\n};\n\n/**\n * Place the legend in position relative to the panel, as specified in the layout configuration\n * @returns {LocusZoom.Legend | null}\n * TODO: should this always be chainable?\n */\nLocusZoom.Legend.prototype.position = function(){\n    if (!this.selector){ return this; }\n    var bcr = this.selector.node().getBoundingClientRect();\n    if (!isNaN(+this.layout.pad_from_bottom)){\n        this.layout.origin.y = this.parent.layout.height - bcr.height - +this.layout.pad_from_bottom;\n    }\n    if (!isNaN(+this.layout.pad_from_right)){\n        this.layout.origin.x = this.parent.layout.width - bcr.width - +this.layout.pad_from_right;\n    }\n    this.selector.attr(\"transform\", \"translate(\" + this.layout.origin.x + \",\" + this.layout.origin.y + \")\");\n};\n\n/**\n * Hide the legend (triggers a re-render)\n * @public\n */\nLocusZoom.Legend.prototype.hide = function(){\n    this.layout.hidden = true;\n    this.render();\n};\n\n/**\n * Show the legend (triggers a re-render)\n * @public\n */\nLocusZoom.Legend.prototype.show = function(){\n    this.layout.hidden = false;\n    this.render();\n};\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n * LocusZoom functionality used for data parsing and retrieval\n * @namespace\n * @public\n */\nLocusZoom.Data = LocusZoom.Data ||  {};\n\n/**\n * Create and coordinate an ensemble of (namespaced) data source instances\n * @public\n * @class\n */\nLocusZoom.DataSources = function() {\n    /** @member {Object.<string, LocusZoom.Data.Source>} */\n    this.sources = {};\n};\n\n/** @deprecated */\nLocusZoom.DataSources.prototype.addSource = function(ns, x) {\n    console.warn(\"Warning: .addSource() is deprecated. Use .add() instead\");\n    return this.add(ns, x);\n};\n\n/**\n * Add a (namespaced) datasource to the plot\n * @public\n * @param {String} ns A namespace used for fields from this data source\n * @param {LocusZoom.Data.Source|Array|null} x An instantiated datasource, or an array of arguments that can be used to\n *   create a known datasource type.\n */\nLocusZoom.DataSources.prototype.add = function(ns, x) {\n    return this.set(ns, x);\n};\n\n/** @protected */\nLocusZoom.DataSources.prototype.set = function(ns, x) {\n    if (Array.isArray(x)) {\n        var dsobj = LocusZoom.KnownDataSources.create.apply(null, x);\n        this.sources[ns] = dsobj;\n    } else {\n        if (x !== null) {\n            this.sources[ns] = x;\n        } else {\n            delete this.sources[ns];\n        }\n    }\n    return this;\n};\n\n/** @deprecated */\nLocusZoom.DataSources.prototype.getSource = function(ns) {\n    console.warn(\"Warning: .getSource() is deprecated. Use .get() instead\");\n    return this.get(ns);\n};\n\n/**\n * Return the datasource associated with a given namespace\n * @public\n * @param {String} ns Namespace\n * @returns {LocusZoom.Data.Source}\n */\nLocusZoom.DataSources.prototype.get = function(ns) {\n    return this.sources[ns];\n};\n\n/** @deprecated */\nLocusZoom.DataSources.prototype.removeSource = function(ns) {\n    console.warn(\"Warning: .removeSource() is deprecated. Use .remove() instead\");\n    return this.remove(ns);\n};\n\n/**\n * Remove the datasource associated with a given namespace\n * @public\n * @param {String} ns Namespace\n */\nLocusZoom.DataSources.prototype.remove = function(ns) {\n    return this.set(ns, null);\n};\n\n/**\n * Populate a list of datasources specified as a JSON object\n * @public\n * @param {String|Object} x An object or JSON representation containing {ns: configArray} entries\n * @returns {LocusZoom.DataSources}\n */\nLocusZoom.DataSources.prototype.fromJSON = function(x) {\n    if (typeof x === \"string\") {\n        x = JSON.parse(x);\n    }\n    var ds = this;\n    Object.keys(x).forEach(function(ns) {\n        ds.set(ns, x[ns]);\n    });\n    return ds;\n};\n\n/**\n * Return the names of all currently recognized datasources\n * @public\n * @returns {Array}\n */\nLocusZoom.DataSources.prototype.keys = function() {\n    return Object.keys(this.sources);\n};\n\n/**\n * Datasources can be instantiated from a JSON object instead of code. This represents existing sources in that format.\n *   For example, this can be helpful when sharing plots, or to share settings with others when debugging\n * @public\n */\nLocusZoom.DataSources.prototype.toJSON = function() {\n    return this.sources;\n};\n\n/**\n * Represents an addressable unit of data from a namespaced datasource, subject to specified value transformations.\n *\n * When used by a data layer, fields will automatically be re-fetched from the appropriate data source whenever the\n *   state of a plot fetches, eg pan or zoom operations that would affect what data is displayed.\n *\n * @public\n * @class\n * @param {String} field A string representing the namespace of the datasource, the name of the desired field to fetch\n *   from that datasource, and arbitrarily many transformations to apply to the value. The namespace and\n *   transformation(s) are optional and information is delimited according to the general syntax\n *   `[namespace:]name[|transformation][|transformation]`. For example, `association:pvalue|neglog10`\n */\nLocusZoom.Data.Field = function(field){\n    \n    var parts = /^(?:([^:]+):)?([^:|]*)(\\|.+)*$/.exec(field);\n    /** @member {String} */\n    this.full_name = field;\n    /** @member {String} */\n    this.namespace = parts[1] || null;\n    /** @member {String} */\n    this.name = parts[2] || null;\n    /** @member {Array} */\n    this.transformations = [];\n    \n    if (typeof parts[3] == \"string\" && parts[3].length > 1){\n        this.transformations = parts[3].substring(1).split(\"|\");\n        this.transformations.forEach(function(transform, i){\n            this.transformations[i] = LocusZoom.TransformationFunctions.get(transform);\n        }.bind(this));\n    }\n\n    this.applyTransformations = function(val){\n        this.transformations.forEach(function(transform){\n            val = transform(val);\n        });\n        return val;\n    };\n\n    // Resolve the field for a given data element.\n    // First look for a full match with transformations already applied by the data requester.\n    // Otherwise prefer a namespace match and fall back to just a name match, applying transformations on the fly.\n    this.resolve = function(d){\n        if (typeof d[this.full_name] == \"undefined\"){\n            var val = null;\n            if (typeof (d[this.namespace+\":\"+this.name]) != \"undefined\"){ val = d[this.namespace+\":\"+this.name]; }\n            else if (typeof d[this.name] != \"undefined\"){ val = d[this.name]; }\n            d[this.full_name] = this.applyTransformations(val);\n        }\n        return d[this.full_name];\n    };\n    \n};\n\n/**\n * The Requester manages fetching of data across multiple data sources. It is used internally by LocusZoom data layers.\n *   It passes state information and ensures that data is formatted in the manner expected by the plot.\n *\n * It is also responsible for constructing a \"chain\" of dependent requests, by requesting each datasource\n *   sequentially in the order specified in the datalayer `fields` array. Data sources are only chained within a\n *   data layer, and only if that layer requests more than one kind of data source.\n * @param {LocusZoom.DataSources} sources An object of {ns: LocusZoom.Data.Source} instances\n * @class\n */\nLocusZoom.Data.Requester = function(sources) {\n\n    function split_requests(fields) {\n        // Given a fields array, return an object specifying what datasource names the data layer should make requests\n        //  to, and how to handle the returned data\n        var requests = {};\n        // Regular expression finds namespace:field|trans\n        var re = /^(?:([^:]+):)?([^:|]*)(\\|.+)*$/;\n        fields.forEach(function(raw) {\n            var parts = re.exec(raw);\n            var ns = parts[1] || \"base\";\n            var field = parts[2];\n            var trans = LocusZoom.TransformationFunctions.get(parts[3]);\n            if (typeof requests[ns] ==\"undefined\") {\n                requests[ns] = {outnames:[], fields:[], trans:[]};\n            }\n            requests[ns].outnames.push(raw);\n            requests[ns].fields.push(field);\n            requests[ns].trans.push(trans);\n        });\n        return requests;\n    }\n\n    /**\n     * Fetch data, and create a chain that only connects two data sources if they depend on each other\n     * @param {Object} state The current \"state\" of the plot, such as chromosome and start/end positions\n     * @param {String[]} fields The list of data fields specified in the `layout` for a specific data layer\n     * @returns {Promise}\n     */\n    this.getData = function(state, fields) {\n        var requests = split_requests(fields);\n        // Create an array of functions that, when called, will trigger the request to the specified datasource\n        var promises = Object.keys(requests).map(function(key) {\n            if (!sources.get(key)) {\n                throw(\"Datasource for namespace \" + key + \" not found\");\n            }\n            return sources.get(key).getData(state, requests[key].fields, \n                                            requests[key].outnames, requests[key].trans);\n        });\n        //assume the fields are requested in dependent order\n        //TODO: better manage dependencies\n        var ret = Q.when({header:{}, body:{}});\n        for(var i=0; i < promises.length; i++) {\n            // If a single datalayer uses multiple sources, perform the next request when the previous one completes\n            ret = ret.then(promises[i]);\n        }\n        return ret;\n    };\n};\n\n/**\n * Base class for LocusZoom data sources\n * This can be extended with .extend() to create custom data sources\n * @class\n * @public\n */\nLocusZoom.Data.Source = function() {\n    /**\n     * Whether this source should enable caching\n     * @member {Boolean}\n     */\n    this.enableCache = true;\n    /**\n     * Whether this data source type is dependent on previous requests- for example, the LD source cannot annotate\n     *  association data if no data was found for that region.\n     * @member {boolean}\n     */\n    this.dependentSource = false;\n};\n\n/**\n * A default constructor that can be used when creating new data sources\n * @param {String|Object} init Basic configuration- either a url, or a config object\n * @param {String} [init.url] The datasource URL\n * @param {String} [init.params] Initial config params for the datasource\n */\nLocusZoom.Data.Source.prototype.parseInit = function(init) {\n    if (typeof init === \"string\") {\n        /** @member {String} */\n        this.url = init;\n        /** @member {String} */\n        this.params = {};\n    } else {\n        this.url = init.url;\n        this.params = init.params || {};\n    }\n    if (!this.url) {\n        throw(\"Source not initialized with required URL\");\n    }\n\n};\n\n/**\n * Fetch the internal string used to represent this data when cache is used\n * @protected\n * @param state\n * @param chain\n * @param fields\n * @returns {String|undefined}\n */\nLocusZoom.Data.Source.prototype.getCacheKey = function(state, chain, fields) {\n    var url = this.getURL && this.getURL(state, chain, fields);\n    return url;\n};\n\n/**\n * Fetch data from a remote location\n * @protected\n * @param {Object} state The state of the parent plot\n * @param chain\n * @param fields\n */\nLocusZoom.Data.Source.prototype.fetchRequest = function(state, chain, fields) {\n    var url = this.getURL(state, chain, fields);\n    return LocusZoom.createCORSPromise(\"GET\", url); \n};\n// TODO: move this.getURL stub into parent class and add documentation; parent should not check for methods known only to children\n\n\n/**\n * TODO Rename to handleRequest (to disambiguate from, say HTTP get requests) and update wiki docs and other references\n * @protected\n */\nLocusZoom.Data.Source.prototype.getRequest = function(state, chain, fields) {\n    var req;\n    var cacheKey = this.getCacheKey(state, chain, fields);\n    if (this.enableCache && typeof(cacheKey) !== \"undefined\" && cacheKey === this._cachedKey) {\n        req = Q.when(this._cachedResponse);\n    } else {\n        req = this.fetchRequest(state, chain, fields);\n        if (this.enableCache) {\n            req = req.then(function(x) {\n                this._cachedKey = cacheKey;\n                return this._cachedResponse = x;\n            }.bind(this));\n        }\n    }\n    return req;\n};\n\n/**\n * Fetch the data from the specified data source, and format it in a way that can be used by the consuming plot\n * @protected\n * @param {Object} state The current \"state\" of the plot, such as chromosome and start/end positions\n * @param {String[]} fields Array of field names that the plot has requested from this data source. (without the \"namespace\" prefix)  TODO: Clarify how this fieldname maps to raw datasource output, and how it differs from outnames\n * @param {String[]} outnames  Array describing how the output data should refer to this field. This represents the\n *     originally requested field name, including the namespace. This must be an array with the same length as `fields`\n * @param {Function[]} trans The collection of transformation functions to be run on selected fields.\n *     This must be an array with the same length as `fields`\n * @returns {function(this:LocusZoom.Data.Source)} A callable operation that can be used as part of the data chain\n */\nLocusZoom.Data.Source.prototype.getData = function(state, fields, outnames, trans) {\n    if (this.preGetData) {\n        var pre = this.preGetData(state, fields, outnames, trans);\n        if(this.pre) {\n            state = pre.state || state;\n            fields = pre.fields || fields;\n            outnames = pre.outnames || outnames;\n            trans = pre.trans || trans;\n        }\n    }\n\n    var self = this;\n    return function (chain) {\n        if (self.dependentSource && chain && chain.body && !chain.body.length) {\n            // A \"dependent\" source should not attempt to fire a request if there is no data for it to act on.\n            // Therefore, it should simply return the previous data chain.\n            return Q.when(chain);\n        }\n\n        return self.getRequest(state, chain, fields).then(function(resp) {\n            return self.parseResponse(resp, chain, fields, outnames, trans);\n        });\n    };\n};\n\n/**\n * Parse response data. Return an object containing \"header\" (metadata or request parameters) and \"body\"\n *   (data to be used for plotting). The response from this request is combined with responses from all other requests\n *   in the chain.\n * @public\n * @param {String|Object} resp The raw data associated with the response\n * @param {Object} chain The combined parsed response data from this and all other requests made in the chain\n * @param {String[]} fields Array of field names that the plot has requested from this data source. (without the \"namespace\" prefix)  TODO: Clarify how this fieldname maps to raw datasource output, and how it differs from outnames\n * @param {String[]} outnames  Array describing how the output data should refer to this field. This represents the\n *     originally requested field name, including the namespace. This must be an array with the same length as `fields`\n * @param {Function[]} trans The collection of transformation functions to be run on selected fields.\n *     This must be an array with the same length as `fields`\n * @returns {{header: ({}|*), body: {}}}\n */\nLocusZoom.Data.Source.prototype.parseResponse = function(resp, chain, fields, outnames, trans) {\n    var json = typeof resp == \"string\" ? JSON.parse(resp) : resp;\n    var records = this.parseData(json.data || json, fields, outnames, trans);\n    return {header: chain.header || {}, body: records};\n};\n/**\n * Some API endpoints return an object containing several arrays, representing columns of data. Each array should have\n *   the same length, and a given array index corresponds to a single row.\n *\n * This gathers column data into an array of objects, each one representing the combined data for a given record.\n *   See `parseData` for usage\n *\n * @protected\n * @param {Object} x A response payload object\n * @param {Array} fields\n * @param {Array} outnames\n * @param {Array} trans\n * @returns {Object[]}\n */\nLocusZoom.Data.Source.prototype.parseArraysToObjects = function(x, fields, outnames, trans) {\n    //intended for an object of arrays\n    //{\"id\":[1,2], \"val\":[5,10]}\n    var records = [];\n    fields.forEach(function(f, i) {\n        if (!(f in x)) {throw \"field \" + f + \" not found in response for \" + outnames[i];}\n    });\n    // Safeguard: check that arrays are of same length\n    var keys = Object.keys(x);\n    var N = x[keys[0]].length;\n    var sameLength = keys.every(function(key) {\n        var item = x[key];\n        return item.length === N;\n    });\n    if (!sameLength) {\n        throw this.constructor.SOURCE_NAME + \" expects a response in which all arrays of data are the same length\";\n    }\n\n    for(var i = 0; i < N; i++) {\n        var record = {};\n        for(var j=0; j<fields.length; j++) {\n            var val = x[fields[j]][i];\n            if (trans && trans[j]) {\n                val = trans[j](val);\n            }\n            record[outnames[j]] = val;\n        }\n        records.push(record);\n    }\n    return records;\n};\n\n/**\n *  Given an array response in which each record is represented as one coherent bundle of data (an object of\n *    {field:value} entries), perform any parsing or transformations required to represent the field in a form required\n *    by the datalayer. See `parseData` for usage.\n * @protected\n * @param {Object[]} x An array of response payload objects, each describing one record\n * @param {Array} fields\n * @param {Array} outnames\n * @param {Array} trans\n * @returns {Object[]}\n */\nLocusZoom.Data.Source.prototype.parseObjectsToObjects = function(x, fields, outnames, trans) {\n    //intended for an array of objects\n    // [ {\"id\":1, \"val\":5}, {\"id\":2, \"val\":10}]\n    var records = [];\n    var fieldFound = [];\n    for (var k=0; k<fields.length; k++) { \n        fieldFound[k] = 0;\n    }\n\n    if (!x.length) {\n        // Do not attempt to parse records if there are no records, and bubble up an informative error message.\n        throw \"No data found for specified query\";\n    }\n    for (var i = 0; i < x.length; i++) {\n        var record = {};\n        for (var j=0; j<fields.length; j++) {\n            var val = x[i][fields[j]];\n            if (typeof val != \"undefined\") {\n                fieldFound[j] = 1;\n            }\n            if (trans && trans[j]) {\n                val = trans[j](val);\n            }\n            record[outnames[j]] = val;\n        }\n        records.push(record);\n    }\n    fieldFound.forEach(function(v, i) {\n        if (!v) {throw \"field \" + fields[i] + \" not found in response for \" + outnames[i];}\n    });\n    return records;\n};\n\n/**\n * Parse the response data  TODO Hide private entries from user-facing api docs\n * @protected\n * @param {Object} x The raw response data to be parsed\n * @param {String[]} fields Array of field names that the plot has requested from this data source. (without the \"namespace\" prefix)  TODO: Clarify how this fieldname maps to raw datasource output, and how it differs from outnames\n * @param {String[]} outnames  Array describing how the output data should refer to this field. This represents the\n *     originally requested field name, including the namespace. This must be an array with the same length as `fields`\n * @param {Function[]} trans The collection of transformation functions to be run on selected fields.\n *     This must be an array with the same length as `fields`\n */\nLocusZoom.Data.Source.prototype.parseData = function(x, fields, outnames, trans) {\n    var records;\n    if (Array.isArray(x)) { \n        records = this.parseObjectsToObjects(x, fields, outnames, trans);\n    } else {\n        records = this.parseArraysToObjects(x, fields, outnames, trans);\n    }\n    // Perform any custom transformations on the resulting data\n    return this.prepareData(records);\n};\n\n/**\n * Post-process the server response. This is a hook that allows custom sources to specify any optional transformations\n *   that should be performed on the data that is returned from the server.\n * @param {Object[]} records\n * @returns Object[]\n */\nLocusZoom.Data.Source.prototype.prepareData = function(records) {\n    return records;\n};\n\n/**\n * Method to define new custom datasources based on a provided constructor. (does not allow registering any additional methods)\n * @public\n * @param {Function} constructorFun Constructor function that is used to create the specified class\n * @param {String} [uniqueName] The name by which the class should be listed in `KnownDataSources`\n * @param {String|Function} [base=LocusZoomData.Source] The name or constructor of a base class to use\n * @returns {*|Function}\n */\nLocusZoom.Data.Source.extend = function(constructorFun, uniqueName, base) {\n    if (base) {\n        if (Array.isArray(base)) {\n            base = LocusZoom.KnownDataSources.create.apply(null, base);\n        } else if (typeof base === \"string\") {\n            base = LocusZoom.KnownDataSources.get(base).prototype;\n        } else if (typeof base === \"function\") {\n            base = base.prototype;\n        }\n    } else {\n        base =  new LocusZoom.Data.Source();\n    }\n    constructorFun = constructorFun || function() {};\n    constructorFun.prototype = base;\n    constructorFun.prototype.constructor = constructorFun;\n    if (uniqueName) {\n        /** @member {String} LocusZoom.Data.Source.SOURCENAME */\n        constructorFun.SOURCE_NAME = uniqueName;\n        LocusZoom.KnownDataSources.add(constructorFun);\n    }\n    return constructorFun;\n};\n\n/**\n * Datasources can be instantiated from a JSON object instead of code. This represents an existing source in that data format.\n *   For example, this can be helpful when sharing plots, or to share settings with others when debugging\n * @public\n * @returns {Object}\n */\nLocusZoom.Data.Source.prototype.toJSON = function() {\n    return [Object.getPrototypeOf(this).constructor.SOURCE_NAME, \n        {url:this.url, params:this.params}];\n};\n\n/**\n * Data Source for Association Data, as fetched from the LocusZoom API server (or compatible)\n * @class\n * @public\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.AssociationSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, \"AssociationLZ\");\n\nLocusZoom.Data.AssociationSource.prototype.preGetData = function(state, fields, outnames, trans) {\n    var id_field = this.params.id_field || \"id\";\n    [id_field, \"position\"].forEach(function(x) {\n        if (fields.indexOf(x)===-1) {\n            fields.unshift(x);\n            outnames.unshift(x);\n            trans.unshift(null);\n        }\n    });\n    return {fields: fields, outnames:outnames, trans:trans};\n};\n\nLocusZoom.Data.AssociationSource.prototype.getURL = function(state, chain, fields) {\n    var analysis = state.analysis || chain.header.analysis || this.params.analysis || 3;\n    return this.url + \"results/?filter=analysis in \" + analysis  +\n        \" and chromosome in  '\" + state.chr + \"'\" +\n        \" and position ge \" + state.start +\n        \" and position le \" + state.end;\n};\n\n/**\n * Data Source for LD Data, as fetched from the LocusZoom API server (or compatible)\n * This source is designed to connect its results to association data, and therefore depends on association data having\n *  been loaded by a previous request in the data chain.\n * @class\n * @public\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.LDSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n    this.dependentSource = true;\n}, \"LDLZ\");\n\nLocusZoom.Data.LDSource.prototype.preGetData = function(state, fields) {\n    if (fields.length>1) {\n        if (fields.length!==2 || fields.indexOf(\"isrefvar\")===-1) {\n            throw(\"LD does not know how to get all fields: \" + fields.join(\", \"));\n        }\n    }\n};\n\nLocusZoom.Data.LDSource.prototype.findMergeFields = function(chain) {\n    // since LD may be shared across sources with different namespaces\n    // we use regex to find columns to join on rather than \n    // requiring exact matches\n    var exactMatch = function(arr) {return function() {\n        var regexes = arguments;\n        for(var i=0; i<regexes.length; i++) {\n            var regex = regexes[i];\n            var m = arr.filter(function(x) {return x.match(regex);});\n            if (m.length){\n                return m[0];\n            }\n        }\n        return null;\n    };};\n    var dataFields = {\n        id: this.params.id_field,\n        position: this.params.position_field,\n        pvalue: this.params.pvalue_field,\n        _names_:null\n    };\n    if (chain && chain.body && chain.body.length>0) {\n        var names = Object.keys(chain.body[0]);\n        var nameMatch = exactMatch(names);\n        dataFields.id = dataFields.id || nameMatch(/\\bvariant\\b/) || nameMatch(/\\bid\\b/);\n        dataFields.position = dataFields.position || nameMatch(/\\bposition\\b/i, /\\bpos\\b/i);\n        dataFields.pvalue = dataFields.pvalue || nameMatch(/\\bpvalue\\b/i, /\\blog_pvalue\\b/i);\n        dataFields._names_ = names;\n    }\n    return dataFields;\n};\n\nLocusZoom.Data.LDSource.prototype.findRequestedFields = function(fields, outnames) {\n    var obj = {};\n    for(var i=0; i<fields.length; i++) {\n        if(fields[i]===\"isrefvar\") {\n            obj.isrefvarin = fields[i];\n            obj.isrefvarout = outnames && outnames[i];\n        } else {\n            obj.ldin = fields[i];\n            obj.ldout = outnames && outnames[i];\n        }\n    }\n    return obj;\n};\n\nLocusZoom.Data.LDSource.prototype.getURL = function(state, chain, fields) {\n    var findExtremeValue = function(x, pval, sign) {\n        pval = pval || \"pvalue\";\n        sign = sign || 1;\n        var extremeVal = x[0][pval], extremeIdx=0;\n        for(var i=1; i<x.length; i++) {\n            if (x[i][pval] * sign > extremeVal) {\n                extremeVal = x[i][pval] * sign;\n                extremeIdx = i;\n            }\n        }\n        return extremeIdx;\n    };\n\n    var refSource = state.ldrefsource || chain.header.ldrefsource || 1;\n    var reqFields = this.findRequestedFields(fields);\n    var refVar = reqFields.ldin;\n    if (refVar === \"state\") {\n        refVar = state.ldrefvar || chain.header.ldrefvar || \"best\";\n    }\n    if (refVar === \"best\") {\n        if (!chain.body) {\n            throw(\"No association data found to find best pvalue\");\n        }\n        var keys = this.findMergeFields(chain);\n        if (!keys.pvalue || !keys.id) {\n            var columns = \"\";\n            if (!keys.id){ columns += (columns.length ? \", \" : \"\") + \"id\"; }\n            if (!keys.pvalue){ columns += (columns.length ? \", \" : \"\") + \"pvalue\"; }\n            throw(\"Unable to find necessary column(s) for merge: \" + columns + \" (available: \" + keys._names_ + \")\");\n        }\n        refVar = chain.body[findExtremeValue(chain.body, keys.pvalue)][keys.id];\n    }\n    if (!chain.header) {chain.header = {};}\n    chain.header.ldrefvar = refVar;\n    return this.url + \"results/?filter=reference eq \" + refSource + \n        \" and chromosome2 eq '\" + state.chr + \"'\" + \n        \" and position2 ge \" + state.start + \n        \" and position2 le \" + state.end + \n        \" and variant1 eq '\" + refVar + \"'\" + \n        \"&fields=chr,pos,rsquare\";\n};\n\nLocusZoom.Data.LDSource.prototype.parseResponse = function(resp, chain, fields, outnames) {\n    var json = JSON.parse(resp);\n    var keys = this.findMergeFields(chain);\n    var reqFields = this.findRequestedFields(fields, outnames);\n    if (!keys.position) {\n        throw(\"Unable to find position field for merge: \" + keys._names_);\n    }\n    var leftJoin = function(left, right, lfield, rfield) {\n        var i=0, j=0;\n        while (i < left.length && j < right.position2.length) {\n            if (left[i][keys.position] === right.position2[j]) {\n                left[i][lfield] = right[rfield][j];\n                i++;\n                j++;\n            } else if (left[i][keys.position] < right.position2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n    };\n    var tagRefVariant = function(data, refvar, idfield, outname) {\n        for(var i=0; i<data.length; i++) {\n            if (data[i][idfield] && data[i][idfield]===refvar) {\n                data[i][outname] = 1;\n            } else {\n                data[i][outname] = 0;\n            }\n        }\n    };\n    leftJoin(chain.body, json.data, reqFields.ldout, \"rsquare\");\n    if(reqFields.isrefvarin && chain.header.ldrefvar) {\n        tagRefVariant(chain.body, chain.header.ldrefvar, keys.id, reqFields.isrefvarout);\n    }\n    return chain;   \n};\n\n/**\n * Data Source for Gene Data, as fetched from the LocusZoom API server (or compatible)\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.GeneSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, \"GeneLZ\");\n\nLocusZoom.Data.GeneSource.prototype.getURL = function(state, chain, fields) {\n    var source = state.source || chain.header.source || this.params.source || 2;\n    return this.url + \"?filter=source in \" + source +\n        \" and chrom eq '\" + state.chr + \"'\" + \n        \" and start le \" + state.end +\n        \" and end ge \" + state.start;\n};\n\nLocusZoom.Data.GeneSource.prototype.parseResponse = function(resp, chain, fields, outnames) {\n    var json = JSON.parse(resp);\n    return {header: chain.header, body: json.data};\n};\n\n/**\n * Data Source for Gene Constraint Data, as fetched from the LocusZoom API server (or compatible)\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n*/\nLocusZoom.Data.GeneConstraintSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, \"GeneConstraintLZ\");\n\nLocusZoom.Data.GeneConstraintSource.prototype.getURL = function() {\n    return this.url;\n};\n\nLocusZoom.Data.GeneConstraintSource.prototype.getCacheKey = function(state, chain, fields) {\n    return this.url + JSON.stringify(state);\n};\n\nLocusZoom.Data.GeneConstraintSource.prototype.fetchRequest = function(state, chain, fields) {\n    var geneids = [];\n    chain.body.forEach(function(gene){\n        var gene_id = gene.gene_id;\n        if (gene_id.indexOf(\".\")){\n            gene_id = gene_id.substr(0, gene_id.indexOf(\".\"));\n        }\n        geneids.push(gene_id);\n    });\n    var url = this.getURL(state, chain, fields);\n    var body = \"geneids=\" + encodeURIComponent(JSON.stringify(geneids));\n    var headers = {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n    };\n    return LocusZoom.createCORSPromise(\"POST\", url, body, headers);\n};\n\nLocusZoom.Data.GeneConstraintSource.prototype.parseResponse = function(resp, chain, fields, outnames) {\n    if (!resp){\n        return { header: chain.header, body: chain.body };\n    }\n    var data = JSON.parse(resp);\n    // Loop through the array of genes in the body and match each to a result from the constraints request\n    var constraint_fields = [\"bp\", \"exp_lof\", \"exp_mis\", \"exp_syn\", \"lof_z\", \"mis_z\", \"mu_lof\", \"mu_mis\",\"mu_syn\", \"n_exons\", \"n_lof\", \"n_mis\", \"n_syn\", \"pLI\", \"syn_z\"]; \n    chain.body.forEach(function(gene, i){\n        var gene_id = gene.gene_id;\n        if (gene_id.indexOf(\".\")){\n            gene_id = gene_id.substr(0, gene_id.indexOf(\".\"));\n        }\n        constraint_fields.forEach(function(field){\n            // Do not overwrite any fields defined in the original gene source\n            if (typeof chain.body[i][field] != \"undefined\"){ return; }\n            if (data[gene_id]){\n                var val = data[gene_id][field];\n                if (typeof val == \"number\" && val.toString().indexOf(\".\") !== -1){\n                    val = parseFloat(val.toFixed(2));\n                }\n                chain.body[i][field] = val;\n            } else {\n                // If the gene did not come back in the response then set the same field with a null values\n                chain.body[i][field] = null;\n            }\n        });\n    });\n    return { header: chain.header, body: chain.body };\n};\n\n/**\n * Data Source for Recombination Rate Data, as fetched from the LocusZoom API server (or compatible)\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.RecombinationRateSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, \"RecombLZ\");\n\nLocusZoom.Data.RecombinationRateSource.prototype.getURL = function(state, chain, fields) {\n    var source = state.recombsource || chain.header.recombsource || this.params.source || 15;\n    return this.url + \"?filter=id in \" + source +\n        \" and chromosome eq '\" + state.chr + \"'\" + \n        \" and position le \" + state.end +\n        \" and position ge \" + state.start;\n};\n\n/**\n * Data Source for Interval Annotation Data (e.g. BED Tracks), as fetched from the LocusZoom API server (or compatible)\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.IntervalSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, \"IntervalLZ\");\n\nLocusZoom.Data.IntervalSource.prototype.getURL = function(state, chain, fields) {\n    var source = state.bedtracksource || chain.header.bedtracksource || this.params.source || 16;\n    return this.url + \"?filter=id in \" + source + \n        \" and chromosome eq '\" + state.chr + \"'\" + \n        \" and start le \" + state.end +\n        \" and end ge \" + state.start;\n};\n\n/**\n * Data Source for static blobs of JSON Data. This does not perform additional parsing, and therefore it is the\n * responsibility of the user to pass information in a format that can be read and understood by the chosen plot.\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.StaticSource = LocusZoom.Data.Source.extend(function(data) {\n    /** @member {Object} */\n    this._data = data;\n},\"StaticJSON\");\n\nLocusZoom.Data.StaticSource.prototype.getRequest = function(state, chain, fields) {\n    return Q.fcall(function() {return this._data;}.bind(this));\n};\n\nLocusZoom.Data.StaticSource.prototype.toJSON = function() {\n    return [Object.getPrototypeOf(this).constructor.SOURCE_NAME, this._data];\n};\n\n/**\n * Data source for PheWAS data served from external JSON files\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n * @param {String[]} init.build This datasource expects to be provided the name of the genome build that will be used to\n *   provide pheWAS results for this position. Note positions may not translate between builds.\n */\nLocusZoom.Data.PheWASSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, \"PheWASLZ\");\nLocusZoom.Data.PheWASSource.prototype.getURL = function(state, chain, fields) {\n    var build = this.params.build;\n    if (!build || !Array.isArray(build) || !build.length) {\n        throw [\"Data source\", this.constructor.SOURCE_NAME, \"requires that you specify array of one or more desired genome build names\"].join(\" \");\n    }\n    var url = [\n        this.url,\n        \"?filter=variant eq '\", encodeURIComponent(state.variant), \"'&format=objects&\",\n        build.map(function(item) {return \"build=\" + encodeURIComponent(item);}).join(\"&\")\n    ];\n    return url.join(\"\");\n};\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n * An independent LocusZoom object that renders a unique set of data and subpanels.\n * Many such LocusZoom objects can exist simultaneously on a single page, each having its own layout.\n *\n * This creates a new plot instance, but does not immediately render it. For practical use, it may be more convenient\n * to use the `LocusZoom.populate` helper method.\n *\n * @class\n * @param {String} id The ID of the plot. Often corresponds to the ID of the container element on the page\n *   where the plot is rendered..\n * @param {LocusZoom.DataSources} datasource Ensemble of data providers used by the plot\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n*/\nLocusZoom.Plot = function(id, datasource, layout) {\n    /** @member Boolean} */\n    this.initialized = false;\n    // TODO: This makes sense for all other locuszoom elements to have; determine whether this is interface boilerplate or something that can be removed\n    this.parent_plot = this;\n\n    /** @member {String} */\n    this.id = id;\n\n    /** @member {Element} */\n    this.container = null;\n    /**\n     * Selector for a node that will contain the plot. (set externally by populate methods)\n     * @member {d3.selection}\n     */\n    this.svg = null;\n\n    /** @member {Object.<String, Number>} */\n    this.panels = {};\n    /**\n     * TODO: This is currently used by external classes that manipulate the parent and may indicate room for a helper method in the api to coordinate boilerplate\n     * @protected\n     * @member {String[]}\n     */\n    this.panel_ids_by_y_index = [];\n\n    /**\n     * Notify each child panel of the plot of changes in panel ordering/ arrangement\n     */\n    this.applyPanelYIndexesToPanelLayouts = function(){\n        this.panel_ids_by_y_index.forEach(function(pid, idx){\n            this.panels[pid].layout.y_index = idx;\n        }.bind(this));\n    };\n\n    /**\n     * Get the qualified ID pathname for the plot\n     * @returns {String}\n     */\n    this.getBaseId = function(){\n        return this.id;\n    };\n\n    /**\n     * Track update operations (reMap) performed on all child panels, and notify the parent plot when complete\n     * TODO: Reconsider whether we need to be tracking this as global state outside of context of specific operations\n     * @protected\n     * @member {Promise[]}\n     */\n    this.remap_promises = [];\n\n    if (typeof layout == \"undefined\"){\n        /**\n         * The layout is a serializable object used to describe the composition of the Plot\n         *   If no layout was passed, use the Standard Association Layout\n         *   Otherwise merge whatever was passed with the Default Layout\n         *   TODO: Review description; we *always* merge with default layout?\n         * @member {Object}\n         */\n        this.layout = LocusZoom.Layouts.merge({}, LocusZoom.Layouts.get(\"plot\", \"standard_association\"));\n    } else {\n        this.layout = layout;\n    }\n    LocusZoom.Layouts.merge(this.layout, LocusZoom.Plot.DefaultLayout);\n\n    /**\n     * Values in the layout object may change during rendering etc. Retain a copy of the original plot state\n     * @member {Object}\n     */\n    this._base_layout = JSON.parse(JSON.stringify(this.layout));\n\n\n    /**\n     * Create a shortcut to the state in the layout on the Plot. Tracking in the layout allows the plot to be created\n     *   with initial state/setup.\n     *\n     * Tracks state of the plot, eg start and end position\n     * @member {Object}\n     */\n    this.state = this.layout.state;\n\n    /** @member {LocusZoom.Data.Requester} */\n    this.lzd = new LocusZoom.Data.Requester(datasource);\n\n    /**\n     * Window.onresize listener (responsive layouts only)\n     * TODO: .on appears to return a selection, not a listener? Check logic here\n     * https://github.com/d3/d3-selection/blob/00b904b9bcec4dfaf154ae0bbc777b1fc1d7bc08/test/selection/on-test.js#L11\n     * @deprecated\n     * @member {d3.selection}\n     */\n    this.window_onresize = null;\n\n    /**\n     * Known event hooks that the panel can respond to\n     * @protected\n     * @member {Object}\n     */\n    this.event_hooks = {\n        \"layout_changed\": [],\n        \"data_requested\": [],\n        \"data_rendered\": [],\n        \"element_clicked\": []\n    };\n    /**\n     * There are several events that a LocusZoom plot can \"emit\" when appropriate, and LocusZoom supports registering\n     *   \"hooks\" for these events which are essentially custom functions intended to fire at certain times.\n     *\n     * The following plot-level events are currently supported:\n     *   - `layout_changed` - context: plot - Any aspect of the plot's layout (including dimensions or state) has changed.\n     *   - `data_requested` - context: plot - A request for new data from any data source used in the plot has been made.\n     *   - `data_rendered` - context: plot - Data from a request has been received and rendered in the plot.\n     *   - `element_clicked` - context: element - A data element in any of the plot's data layers has been clicked.\n     *\n     * To register a hook for any of these events use `plot.on('event_name', function() {})`.\n     *\n     * There can be arbitrarily many functions registered to the same event. They will be executed in the order they\n     *   were registered. The this context bound to each event hook function is dependent on the type of event, as\n     *   denoted above. For example, when data_requested is emitted the context for this in the event hook will be the\n     *   plot itself, but when element_clicked is emitted the context for this in the event hook will be the element\n     *   that was clicked.\n     *\n     * @param {String} event\n     * @param {function} hook\n     * @returns {LocusZoom.Plot}\n     */\n    this.on = function(event, hook){\n        if (typeof \"event\" != \"string\" || !Array.isArray(this.event_hooks[event])){\n            throw(\"Unable to register event hook, invalid event: \" + event.toString());\n        }\n        if (typeof hook != \"function\"){\n            throw(\"Unable to register event hook, invalid hook function passed\");\n        }\n        this.event_hooks[event].push(hook);\n        return this;\n    };\n    /**\n     * Handle running of event hooks when an event is emitted\n     * @protected\n     * @param {string} event A known event name\n     * @param {*} context Controls function execution context (value of `this` for the hook to be fired)\n     * @returns {LocusZoom.Plot}\n     */\n    this.emit = function(event, context){\n        if (typeof \"event\" != \"string\" || !Array.isArray(this.event_hooks[event])){\n            throw(\"LocusZoom attempted to throw an invalid event: \" + event.toString());\n        }\n        context = context || this;\n        this.event_hooks[event].forEach(function(hookToRun) {\n            hookToRun.call(context);\n        });\n        return this;\n    };\n\n    /**\n     * Get an object with the x and y coordinates of the plot's origin in terms of the entire page\n     * Necessary for positioning any HTML elements over the plot\n     * @returns {{x: Number, y: Number, width: Number, height: Number}}\n     */\n    this.getPageOrigin = function(){\n        var bounding_client_rect = this.svg.node().getBoundingClientRect();\n        var x_offset = document.documentElement.scrollLeft || document.body.scrollLeft;\n        var y_offset = document.documentElement.scrollTop || document.body.scrollTop;\n        var container = this.svg.node();\n        while (container.parentNode !== null){\n            container = container.parentNode;\n            if (container !== document && d3.select(container).style(\"position\") !== \"static\"){\n                x_offset = -1 * container.getBoundingClientRect().left;\n                y_offset = -1 * container.getBoundingClientRect().top;\n                break;\n            }\n        }\n        return {\n            x: x_offset + bounding_client_rect.left,\n            y: y_offset + bounding_client_rect.top,\n            width: bounding_client_rect.width,\n            height: bounding_client_rect.height\n        };\n    };\n\n    /**\n     * Get the top and left offset values for the plot's container element (the div that was populated)\n     * @returns {{top: number, left: number}}\n     */\n    this.getContainerOffset = function(){\n        var offset = { top: 0, left: 0 };\n        var container = this.container.offsetParent || null;\n        while (container !== null){\n            offset.top += container.offsetTop;\n            offset.left += container.offsetLeft;\n            container = container.offsetParent || null;\n        }\n        return offset;\n    };\n\n    //\n    /**\n     * Event information describing interaction (e.g. panning and zooming) is stored on the plot\n     * TODO: Add/ document details of interaction structure as we expand\n     * @member {{panel_id: String, linked_panel_ids: Array, x_linked: *, dragging: *, zooming: *}}\n     * @returns {LocusZoom.Plot}\n     */\n    this.interaction = {};\n\n    /**\n     * Track whether the target panel can respond to mouse interaction events\n     * @param {String} panel_id\n     * @returns {boolean}\n     */\n    this.canInteract = function(panel_id){\n        panel_id = panel_id || null;\n        if (panel_id){\n            return ((typeof this.interaction.panel_id == \"undefined\" || this.interaction.panel_id === panel_id) && !this.loading_data);\n        } else {\n            return !(this.interaction.dragging || this.interaction.zooming || this.loading_data);\n        }\n    };\n\n    // Initialize the layout\n    this.initializeLayout();\n    // TODO: Possibly superfluous return from constructor\n    return this;\n};\n\n/**\n * Default/ expected configuration parameters for basic plotting; most plots will override\n *\n * @protected\n * @static\n * @type {Object}\n */\nLocusZoom.Plot.DefaultLayout = {\n    state: {},\n    width: 1,\n    height: 1,\n    min_width: 1,\n    min_height: 1,\n    responsive_resize: false,\n    aspect_ratio: 1,\n    panels: [],\n    dashboard: {\n        components: []\n    },\n    panel_boundaries: true,\n    mouse_guide: true\n};\n\n/**\n * Helper method to sum the proportional dimensions of panels, a value that's checked often as panels are added/removed\n * @param {('Height'|'Width')} dimension\n * @returns {number}\n */\nLocusZoom.Plot.prototype.sumProportional = function(dimension){\n    if (dimension !== \"height\" && dimension !== \"width\"){\n        throw (\"Bad dimension value passed to LocusZoom.Plot.prototype.sumProportional\");\n    }\n    var total = 0;\n    for (var id in this.panels){\n        // Ensure every panel contributing to the sum has a non-zero proportional dimension\n        if (!this.panels[id].layout[\"proportional_\" + dimension]){\n            this.panels[id].layout[\"proportional_\" + dimension] = 1 / Object.keys(this.panels).length;\n        }\n        total += this.panels[id].layout[\"proportional_\" + dimension];\n    }\n    return total;\n};\n\n/**\n * Resize the plot to fit the bounding container\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.rescaleSVG = function(){\n    var clientRect = this.svg.node().getBoundingClientRect();\n    this.setDimensions(clientRect.width, clientRect.height);\n    return this;\n};\n\n/**\n * Prepare the plot for first use by performing parameter validation, setting up panels, and calculating dimensions\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.initializeLayout = function(){\n\n    // Sanity check layout values\n    // TODO: Find a way to generally abstract this, maybe into an object that models allowed layout values?\n    if (isNaN(this.layout.width) || this.layout.width <= 0){\n        throw (\"Plot layout parameter `width` must be a positive number\");\n    }\n    if (isNaN(this.layout.height) || this.layout.height <= 0){\n        throw (\"Plot layout parameter `width` must be a positive number\");\n    }\n    if (isNaN(this.layout.aspect_ratio) || this.layout.aspect_ratio <= 0){\n        throw (\"Plot layout parameter `aspect_ratio` must be a positive number\");\n    }\n\n    // If this is a responsive layout then set a namespaced/unique onresize event listener on the window\n    if (this.layout.responsive_resize){\n        this.window_onresize = d3.select(window).on(\"resize.lz-\"+this.id, function(){\n            this.rescaleSVG();\n        }.bind(this));\n        // Forcing one additional setDimensions() call after the page is loaded clears up\n        // any disagreements between the initial layout and the loaded responsive container's size\n        d3.select(window).on(\"load.lz-\"+this.id, function(){\n            this.setDimensions();\n        }.bind(this));\n    }\n\n    // Add panels\n    this.layout.panels.forEach(function(panel_layout){\n        this.addPanel(panel_layout);\n    }.bind(this));\n\n    return this;\n};\n\n/**\n * Set the dimensions for a plot, and ensure that panels are sized and positioned correctly.\n *\n * If dimensions are provided, resizes each panel proportionally to match the new plot dimensions. Otherwise,\n *   calculates the appropriate plot dimensions based on all panels.\n * @param {Number} [width] If provided and larger than minimum size, set plot to this width\n * @param {Number} [height] If provided and larger than minimum size, set plot to this height\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.setDimensions = function(width, height){\n\n    var id;\n\n    // Update minimum allowable width and height by aggregating minimums from panels, then apply minimums to containing element.\n    var min_width = parseFloat(this.layout.min_width) || 0;\n    var min_height = parseFloat(this.layout.min_height) || 0;\n    for (id in this.panels){\n        min_width = Math.max(min_width, this.panels[id].layout.min_width);\n        if (parseFloat(this.panels[id].layout.min_height) > 0 && parseFloat(this.panels[id].layout.proportional_height) > 0){\n            min_height = Math.max(min_height, (this.panels[id].layout.min_height / this.panels[id].layout.proportional_height));\n        }\n    }\n    this.layout.min_width = Math.max(min_width, 1);\n    this.layout.min_height = Math.max(min_height, 1);\n    d3.select(this.svg.node().parentNode).style({\n        \"min-width\": this.layout.min_width + \"px\",\n        \"min-height\": this.layout.min_height + \"px\"\n    });\n\n    // If width and height arguments were passed then adjust them against plot minimums if necessary.\n    // Then resize the plot and proportionally resize panels to fit inside the new plot dimensions.\n    if (!isNaN(width) && width >= 0 && !isNaN(height) && height >= 0){\n        this.layout.width = Math.max(Math.round(+width), this.layout.min_width);\n        this.layout.height = Math.max(Math.round(+height), this.layout.min_height);\n        this.layout.aspect_ratio = this.layout.width / this.layout.height;\n        // Override discrete values if resizing responsively\n        if (this.layout.responsive_resize){\n            if (this.svg){\n                this.layout.width = Math.max(this.svg.node().parentNode.getBoundingClientRect().width, this.layout.min_width);\n            }\n            this.layout.height = this.layout.width / this.layout.aspect_ratio;\n            if (this.layout.height < this.layout.min_height){\n                this.layout.height = this.layout.min_height;\n                this.layout.width  = this.layout.height * this.layout.aspect_ratio;\n            }\n        }\n        // Resize/reposition panels to fit, update proportional origins if necessary\n        var y_offset = 0;\n        this.panel_ids_by_y_index.forEach(function(panel_id){\n            var panel_width = this.layout.width;\n            var panel_height = this.panels[panel_id].layout.proportional_height * this.layout.height;\n            this.panels[panel_id].setDimensions(panel_width, panel_height);\n            this.panels[panel_id].setOrigin(0, y_offset);\n            this.panels[panel_id].layout.proportional_origin.x = 0;\n            this.panels[panel_id].layout.proportional_origin.y = y_offset / this.layout.height;\n            y_offset += panel_height;\n            this.panels[panel_id].dashboard.update();\n        }.bind(this));\n    }\n\n    // If width and height arguments were NOT passed (and panels exist) then determine the plot dimensions\n    // by making it conform to panel dimensions, assuming panels are already positioned correctly.\n    else if (Object.keys(this.panels).length) {\n        this.layout.width = 0;\n        this.layout.height = 0;\n        for (id in this.panels){\n            this.layout.width = Math.max(this.panels[id].layout.width, this.layout.width);\n            this.layout.height += this.panels[id].layout.height;\n        }\n        this.layout.width = Math.max(this.layout.width, this.layout.min_width);\n        this.layout.height = Math.max(this.layout.height, this.layout.min_height);\n    }\n\n    // Keep aspect ratio in agreement with dimensions\n    this.layout.aspect_ratio = this.layout.width / this.layout.height;\n\n    // Apply layout width and height as discrete values or viewbox values\n    if (this.svg !== null){\n        if (this.layout.responsive_resize){\n            this.svg\n                .attr(\"viewBox\", \"0 0 \" + this.layout.width + \" \" + this.layout.height)\n                .attr(\"preserveAspectRatio\", \"xMinYMin meet\");\n        } else {\n            this.svg.attr(\"width\", this.layout.width).attr(\"height\", this.layout.height);\n        }\n    }\n\n    // If the plot has been initialized then trigger some necessary render functions\n    if (this.initialized){\n        this.panel_boundaries.position();\n        this.dashboard.update();\n        this.curtain.update();\n        this.loader.update();\n    }\n\n    return this.emit(\"layout_changed\");\n};\n\n/**\n * Create a new panel from a layout, and handle the work of initializing and placing the panel on the plot\n * @param {Object} layout\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Plot.prototype.addPanel = function(layout){\n\n    // Sanity checks\n    if (typeof layout !== \"object\"){\n        throw \"Invalid panel layout passed to LocusZoom.Plot.prototype.addPanel()\";\n    }\n\n    // Create the Panel and set its parent\n    var panel = new LocusZoom.Panel(layout, this);\n\n    // Store the Panel on the Plot\n    this.panels[panel.id] = panel;\n\n    // If a discrete y_index was set in the layout then adjust other panel y_index values to accommodate this one\n    if (panel.layout.y_index !== null && !isNaN(panel.layout.y_index)\n        && this.panel_ids_by_y_index.length > 0){\n        // Negative y_index values should count backwards from the end, so convert negatives to appropriate values here\n        if (panel.layout.y_index < 0){\n            panel.layout.y_index = Math.max(this.panel_ids_by_y_index.length + panel.layout.y_index, 0);\n        }\n        this.panel_ids_by_y_index.splice(panel.layout.y_index, 0, panel.id);\n        this.applyPanelYIndexesToPanelLayouts();\n    } else {\n        var length = this.panel_ids_by_y_index.push(panel.id);\n        this.panels[panel.id].layout.y_index = length - 1;\n    }\n\n    // Determine if this panel was already in the layout.panels array.\n    // If it wasn't, add it. Either way store the layout.panels array index on the panel.\n    var layout_idx = null;\n    this.layout.panels.forEach(function(panel_layout, idx){\n        if (panel_layout.id === panel.id){ layout_idx = idx; }\n    });\n    if (layout_idx === null){\n        layout_idx = this.layout.panels.push(this.panels[panel.id].layout) - 1;\n    }\n    this.panels[panel.id].layout_idx = layout_idx;\n\n    // Call positionPanels() to keep panels from overlapping and ensure filling all available vertical space\n    if (this.initialized){\n        this.positionPanels();\n        // Initialize and load data into the new panel\n        this.panels[panel.id].initialize();\n        this.panels[panel.id].reMap();\n        // An extra call to setDimensions with existing discrete dimensions fixes some rounding errors with tooltip\n        // positioning. TODO: make this additional call unnecessary.\n        this.setDimensions(this.layout.width, this.layout.height);\n    }\n\n    return this.panels[panel.id];\n};\n\n\n/**\n * Clear all state, tooltips, and other persisted data associated with one (or all) panel(s) in the plot\n *\n * This is useful when reloading an existing plot with new data, eg \"click for genome region\" links.\n *   This is a utility method for custom usage. It is not fired automatically during normal rerender of existing panels\n *   @param {String} [panelId] If provided, clear state for only this panel. Otherwise, clear state for all panels.\n *   @param {('wipe'|'reset')} [mode='wipe'] Optionally specify how state should be cleared. `wipe` deletes all data\n *     and is useful for when the panel is being removed; `reset` is best when the panel will be reused in place.\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.clearPanelData = function(panelId, mode) {\n    mode = mode || \"wipe\";\n\n    // TODO: Add unit tests for this method\n    var panelsList;\n    if (panelId) {\n        panelsList = [panelId];\n    } else {\n        panelsList = Object.keys(this.panels);\n    }\n    var self = this;\n    panelsList.forEach(function(pid) {\n        self.panels[pid].data_layer_ids_by_z_index.forEach(function(dlid){\n            var layer = self.panels[pid].data_layers[dlid];\n            layer.destroyAllTooltips();\n\n            delete self.layout.state[pid + \".\" + dlid];\n            if(mode === \"reset\") {\n                layer.setDefaultState();\n            }\n        });\n    });\n    return this;\n};\n\n/**\n * Remove the panel from the plot, and clear any state, tooltips, or other visual elements belonging to nested content\n * @param {String} id\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.removePanel = function(id){\n    if (!this.panels[id]){\n        throw (\"Unable to remove panel, ID not found: \" + id);\n    }\n\n    // Hide all panel boundaries\n    this.panel_boundaries.hide();\n\n    // Destroy all tooltips and state vars for all data layers on the panel\n    this.clearPanelData(id);\n\n    // Remove all panel-level HTML overlay elements\n    this.panels[id].loader.hide();\n    this.panels[id].dashboard.destroy(true);\n    this.panels[id].curtain.hide();\n\n    // Remove the svg container for the panel if it exists\n    if (this.panels[id].svg.container){\n        this.panels[id].svg.container.remove();\n    }\n\n    // Delete the panel and its presence in the plot layout and state\n    this.layout.panels.splice(this.panels[id].layout_idx, 1);\n    delete this.panels[id];\n    delete this.layout.state[id];\n\n    // Update layout_idx values for all remaining panels\n    this.layout.panels.forEach(function(panel_layout, idx){\n        this.panels[panel_layout.id].layout_idx = idx;\n    }.bind(this));\n\n    // Remove the panel id from the y_index array\n    this.panel_ids_by_y_index.splice(this.panel_ids_by_y_index.indexOf(id), 1);\n    this.applyPanelYIndexesToPanelLayouts();\n\n    // Call positionPanels() to keep panels from overlapping and ensure filling all available vertical space\n    if (this.initialized){\n        // Allow the plot to shrink when panels are removed, by forcing it to recalculate min dimensions from scratch\n        this.layout.min_height = this._base_layout.min_height;\n        this.layout.min_width = this._base_layout.min_width;\n\n        this.positionPanels();\n        // An extra call to setDimensions with existing discrete dimensions fixes some rounding errors with tooltip\n        // positioning. TODO: make this additional call unnecessary.\n        this.setDimensions(this.layout.width, this.layout.height);\n    }\n\n    return this;\n};\n\n\n/**\n * Automatically position panels based on panel positioning rules and values.\n * Keep panels from overlapping vertically by adjusting origins, and keep the sum of proportional heights at 1.\n *\n * TODO: This logic currently only supports dynamic positioning of panels to prevent overlap in a VERTICAL orientation.\n *      Some framework exists for positioning panels in horizontal orientations as well (width, proportional_width, origin.x, etc.)\n *      but the logic for keeping these user-definable values straight approaches the complexity of a 2D box-packing algorithm.\n *      That's complexity we don't need right now, and may not ever need, so it's on hiatus until a use case materializes.\n */\nLocusZoom.Plot.prototype.positionPanels = function(){\n\n    var id;\n\n    // We want to enforce that all x-linked panels have consistent horizontal margins\n    // (to ensure that aligned items stay aligned despite inconsistent initial layout parameters)\n    // NOTE: This assumes panels have consistent widths already. That should probably be enforced too!\n    var x_linked_margins = { left: 0, right: 0 };\n\n    // Proportional heights for newly added panels default to null unless explicitly set, so determine appropriate\n    // proportional heights for all panels with a null value from discretely set dimensions.\n    // Likewise handle default nulls for proportional widths, but instead just force a value of 1 (full width)\n    for (id in this.panels){\n        if (this.panels[id].layout.proportional_height === null){\n            this.panels[id].layout.proportional_height = this.panels[id].layout.height / this.layout.height;\n        }\n        if (this.panels[id].layout.proportional_width === null){\n            this.panels[id].layout.proportional_width = 1;\n        }\n        if (this.panels[id].layout.interaction.x_linked){\n            x_linked_margins.left = Math.max(x_linked_margins.left, this.panels[id].layout.margin.left);\n            x_linked_margins.right = Math.max(x_linked_margins.right, this.panels[id].layout.margin.right);\n        }\n    }\n\n    // Sum the proportional heights and then adjust all proportionally so that the sum is exactly 1\n    var total_proportional_height = this.sumProportional(\"height\");\n    if (!total_proportional_height){\n        return this;\n    }\n    var proportional_adjustment = 1 / total_proportional_height;\n    for (id in this.panels){\n        this.panels[id].layout.proportional_height *= proportional_adjustment;\n    }\n\n    // Update origins on all panels without changing plot-level dimensions yet\n    // Also apply x-linked margins to x-linked panels, updating widths as needed\n    var y_offset = 0;\n    this.panel_ids_by_y_index.forEach(function(panel_id){\n        this.panels[panel_id].setOrigin(0, y_offset);\n        this.panels[panel_id].layout.proportional_origin.x = 0;\n        y_offset += this.panels[panel_id].layout.height;\n        if (this.panels[panel_id].layout.interaction.x_linked){\n            var delta = Math.max(x_linked_margins.left - this.panels[panel_id].layout.margin.left, 0)\n                      + Math.max(x_linked_margins.right - this.panels[panel_id].layout.margin.right, 0);\n            this.panels[panel_id].layout.width += delta;\n            this.panels[panel_id].layout.margin.left = x_linked_margins.left;\n            this.panels[panel_id].layout.margin.right = x_linked_margins.right;\n            this.panels[panel_id].layout.cliparea.origin.x = x_linked_margins.left;\n        }\n    }.bind(this));\n    var calculated_plot_height = y_offset;\n    this.panel_ids_by_y_index.forEach(function(panel_id){\n        this.panels[panel_id].layout.proportional_origin.y = this.panels[panel_id].layout.origin.y / calculated_plot_height;\n    }.bind(this));\n\n    // Update dimensions on the plot to accommodate repositioned panels\n    this.setDimensions();\n\n    // Set dimensions on all panels using newly set plot-level dimensions and panel-level proportional dimensions\n    this.panel_ids_by_y_index.forEach(function(panel_id){\n        this.panels[panel_id].setDimensions(this.layout.width * this.panels[panel_id].layout.proportional_width,\n                                            this.layout.height * this.panels[panel_id].layout.proportional_height);\n    }.bind(this));\n\n    return this;\n\n};\n\n/**\n * Prepare the first rendering of the plot. This includes initializing the individual panels, but also creates shared\n *   elements such as mouse events, panel guides/boundaries, and loader/curtain.\n *\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.initialize = function(){\n\n    // Ensure proper responsive class is present on the containing node if called for\n    if (this.layout.responsive_resize){\n        d3.select(this.container).classed(\"lz-container-responsive\", true);\n    }\n\n    // Create an element/layer for containing mouse guides\n    if (this.layout.mouse_guide) {\n        var mouse_guide_svg = this.svg.append(\"g\")\n            .attr(\"class\", \"lz-mouse_guide\").attr(\"id\", this.id + \".mouse_guide\");\n        var mouse_guide_vertical_svg = mouse_guide_svg.append(\"rect\")\n            .attr(\"class\", \"lz-mouse_guide-vertical\").attr(\"x\",-1);\n        var mouse_guide_horizontal_svg = mouse_guide_svg.append(\"rect\")\n            .attr(\"class\", \"lz-mouse_guide-horizontal\").attr(\"y\",-1);\n        this.mouse_guide = {\n            svg: mouse_guide_svg,\n            vertical: mouse_guide_vertical_svg,\n            horizontal: mouse_guide_horizontal_svg\n        };\n    }\n\n    // Add curtain and loader prototpyes to the plot\n    this.curtain = LocusZoom.generateCurtain.call(this);\n    this.loader = LocusZoom.generateLoader.call(this);\n\n    // Create the panel_boundaries object with show/position/hide methods\n    this.panel_boundaries = {\n        parent: this,\n        hide_timeout: null,\n        showing: false,\n        dragging: false,\n        selectors: [],\n        corner_selector: null,\n        show: function(){\n            // Generate panel boundaries\n            if (!this.showing && !this.parent.curtain.showing){\n                this.showing = true;\n                // Loop through all panels to create a horizontal boundary for each\n                this.parent.panel_ids_by_y_index.forEach(function(panel_id, panel_idx){\n                    var selector = d3.select(this.parent.svg.node().parentNode).insert(\"div\", \".lz-data_layer-tooltip\")\n                        .attr(\"class\", \"lz-panel-boundary\")\n                        .attr(\"title\", \"Resize panel\");\n                    selector.append(\"span\");\n                    var panel_resize_drag = d3.behavior.drag();\n                    panel_resize_drag.on(\"dragstart\", function(){ this.dragging = true; }.bind(this));\n                    panel_resize_drag.on(\"dragend\", function(){ this.dragging = false; }.bind(this));\n                    panel_resize_drag.on(\"drag\", function(){\n                        // First set the dimensions on the panel we're resizing\n                        var this_panel = this.parent.panels[this.parent.panel_ids_by_y_index[panel_idx]];\n                        var original_panel_height = this_panel.layout.height;\n                        this_panel.setDimensions(this_panel.layout.width, this_panel.layout.height + d3.event.dy);\n                        var panel_height_change = this_panel.layout.height - original_panel_height;\n                        var new_calculated_plot_height = this.parent.layout.height + panel_height_change;\n                        // Next loop through all panels.\n                        // Update proportional dimensions for all panels including the one we've resized using discrete heights.\n                        // Reposition panels with a greater y-index than this panel to their appropriate new origin.\n                        this.parent.panel_ids_by_y_index.forEach(function(loop_panel_id, loop_panel_idx){\n                            var loop_panel = this.parent.panels[this.parent.panel_ids_by_y_index[loop_panel_idx]];\n                            loop_panel.layout.proportional_height = loop_panel.layout.height / new_calculated_plot_height;\n                            if (loop_panel_idx > panel_idx){\n                                loop_panel.setOrigin(loop_panel.layout.origin.x, loop_panel.layout.origin.y + panel_height_change);\n                                loop_panel.dashboard.position();\n                            }\n                        }.bind(this));\n                        // Reset dimensions on the entire plot and reposition panel boundaries\n                        this.parent.positionPanels();\n                        this.position();\n                    }.bind(this));\n                    selector.call(panel_resize_drag);\n                    this.parent.panel_boundaries.selectors.push(selector);\n                }.bind(this));\n                // Create a corner boundary / resize element on the bottom-most panel that resizes the entire plot\n                var corner_selector = d3.select(this.parent.svg.node().parentNode).insert(\"div\", \".lz-data_layer-tooltip\")\n                    .attr(\"class\", \"lz-panel-corner-boundary\")\n                    .attr(\"title\", \"Resize plot\");\n                corner_selector.append(\"span\").attr(\"class\", \"lz-panel-corner-boundary-outer\");\n                corner_selector.append(\"span\").attr(\"class\", \"lz-panel-corner-boundary-inner\");\n                var corner_drag = d3.behavior.drag();\n                corner_drag.on(\"dragstart\", function(){ this.dragging = true; }.bind(this));\n                corner_drag.on(\"dragend\", function(){ this.dragging = false; }.bind(this));\n                corner_drag.on(\"drag\", function(){\n                    this.setDimensions(this.layout.width + d3.event.dx, this.layout.height + d3.event.dy);\n                }.bind(this.parent));\n                corner_selector.call(corner_drag);\n                this.parent.panel_boundaries.corner_selector = corner_selector;\n            }\n            return this.position();\n        },\n        position: function(){\n            if (!this.showing){ return this; }\n            // Position panel boundaries\n            var plot_page_origin = this.parent.getPageOrigin();\n            this.selectors.forEach(function(selector, panel_idx){\n                var panel_page_origin = this.parent.panels[this.parent.panel_ids_by_y_index[panel_idx]].getPageOrigin();\n                var left = plot_page_origin.x;\n                var top = panel_page_origin.y + this.parent.panels[this.parent.panel_ids_by_y_index[panel_idx]].layout.height - 12;\n                var width = this.parent.layout.width - 1;\n                selector.style({\n                    top: top + \"px\",\n                    left: left + \"px\",\n                    width: width + \"px\"\n                });\n                selector.select(\"span\").style({\n                    width: width + \"px\"\n                });\n            }.bind(this));\n            // Position corner selector\n            var corner_padding = 10;\n            var corner_size = 16;\n            this.corner_selector.style({\n                top: (plot_page_origin.y + this.parent.layout.height - corner_padding - corner_size) + \"px\",\n                left: (plot_page_origin.x + this.parent.layout.width - corner_padding - corner_size) + \"px\"\n            });\n            return this;\n        },\n        hide: function(){\n            if (!this.showing){ return this; }\n            this.showing = false;\n            // Remove panel boundaries\n            this.selectors.forEach(function(selector){ selector.remove(); });\n            this.selectors = [];\n            // Remove corner boundary\n            this.corner_selector.remove();\n            this.corner_selector = null;\n            return this;\n        }\n    };\n\n    // Show panel boundaries stipulated by the layout (basic toggle, only show on mouse over plot)\n    if (this.layout.panel_boundaries){\n        d3.select(this.svg.node().parentNode).on(\"mouseover.\" + this.id + \".panel_boundaries\", function(){\n            clearTimeout(this.panel_boundaries.hide_timeout);\n            this.panel_boundaries.show();\n        }.bind(this));\n        d3.select(this.svg.node().parentNode).on(\"mouseout.\" + this.id + \".panel_boundaries\", function(){\n            this.panel_boundaries.hide_timeout = setTimeout(function(){\n                this.panel_boundaries.hide();\n            }.bind(this), 300);\n        }.bind(this));\n    }\n\n    // Create the dashboard object and immediately show it\n    this.dashboard = new LocusZoom.Dashboard(this).show();\n\n    // Initialize all panels\n    for (var id in this.panels){\n        this.panels[id].initialize();\n    }\n\n    // Define plot-level mouse events\n    var namespace = \".\" + this.id;\n    if (this.layout.mouse_guide) {\n        var mouseout_mouse_guide = function(){\n            this.mouse_guide.vertical.attr(\"x\", -1);\n            this.mouse_guide.horizontal.attr(\"y\", -1);\n        }.bind(this);\n        var mousemove_mouse_guide = function(){\n            var coords = d3.mouse(this.svg.node());\n            this.mouse_guide.vertical.attr(\"x\", coords[0]);\n            this.mouse_guide.horizontal.attr(\"y\", coords[1]);\n        }.bind(this);\n        this.svg\n            .on(\"mouseout\" + namespace + \"-mouse_guide\", mouseout_mouse_guide)\n            .on(\"touchleave\" + namespace + \"-mouse_guide\", mouseout_mouse_guide)\n            .on(\"mousemove\" + namespace + \"-mouse_guide\", mousemove_mouse_guide);\n    }\n    var mouseup = function(){\n        this.stopDrag();\n    }.bind(this);\n    var mousemove = function(){\n        if (this.interaction.dragging){\n            var coords = d3.mouse(this.svg.node());\n            if (d3.event){ d3.event.preventDefault(); }\n            this.interaction.dragging.dragged_x = coords[0] - this.interaction.dragging.start_x;\n            this.interaction.dragging.dragged_y = coords[1] - this.interaction.dragging.start_y;\n            this.panels[this.interaction.panel_id].render();\n            this.interaction.linked_panel_ids.forEach(function(panel_id){\n                this.panels[panel_id].render();\n            }.bind(this));\n        }\n    }.bind(this);\n    this.svg\n        .on(\"mouseup\" + namespace, mouseup)\n        .on(\"touchend\" + namespace, mouseup)\n        .on(\"mousemove\" + namespace, mousemove)\n        .on(\"touchmove\" + namespace, mousemove);\n\n    // Add an extra namespaced mouseup handler to the containing body, if there is one\n    // This helps to stop interaction events gracefully when dragging outside of the plot element\n    if (!d3.select(\"body\").empty()){\n        d3.select(\"body\")\n            .on(\"mouseup\" + namespace, mouseup)\n            .on(\"touchend\" + namespace, mouseup);\n    }\n\n    this.initialized = true;\n\n    // An extra call to setDimensions with existing discrete dimensions fixes some rounding errors with tooltip\n    // positioning. TODO: make this additional call unnecessary.\n    var client_rect = this.svg.node().getBoundingClientRect();\n    var width = client_rect.width ? client_rect.width : this.layout.width;\n    var height = client_rect.height ? client_rect.height : this.layout.height;\n    this.setDimensions(width, height);\n\n    return this;\n\n};\n\n/**\n * Refresh (or fetch) a plot's data from sources, regardless of whether position or state has changed\n * @returns {Promise}\n */\nLocusZoom.Plot.prototype.refresh = function(){\n    return this.applyState();\n};\n\n/**\n * Update state values and trigger a pull for fresh data on all data sources for all data layers\n * @param state_changes\n * @returns {Promise} A promise that resolves when all data fetch and update operations are complete\n */\nLocusZoom.Plot.prototype.applyState = function(state_changes){\n\n    state_changes = state_changes || {};\n    if (typeof state_changes != \"object\"){\n        throw(\"LocusZoom.applyState only accepts an object; \" + (typeof state_changes) + \" given\");\n    }\n\n    // First make a copy of the current (old) state to work with\n    var new_state = JSON.parse(JSON.stringify(this.state));\n\n    // Apply changes by top-level property to the new state\n    for (var property in state_changes) {\n        new_state[property] = state_changes[property];\n    }\n\n    // Validate the new state (may do nothing, may do a lot, depends on how the user has things set up)\n    new_state = LocusZoom.validateState(new_state, this.layout);\n\n    // Apply new state to the actual state\n    for (property in new_state) {\n        this.state[property] = new_state[property];\n    }\n\n    // Generate requests for all panels given new state\n    this.emit(\"data_requested\");\n    this.remap_promises = [];\n    this.loading_data = true;\n    for (var id in this.panels){\n        this.remap_promises.push(this.panels[id].reMap());\n    }\n\n    return Q.all(this.remap_promises)\n        .catch(function(error){\n            console.error(error);\n            this.curtain.drop(error);\n            this.loading_data = false;\n        }.bind(this))\n        .then(function(){\n            // TODO: Check logic here; in some promise implementations, this would cause the error to be considered handled, and \"then\" would always fire. (may or may not be desired behavior)\n            // Update dashboard / components\n            this.dashboard.update();\n\n            // Apply panel-level state values\n            this.panel_ids_by_y_index.forEach(function(panel_id){\n                var panel = this.panels[panel_id];\n                panel.dashboard.update();\n                // Apply data-layer-level state values\n                panel.data_layer_ids_by_z_index.forEach(function(data_layer_id){\n                    var data_layer = this.data_layers[data_layer_id];\n                    var state_id = panel_id + \".\" + data_layer_id;\n                    for (var property in this.state[state_id]){\n                        if (!this.state[state_id].hasOwnProperty(property)){ continue; }\n                        if (Array.isArray(this.state[state_id][property])){\n                            this.state[state_id][property].forEach(function(element_id){\n                                try {\n                                    this.setElementStatus(property, this.getElementById(element_id), true);\n                                } catch (e){\n                                    console.error(\"Unable to apply state: \" + state_id + \", \" + property);\n                                }\n                            }.bind(data_layer));\n                        }\n                    }\n                }.bind(panel));\n            }.bind(this));\n\n            // Emit events\n            this.emit(\"layout_changed\");\n            this.emit(\"data_rendered\");\n\n            this.loading_data = false;\n\n        }.bind(this));\n};\n\n/**\n * Register interactions along the specified axis, provided that the target panel allows interaction.\n *\n * @param {LocusZoom.Panel} panel\n * @param {('x_tick'|'y1_tick'|'y2_tick')} method The direction (axis) along which dragging is being performed.\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.startDrag = function(panel, method){\n\n    panel = panel || null;\n    method = method || null;\n\n    var axis = null;\n    switch (method){\n    case \"background\":\n    case \"x_tick\":\n        axis = \"x\";\n        break;\n    case \"y1_tick\":\n        axis = \"y1\";\n        break;\n    case \"y2_tick\":\n        axis = \"y2\";\n        break;\n    }\n\n    if (!(panel instanceof LocusZoom.Panel) || !axis || !this.canInteract()){ return this.stopDrag(); }\n\n    var coords = d3.mouse(this.svg.node());\n    this.interaction = {\n        panel_id: panel.id,\n        linked_panel_ids: panel.getLinkedPanelIds(axis),\n        dragging: {\n            method: method,\n            start_x: coords[0],\n            start_y: coords[1],\n            dragged_x: 0,\n            dragged_y: 0,\n            axis: axis\n        }\n    };\n\n    this.svg.style(\"cursor\", \"all-scroll\");\n\n    return this;\n\n};\n\n/**\n * Process drag interactions across the target panel and synchronize plot state across other panels in sync;\n *   clear the event when complete\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.stopDrag = function(){\n\n    if (!this.interaction.dragging){ return this; }\n\n    if (typeof this.panels[this.interaction.panel_id] != \"object\"){\n        this.interaction = {};\n        return this;\n    }\n    var panel = this.panels[this.interaction.panel_id];\n\n    // Helper function to find the appropriate axis layouts on child data layers\n    // Once found, apply the extent as floor/ceiling and remove all other directives\n    // This forces all associated axes to conform to the extent generated by a drag action\n    var overrideAxisLayout = function(axis, axis_number, extent){\n        panel.data_layer_ids_by_z_index.forEach(function(id){\n            if (panel.data_layers[id].layout[axis+\"_axis\"].axis === axis_number){\n                panel.data_layers[id].layout[axis+\"_axis\"].floor = extent[0];\n                panel.data_layers[id].layout[axis+\"_axis\"].ceiling = extent[1];\n                delete panel.data_layers[id].layout[axis+\"_axis\"].lower_buffer;\n                delete panel.data_layers[id].layout[axis+\"_axis\"].upper_buffer;\n                delete panel.data_layers[id].layout[axis+\"_axis\"].min_extent;\n                delete panel.data_layers[id].layout[axis+\"_axis\"].ticks;\n            }\n        });\n    };\n\n    switch(this.interaction.dragging.method){\n    case \"background\":\n    case \"x_tick\":\n        if (this.interaction.dragging.dragged_x !== 0){\n            overrideAxisLayout(\"x\", 1, panel.x_extent);\n            this.applyState({ start: panel.x_extent[0], end: panel.x_extent[1] });\n        }\n        break;\n    case \"y1_tick\":\n    case \"y2_tick\":\n        if (this.interaction.dragging.dragged_y !== 0){\n            // TODO: Hardcoded assumption of only two possible axes with single-digit #s (switch/case)\n            var y_axis_number = parseInt(this.interaction.dragging.method[1]);\n            overrideAxisLayout(\"y\", y_axis_number, panel[\"y\"+y_axis_number+\"_extent\"]);\n        }\n        break;\n    }\n\n    this.interaction = {};\n    this.svg.style(\"cursor\", null);\n\n    return this;\n\n};\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n * A panel is an abstract class representing a subdivision of the LocusZoom stage\n *   to display a distinct data representation as a collection of data layers.\n * @class\n * @param {Object} layout\n * @param {LocusZoom.Plot|null} parent\n*/\nLocusZoom.Panel = function(layout, parent) {\n\n    if (typeof layout !== \"object\"){\n        throw \"Unable to create panel, invalid layout\";\n    }\n\n    /** @member {LocusZoom.Plot|null} */\n    this.parent = parent || null;\n    /** @member {LocusZoom.Plot|null} */\n    this.parent_plot = parent;\n\n    // Ensure a valid ID is present. If there is no valid ID then generate one\n    if (typeof layout.id !== \"string\" || !layout.id.length){\n        if (!this.parent){\n            layout.id = \"p\" + Math.floor(Math.random()*Math.pow(10,8));\n        } else {\n            var id = null;\n            var generateID = function(){\n                id = \"p\" + Math.floor(Math.random()*Math.pow(10,8));\n                if (id == null || typeof this.parent.panels[id] != \"undefined\"){\n                    id = generateID();\n                }\n            }.bind(this);\n            layout.id = id;\n        }\n    } else if (this.parent) {\n        if (typeof this.parent.panels[layout.id] !== \"undefined\"){\n            throw \"Cannot create panel with id [\" + layout.id + \"]; panel with that id already exists\";\n        }\n    }\n    /** @member {String} */\n    this.id = layout.id;\n\n    /** @member {Boolean} */\n    this.initialized = false;\n    /**\n     * The index of this panel in the parent plot's `layout.panels`\n     * @member {number}\n     * */\n    this.layout_idx = null;\n    /** @member {Object} */\n    this.svg = {};\n\n    /**\n     * A JSON-serializable object used to describe the composition of the Panel\n     * @member {Object}\n     */\n    this.layout = LocusZoom.Layouts.merge(layout || {}, LocusZoom.Panel.DefaultLayout);\n\n    // Define state parameters specific to this panel\n    if (this.parent){\n        /** @member {Object} */\n        this.state = this.parent.state;\n\n        /** @member {String} */\n        this.state_id = this.id;\n        this.state[this.state_id] = this.state[this.state_id] || {};\n    } else {\n        this.state = null;\n        this.state_id = null;\n    }\n\n    /** @member {Object} */\n    this.data_layers = {};\n    /** @member {String[]} */\n    this.data_layer_ids_by_z_index = [];\n\n    /** @protected */\n    this.applyDataLayerZIndexesToDataLayerLayouts = function(){\n        this.data_layer_ids_by_z_index.forEach(function(dlid, idx){\n            this.data_layers[dlid].layout.z_index = idx;\n        }.bind(this));\n    }.bind(this);\n\n    /**\n     * Track data requests in progress\n     * @member {Promise[]}\n     *  @protected\n     */\n    this.data_promises = [];\n\n    /** @member {d3.scale} */\n    this.x_scale  = null;\n    /** @member {d3.scale} */\n    this.y1_scale = null;\n    /** @member {d3.scale} */\n    this.y2_scale = null;\n\n    /** @member {d3.extent} */\n    this.x_extent  = null;\n    /** @member {d3.extent} */\n    this.y1_extent = null;\n    /** @member {d3.extent} */\n    this.y2_extent = null;\n\n    /** @member {Number[]} */\n    this.x_ticks  = [];\n    /** @member {Number[]} */\n    this.y1_ticks = [];\n    /** @member {Number[]} */\n    this.y2_ticks = [];\n\n    /**\n     * A timeout ID as returned by setTimeout\n     * @protected\n     * @member {number}\n     */\n    this.zoom_timeout = null;\n\n    /** @returns {string} */\n    this.getBaseId = function(){\n        return this.parent.id + \".\" + this.id;\n    };\n\n    /**\n     * Known event hooks that the panel can respond to\n     * @protected\n     * @member {Object}\n     */\n    this.event_hooks = {\n        \"layout_changed\": [],\n        \"data_requested\": [],\n        \"data_rendered\": [],\n        \"element_clicked\": []\n    };\n    /**\n     * There are several events that a LocusZoom panel can \"emit\" when appropriate, and LocusZoom supports registering\n     *   \"hooks\" for these events which are essentially custom functions intended to fire at certain times.\n     *\n     * The following panel-level events are currently supported:\n     *   - `layout_changed` - context: panel - Any aspect of the panel's layout (including dimensions or state) has changed.\n     *   - `data_requested` - context: panel - A request for new data from any data source used in the panel has been made.\n     *   - `data_rendered` - context: panel - Data from a request has been received and rendered in the panel.\n     *   - `element_clicked` - context: element - A data element in any of the panel's data layers has been clicked.\n     *\n     * To register a hook for any of these events use `panel.on('event_name', function() {})`.\n     *\n     * There can be arbitrarily many functions registered to the same event. They will be executed in the order they\n     *   were registered. The this context bound to each event hook function is dependent on the type of event, as\n     *   denoted above. For example, when data_requested is emitted the context for this in the event hook will be the\n     *   panel itself, but when element_clicked is emitted the context for this in the event hook will be the element\n     *   that was clicked.\n     *\n     * @param {String} event\n     * @param {function} hook\n     * @returns {LocusZoom.Panel}\n     */\n    this.on = function(event, hook){\n        if (typeof \"event\" != \"string\" || !Array.isArray(this.event_hooks[event])){\n            throw(\"Unable to register event hook, invalid event: \" + event.toString());\n        }\n        if (typeof hook != \"function\"){\n            throw(\"Unable to register event hook, invalid hook function passed\");\n        }\n        this.event_hooks[event].push(hook);\n        return this;\n    };\n    /**\n     * Handle running of event hooks when an event is emitted\n     * @protected\n     * @param {string} event A known event name\n     * @param {*} context Controls function execution context (value of `this` for the hook to be fired)\n     * @returns {LocusZoom.Panel}\n     */\n    this.emit = function(event, context){\n        if (typeof \"event\" != \"string\" || !Array.isArray(this.event_hooks[event])){\n            throw(\"LocusZoom attempted to throw an invalid event: \" + event.toString());\n        }\n        context = context || this;\n        this.event_hooks[event].forEach(function(hookToRun) {\n            hookToRun.call(context);\n        });\n        return this;\n    };\n\n    /**\n     * Get an object with the x and y coordinates of the panel's origin in terms of the entire page\n     * Necessary for positioning any HTML elements over the panel\n     * @returns {{x: Number, y: Number}}\n     */\n    this.getPageOrigin = function(){\n        var plot_origin = this.parent.getPageOrigin();\n        return {\n            x: plot_origin.x + this.layout.origin.x,\n            y: plot_origin.y + this.layout.origin.y\n        };\n    };\n\n    // Initialize the layout\n    this.initializeLayout();\n\n    return this;\n\n};\n\n/**\n * Default panel layout\n * @static\n * @type {Object}\n */\nLocusZoom.Panel.DefaultLayout = {\n    title: { text: \"\", style: {}, x: 10, y: 22 },\n    y_index: null,\n    width:  0,\n    height: 0,\n    origin: { x: 0, y: null },\n    min_width: 1,\n    min_height: 1,\n    proportional_width: null,\n    proportional_height: null,\n    proportional_origin: { x: 0, y: null },\n    margin: { top: 0, right: 0, bottom: 0, left: 0 },\n    background_click: \"clear_selections\",\n    dashboard: {\n        components: []\n    },\n    cliparea: {\n        height: 0,\n        width: 0,\n        origin: { x: 0, y: 0 }\n    },\n    axes: {  // These are the only axes supported!!\n        x:  {},\n        y1: {},\n        y2: {}\n    },\n    legend: null,\n    interaction: {\n        drag_background_to_pan: false,\n        drag_x_ticks_to_scale: false,\n        drag_y1_ticks_to_scale: false,\n        drag_y2_ticks_to_scale: false,\n        scroll_to_zoom: false,\n        x_linked: false,\n        y1_linked: false,\n        y2_linked: false\n    },\n    data_layers: []\n};\n\n/**\n * Prepare the panel for first use by performing parameter validation, creating axes, setting default dimensions,\n *   and preparing / positioning data layers as appropriate.\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.initializeLayout = function(){\n\n    // If the layout is missing BOTH width and proportional width then set the proportional width to 1.\n    // This will default the panel to taking up the full width of the plot.\n    if (this.layout.width === 0 && this.layout.proportional_width === null){\n        this.layout.proportional_width = 1;\n    }\n\n    // If the layout is missing BOTH height and proportional height then set the proportional height to\n    // an equal share of the plot's current height.\n    if (this.layout.height === 0 && this.layout.proportional_height === null){\n        var panel_count = Object.keys(this.parent.panels).length;\n        if (panel_count > 0){\n            this.layout.proportional_height = (1 / panel_count);\n        } else {\n            this.layout.proportional_height = 1;\n        }\n    }\n\n    // Set panel dimensions, origin, and margin\n    this.setDimensions();\n    this.setOrigin();\n    this.setMargin();\n\n    // Set ranges\n    // TODO: Define stub values in constructor\n    this.x_range = [0, this.layout.cliparea.width];\n    this.y1_range = [this.layout.cliparea.height, 0];\n    this.y2_range = [this.layout.cliparea.height, 0];\n\n    // Initialize panel axes\n    [\"x\", \"y1\", \"y2\"].forEach(function(axis){\n        if (!Object.keys(this.layout.axes[axis]).length || this.layout.axes[axis].render ===false){\n            // The default layout sets the axis to an empty object, so set its render boolean here\n            this.layout.axes[axis].render = false;\n        } else {\n            this.layout.axes[axis].render = true;\n            this.layout.axes[axis].label = this.layout.axes[axis].label || null;\n            this.layout.axes[axis].label_function = this.layout.axes[axis].label_function || null;\n        }\n    }.bind(this));\n\n    // Add data layers (which define x and y extents)\n    this.layout.data_layers.forEach(function(data_layer_layout){\n        this.addDataLayer(data_layer_layout);\n    }.bind(this));\n\n    return this;\n\n};\n\n/**\n * Set the dimensions for the panel. If passed with no arguments will calculate optimal size based on layout\n *   directives and the available area within the plot. If passed discrete width (number) and height (number) will\n *   attempt to resize the panel to them, but may be limited by minimum dimensions defined on the plot or panel.\n *\n * @public\n * @param {number} [width]\n * @param {number} [height]\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.setDimensions = function(width, height){\n    if (typeof width != \"undefined\" && typeof height != \"undefined\"){\n        if (!isNaN(width) && width >= 0 && !isNaN(height) && height >= 0){\n            this.layout.width = Math.max(Math.round(+width), this.layout.min_width);\n            this.layout.height = Math.max(Math.round(+height), this.layout.min_height);\n        }\n    } else {\n        if (this.layout.proportional_width !== null){\n            this.layout.width = Math.max(this.layout.proportional_width * this.parent.layout.width, this.layout.min_width);\n        }\n        if (this.layout.proportional_height !== null){\n            this.layout.height = Math.max(this.layout.proportional_height * this.parent.layout.height, this.layout.min_height);\n        }\n    }\n    this.layout.cliparea.width = Math.max(this.layout.width - (this.layout.margin.left + this.layout.margin.right), 0);\n    this.layout.cliparea.height = Math.max(this.layout.height - (this.layout.margin.top + this.layout.margin.bottom), 0);\n    if (this.svg.clipRect){\n        this.svg.clipRect.attr(\"width\", this.layout.width).attr(\"height\", this.layout.height);\n    }\n    if (this.initialized){\n        this.render();\n        this.curtain.update();\n        this.loader.update();\n        this.dashboard.update();\n        if (this.legend){ this.legend.position(); }\n    }\n    return this;\n};\n\n/**\n * Set panel origin on the plot, and re-render as appropriate\n *\n * @public\n * @param {number} x\n * @param {number} y\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.setOrigin = function(x, y){\n    if (!isNaN(x) && x >= 0){ this.layout.origin.x = Math.max(Math.round(+x), 0); }\n    if (!isNaN(y) && y >= 0){ this.layout.origin.y = Math.max(Math.round(+y), 0); }\n    if (this.initialized){ this.render(); }\n    return this;\n};\n\n/**\n * Set margins around this panel\n * @public\n * @param {number} top\n * @param {number} right\n * @param {number} bottom\n * @param {number} left\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.setMargin = function(top, right, bottom, left){\n    var extra;\n    if (!isNaN(top)    && top    >= 0){ this.layout.margin.top    = Math.max(Math.round(+top),    0); }\n    if (!isNaN(right)  && right  >= 0){ this.layout.margin.right  = Math.max(Math.round(+right),  0); }\n    if (!isNaN(bottom) && bottom >= 0){ this.layout.margin.bottom = Math.max(Math.round(+bottom), 0); }\n    if (!isNaN(left)   && left   >= 0){ this.layout.margin.left   = Math.max(Math.round(+left),   0); }\n    if (this.layout.margin.top + this.layout.margin.bottom > this.layout.height){\n        extra = Math.floor(((this.layout.margin.top + this.layout.margin.bottom) - this.layout.height) / 2);\n        this.layout.margin.top -= extra;\n        this.layout.margin.bottom -= extra;\n    }\n    if (this.layout.margin.left + this.layout.margin.right > this.layout.width){\n        extra = Math.floor(((this.layout.margin.left + this.layout.margin.right) - this.layout.width) / 2);\n        this.layout.margin.left -= extra;\n        this.layout.margin.right -= extra;\n    }\n    [\"top\", \"right\", \"bottom\", \"left\"].forEach(function(m){\n        this.layout.margin[m] = Math.max(this.layout.margin[m], 0);\n    }.bind(this));\n    this.layout.cliparea.width = Math.max(this.layout.width - (this.layout.margin.left + this.layout.margin.right), 0);\n    this.layout.cliparea.height = Math.max(this.layout.height - (this.layout.margin.top + this.layout.margin.bottom), 0);\n    this.layout.cliparea.origin.x = this.layout.margin.left;\n    this.layout.cliparea.origin.y = this.layout.margin.top;\n\n    if (this.initialized){ this.render(); }\n    return this;\n};\n\n/**\n * Set the title for the panel. If passed an object, will merge the object with the existing layout configuration, so\n *   that all or only some of the title layout object's parameters can be customized. If passed null, false, or an empty\n *   string, the title DOM element will be set to display: none.\n *\n * @param {string|object|null} title The title text, or an object with additional configuration\n * @param {string} title.text Text to display. Since titles are rendered as SVG text, HTML and newlines will not be rendered.\n * @param {number} title.x X-offset, in pixels, for the title's text anchor (default left) relative to the top-left corner of the panel.\n * @param {number} title.y Y-offset, in pixels, for the title's text anchor (default left) relative to the top-left corner of the panel.\n    NOTE: SVG y values go from the top down, so the SVG origin of (0,0) is in the top left corner.\n * @param {object} title.style CSS styles object to be applied to the title's DOM element.\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.setTitle = function(title){\n    if (typeof this.layout.title == \"string\"){\n        var text = this.layout.title;\n        this.layout.title = { text: text, x: 0, y: 0, style: {} };\n    }\n    if (typeof title == \"string\"){\n        this.layout.title.text = title;\n    } else if (typeof title == \"object\" && title !== null){\n        this.layout.title = LocusZoom.Layouts.merge(title, this.layout.title);\n    }\n    if (this.layout.title.text.length){\n        this.title.attr(\"display\", null)\n            .attr(\"x\", parseFloat(this.layout.title.x))\n            .attr(\"y\", parseFloat(this.layout.title.y))\n            .style(this.layout.title.style)\n            .text(this.layout.title.text);\n    } else {\n        this.title.attr(\"display\", \"none\");\n    }\n    return this;\n};\n\n\n/**\n * Prepare the first rendering of the panel. This includes drawing the individual data layers, but also creates shared\n *   elements such as axes,  title, and loader/curtain.\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.initialize = function(){\n\n    // Append a container group element to house the main panel group element and the clip path\n    // Position with initial layout parameters\n    this.svg.container = this.parent.svg.append(\"g\")\n        .attr(\"id\", this.getBaseId() + \".panel_container\")\n        .attr(\"transform\", \"translate(\" + (this.layout.origin.x || 0) + \",\" + (this.layout.origin.y || 0) + \")\");\n\n    // Append clip path to the parent svg element, size with initial layout parameters\n    var clipPath = this.svg.container.append(\"clipPath\")\n        .attr(\"id\", this.getBaseId() + \".clip\");\n    this.svg.clipRect = clipPath.append(\"rect\")\n        .attr(\"width\", this.layout.width).attr(\"height\", this.layout.height);\n\n    // Append svg group for rendering all panel child elements, clipped by the clip path\n    this.svg.group = this.svg.container.append(\"g\")\n        .attr(\"id\", this.getBaseId() + \".panel\")\n        .attr(\"clip-path\", \"url(#\" + this.getBaseId() + \".clip)\");\n\n    // Add curtain and loader prototypes to the panel\n    /** @member {Object} */\n    this.curtain = LocusZoom.generateCurtain.call(this);\n    /** @member {Object} */\n    this.loader = LocusZoom.generateLoader.call(this);\n\n    /**\n     * Create the dashboard object and hang components on it as defined by panel layout\n     * @member {LocusZoom.Dashboard}\n     */\n    this.dashboard = new LocusZoom.Dashboard(this);\n\n    // Inner border\n    this.inner_border = this.svg.group.append(\"rect\")\n        .attr(\"class\", \"lz-panel-background\")\n        .on(\"click\", function(){\n            if (this.layout.background_click === \"clear_selections\"){ this.clearSelections(); }\n        }.bind(this));\n\n    // Add the title\n    /** @member {Element} */\n    this.title = this.svg.group.append(\"text\").attr(\"class\", \"lz-panel-title\");\n    if (typeof this.layout.title != \"undefined\"){ this.setTitle(); }\n\n    // Initialize Axes\n    this.svg.x_axis = this.svg.group.append(\"g\")\n        .attr(\"id\", this.getBaseId() + \".x_axis\").attr(\"class\", \"lz-x lz-axis\");\n    if (this.layout.axes.x.render){\n        this.svg.x_axis_label = this.svg.x_axis.append(\"text\")\n            .attr(\"class\", \"lz-x lz-axis lz-label\")\n            .attr(\"text-anchor\", \"middle\");\n    }\n    this.svg.y1_axis = this.svg.group.append(\"g\")\n        .attr(\"id\", this.getBaseId() + \".y1_axis\").attr(\"class\", \"lz-y lz-y1 lz-axis\");\n    if (this.layout.axes.y1.render){\n        this.svg.y1_axis_label = this.svg.y1_axis.append(\"text\")\n            .attr(\"class\", \"lz-y1 lz-axis lz-label\")\n            .attr(\"text-anchor\", \"middle\");\n    }\n    this.svg.y2_axis = this.svg.group.append(\"g\")\n        .attr(\"id\", this.getBaseId() + \".y2_axis\").attr(\"class\", \"lz-y lz-y2 lz-axis\");\n    if (this.layout.axes.y2.render){\n        this.svg.y2_axis_label = this.svg.y2_axis.append(\"text\")\n            .attr(\"class\", \"lz-y2 lz-axis lz-label\")\n            .attr(\"text-anchor\", \"middle\");\n    }\n\n    // Initialize child Data Layers\n    this.data_layer_ids_by_z_index.forEach(function(id){\n        this.data_layers[id].initialize();\n    }.bind(this));\n\n    /**\n     * Legend object, as defined by panel layout and child data layer layouts\n     * @member {LocusZoom.Legend}\n     * */\n    this.legend = null;\n    if (this.layout.legend){\n        this.legend = new LocusZoom.Legend(this);\n    }\n\n    // Establish panel background drag interaction mousedown event handler (on the panel background)\n    if (this.layout.interaction.drag_background_to_pan){\n        var namespace = \".\" + this.parent.id + \".\" + this.id + \".interaction.drag\";\n        var mousedown = function(){\n            this.parent.startDrag(this, \"background\");\n        }.bind(this);\n        this.svg.container.select(\".lz-panel-background\")\n            .on(\"mousedown\" + namespace + \".background\", mousedown)\n            .on(\"touchstart\" + namespace + \".background\", mousedown);\n    }\n\n    return this;\n\n};\n\n/**\n * Refresh the sort order of all data layers (called by data layer moveUp and moveDown methods)\n */\nLocusZoom.Panel.prototype.resortDataLayers = function(){\n    var sort = [];\n    this.data_layer_ids_by_z_index.forEach(function(id){\n        sort.push(this.data_layers[id].layout.z_index);\n    }.bind(this));\n    this.svg.group.selectAll(\"g.lz-data_layer-container\").data(sort).sort(d3.ascending);\n    this.applyDataLayerZIndexesToDataLayerLayouts();\n};\n\n/**\n * Get an array of panel IDs that are axis-linked to this panel\n * @param {('x'|'y1'|'y2')} axis\n * @returns {Array}\n */\nLocusZoom.Panel.prototype.getLinkedPanelIds = function(axis){\n    axis = axis || null;\n    var linked_panel_ids = [];\n    if ([\"x\",\"y1\",\"y2\"].indexOf(axis) === -1){ return linked_panel_ids; }\n    if (!this.layout.interaction[axis + \"_linked\"]){ return linked_panel_ids; }\n    this.parent.panel_ids_by_y_index.forEach(function(panel_id){\n        if (panel_id !== this.id && this.parent.panels[panel_id].layout.interaction[axis + \"_linked\"]){\n            linked_panel_ids.push(panel_id);\n        }\n    }.bind(this));\n    return linked_panel_ids;\n};\n\n/**\n * Move a panel up relative to others by y-index\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.moveUp = function(){\n    if (this.parent.panel_ids_by_y_index[this.layout.y_index - 1]){\n        this.parent.panel_ids_by_y_index[this.layout.y_index] = this.parent.panel_ids_by_y_index[this.layout.y_index - 1];\n        this.parent.panel_ids_by_y_index[this.layout.y_index - 1] = this.id;\n        this.parent.applyPanelYIndexesToPanelLayouts();\n        this.parent.positionPanels();\n    }\n    return this;\n};\n\n/**\n * Move a panel down (y-axis) relative to others in the plot\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.moveDown = function(){\n    if (this.parent.panel_ids_by_y_index[this.layout.y_index + 1]){\n        this.parent.panel_ids_by_y_index[this.layout.y_index] = this.parent.panel_ids_by_y_index[this.layout.y_index + 1];\n        this.parent.panel_ids_by_y_index[this.layout.y_index + 1] = this.id;\n        this.parent.applyPanelYIndexesToPanelLayouts();\n        this.parent.positionPanels();\n    }\n    return this;\n};\n\n/**\n * Create a new data layer from a provided layout object. Should have the keys specified in `DefaultLayout`\n * Will automatically add at the top (depth/z-index) of the panel unless explicitly directed differently\n *   in the layout provided.\n * @param {object} layout\n * @returns {*}\n */\nLocusZoom.Panel.prototype.addDataLayer = function(layout){\n\n    // Sanity checks\n    if (typeof layout !== \"object\" || typeof layout.id !== \"string\" || !layout.id.length){\n        throw \"Invalid data layer layout passed to LocusZoom.Panel.prototype.addDataLayer()\";\n    }\n    if (typeof this.data_layers[layout.id] !== \"undefined\"){\n        throw \"Cannot create data_layer with id [\" + layout.id + \"]; data layer with that id already exists in the panel\";\n    }\n    if (typeof layout.type !== \"string\"){\n        throw \"Invalid data layer type in layout passed to LocusZoom.Panel.prototype.addDataLayer()\";\n    }\n\n    // If the layout defines a y axis make sure the axis number is set and is 1 or 2 (default to 1)\n    if (typeof layout.y_axis == \"object\" && (typeof layout.y_axis.axis == \"undefined\" || [1,2].indexOf(layout.y_axis.axis) === -1)){\n        layout.y_axis.axis = 1;\n    }\n\n    // Create the Data Layer\n    var data_layer = LocusZoom.DataLayers.get(layout.type, layout, this);\n\n    // Store the Data Layer on the Panel\n    this.data_layers[data_layer.id] = data_layer;\n\n    // If a discrete z_index was set in the layout then adjust other data layer z_index values to accommodate this one\n    if (data_layer.layout.z_index !== null && !isNaN(data_layer.layout.z_index)\n        && this.data_layer_ids_by_z_index.length > 0){\n        // Negative z_index values should count backwards from the end, so convert negatives to appropriate values here\n        if (data_layer.layout.z_index < 0){\n            data_layer.layout.z_index = Math.max(this.data_layer_ids_by_z_index.length + data_layer.layout.z_index, 0);\n        }\n        this.data_layer_ids_by_z_index.splice(data_layer.layout.z_index, 0, data_layer.id);\n        this.data_layer_ids_by_z_index.forEach(function(dlid, idx){\n            this.data_layers[dlid].layout.z_index = idx;\n        }.bind(this));\n    } else {\n        var length = this.data_layer_ids_by_z_index.push(data_layer.id);\n        this.data_layers[data_layer.id].layout.z_index = length - 1;\n    }\n\n    // Determine if this data layer was already in the layout.data_layers array.\n    // If it wasn't, add it. Either way store the layout.data_layers array index on the data_layer.\n    var layout_idx = null;\n    this.layout.data_layers.forEach(function(data_layer_layout, idx){\n        if (data_layer_layout.id === data_layer.id){ layout_idx = idx; }\n    });\n    if (layout_idx === null){\n        layout_idx = this.layout.data_layers.push(this.data_layers[data_layer.id].layout) - 1;\n    }\n    this.data_layers[data_layer.id].layout_idx = layout_idx;\n\n    return this.data_layers[data_layer.id];\n};\n\n/**\n * Remove a data layer by id\n * @param {string} id\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.removeDataLayer = function(id){\n    if (!this.data_layers[id]){\n        throw (\"Unable to remove data layer, ID not found: \" + id);\n    }\n\n    // Destroy all tooltips for the data layer\n    this.data_layers[id].destroyAllTooltips();\n\n    // Remove the svg container for the data layer if it exists\n    if (this.data_layers[id].svg.container){\n        this.data_layers[id].svg.container.remove();\n    }\n\n    // Delete the data layer and its presence in the panel layout and state\n    this.layout.data_layers.splice(this.data_layers[id].layout_idx, 1);\n    delete this.state[this.data_layers[id].state_id];\n    delete this.data_layers[id];\n\n    // Remove the data_layer id from the z_index array\n    this.data_layer_ids_by_z_index.splice(this.data_layer_ids_by_z_index.indexOf(id), 1);\n\n    // Update layout_idx and layout.z_index values for all remaining data_layers\n    this.applyDataLayerZIndexesToDataLayerLayouts();\n    this.layout.data_layers.forEach(function(data_layer_layout, idx){\n        this.data_layers[data_layer_layout.id].layout_idx = idx;\n    }.bind(this));\n\n    return this;\n};\n\n/**\n * Clear all selections on all data layers\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.clearSelections = function(){\n    this.data_layer_ids_by_z_index.forEach(function(id){\n        this.data_layers[id].setAllElementStatus(\"selected\", false);\n    }.bind(this));\n    return this;\n};\n\n/**\n * When the parent plot changes state, adjust the panel accordingly. For example, this may include fetching new data\n *   from the API as the viewing region changes\n * @returns {Promise}\n */\nLocusZoom.Panel.prototype.reMap = function(){\n    this.emit(\"data_requested\");\n    this.data_promises = [];\n\n    // Remove any previous error messages before attempting to load new data\n    this.curtain.hide();\n    // Trigger reMap on each Data Layer\n    for (var id in this.data_layers){\n        try {\n            this.data_promises.push(this.data_layers[id].reMap());\n        } catch (error) {\n            console.warn(error);\n            this.curtain.show(error);\n        }\n    }\n    // When all finished trigger a render\n    return Q.all(this.data_promises)\n        .then(function(){\n            this.initialized = true;\n            this.render();\n            this.emit(\"layout_changed\");\n            this.parent.emit(\"layout_changed\");\n            this.emit(\"data_rendered\");\n        }.bind(this))\n        .catch(function(error){\n            console.warn(error);\n            this.curtain.show(error);\n        }.bind(this));\n};\n\n/**\n * Iterate over data layers to generate panel axis extents\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.generateExtents = function(){\n\n    // Reset extents\n    [\"x\", \"y1\", \"y2\"].forEach(function(axis){\n        this[axis + \"_extent\"] = null;\n    }.bind(this));\n\n    // Loop through the data layers\n    for (var id in this.data_layers){\n\n        var data_layer = this.data_layers[id];\n\n        // If defined and not decoupled, merge the x extent of the data layer with the panel's x extent\n        if (data_layer.layout.x_axis && !data_layer.layout.x_axis.decoupled){\n            this.x_extent = d3.extent((this.x_extent || []).concat(data_layer.getAxisExtent(\"x\")));\n        }\n\n        // If defined and not decoupled, merge the y extent of the data layer with the panel's appropriate y extent\n        if (data_layer.layout.y_axis && !data_layer.layout.y_axis.decoupled){\n            var y_axis = \"y\" + data_layer.layout.y_axis.axis;\n            this[y_axis+\"_extent\"] = d3.extent((this[y_axis+\"_extent\"] || []).concat(data_layer.getAxisExtent(\"y\")));\n        }\n\n    }\n\n    // Override x_extent from state if explicitly defined to do so\n    if (this.layout.axes.x && this.layout.axes.x.extent === \"state\"){\n        this.x_extent = [ this.state.start, this.state.end ];\n    }\n\n    return this;\n\n};\n\n/**\n * Generate an array of ticks for an axis. These ticks are generated in one of three ways (highest wins):\n *   1. An array of specific tick marks\n *   2. Query each data layer for what ticks are appropriate, and allow a panel-level tick configuration parameter\n *     object to override the layer's default presentation settings\n *   3. Generate generic tick marks based on the extent of the data\n * @param {('x'|'y1'|'y2')} axis The string identifier of the axis\n * @returns {Number[]|Object[]}  TODO: number format?\n *   An array of numbers: interpreted as an array of axis value offsets for positioning.\n *   An array of objects: each object must have an 'x' attribute to position the tick.\n *   Other supported object keys:\n *     * text: string to render for a given tick\n *     * style: d3-compatible CSS style object\n *     * transform: SVG transform attribute string\n *     * color: string or LocusZoom scalable parameter object\n */\nLocusZoom.Panel.prototype.generateTicks = function(axis){\n\n    // Parse an explicit 'ticks' attribute in the axis layout\n    if (this.layout.axes[axis].ticks){\n        var layout = this.layout.axes[axis];\n\n        var baseTickConfig = layout.ticks;\n        if (Array.isArray(baseTickConfig)){\n            // Array of specific ticks hard-coded into a panel will override any ticks that an individual layer might specify\n            return baseTickConfig;\n        }\n\n        if (typeof baseTickConfig === \"object\") {\n            // If the layout specifies base configuration for ticks- but without specific positions- then ask each\n            //   data layer to report the tick marks that it thinks it needs\n            // TODO: Few layers currently need to specify custom ticks (which is ok!). But if it becomes common, consider adding mechanisms to deduplicate ticks across layers\n            var self = this;\n\n            // Pass any layer-specific customizations for how ticks are calculated. (styles are overridden separately)\n            var config = { position: baseTickConfig.position };\n\n            var combinedTicks = this.data_layer_ids_by_z_index.reduce(function(acc, data_layer_id) {\n                var nextLayer = self.data_layers[data_layer_id];\n                return acc.concat(nextLayer.getTicks(axis, config));\n            }, []);\n\n            return combinedTicks.map(function(item) {\n                // The layer makes suggestions, but tick configuration params specified on the panel take precedence\n                var itemConfig = {};\n                itemConfig = LocusZoom.Layouts.merge(itemConfig, baseTickConfig);\n                return LocusZoom.Layouts.merge(itemConfig, item);\n            });\n        }\n    }\n\n    // If no other configuration is provided, attempt to generate ticks from the extent\n    if (this[axis + \"_extent\"]) {\n        return LocusZoom.prettyTicks(this[axis + \"_extent\"], \"both\");\n    }\n    return [];\n};\n\n/**\n * Update rendering of this panel whenever an event triggers a redraw. Assumes that the panel has already been\n *   prepared the first time via `initialize`\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.render = function(){\n\n    // Position the panel container\n    this.svg.container.attr(\"transform\", \"translate(\" + this.layout.origin.x +  \",\" + this.layout.origin.y + \")\");\n\n    // Set size on the clip rect\n    this.svg.clipRect.attr(\"width\", this.layout.width).attr(\"height\", this.layout.height);\n\n    // Set and position the inner border, style if necessary\n    this.inner_border\n        .attr(\"x\", this.layout.margin.left).attr(\"y\", this.layout.margin.top)\n        .attr(\"width\", this.layout.width - (this.layout.margin.left + this.layout.margin.right))\n        .attr(\"height\", this.layout.height - (this.layout.margin.top + this.layout.margin.bottom));\n    if (this.layout.inner_border){\n        this.inner_border.style({ \"stroke-width\": 1, \"stroke\": this.layout.inner_border });\n    }\n\n    // Set/update panel title if necessary\n    this.setTitle();\n\n    // Regenerate all extents\n    this.generateExtents();\n\n    // Helper function to constrain any procedurally generated vectors (e.g. ranges, extents)\n    // Constraints applied here keep vectors from going to infinity or beyond a definable power of ten\n    var constrain = function(value, limit_exponent){\n        var neg_min = Math.pow(-10, limit_exponent);\n        var neg_max = Math.pow(-10, -limit_exponent);\n        var pos_min = Math.pow(10, -limit_exponent);\n        var pos_max = Math.pow(10, limit_exponent);\n        if (value === Infinity){ value = pos_max; }\n        if (value === -Infinity){ value = neg_min; }\n        if (value === 0){ value = pos_min; }\n        if (value > 0){ value = Math.max(Math.min(value, pos_max), pos_min); }\n        if (value < 0){ value = Math.max(Math.min(value, neg_max), neg_min); }\n        return value;\n    };\n\n    // Define default and shifted ranges for all axes\n    var ranges = {};\n    if (this.x_extent){\n        var base_x_range = { start: 0, end: this.layout.cliparea.width };\n        if (this.layout.axes.x.range){\n            base_x_range.start = this.layout.axes.x.range.start || base_x_range.start;\n            base_x_range.end = this.layout.axes.x.range.end || base_x_range.end;\n        }\n        ranges.x = [base_x_range.start, base_x_range.end];\n        ranges.x_shifted = [base_x_range.start, base_x_range.end];\n    }\n    if (this.y1_extent){\n        var base_y1_range = { start: this.layout.cliparea.height, end: 0 };\n        if (this.layout.axes.y1.range){\n            base_y1_range.start = this.layout.axes.y1.range.start || base_y1_range.start;\n            base_y1_range.end = this.layout.axes.y1.range.end || base_y1_range.end;\n        }\n        ranges.y1 = [base_y1_range.start, base_y1_range.end];\n        ranges.y1_shifted = [base_y1_range.start, base_y1_range.end];\n    }\n    if (this.y2_extent){\n        var base_y2_range = { start: this.layout.cliparea.height, end: 0 };\n        if (this.layout.axes.y2.range){\n            base_y2_range.start = this.layout.axes.y2.range.start || base_y2_range.start;\n            base_y2_range.end = this.layout.axes.y2.range.end || base_y2_range.end;\n        }\n        ranges.y2 = [base_y2_range.start, base_y2_range.end];\n        ranges.y2_shifted = [base_y2_range.start, base_y2_range.end];\n    }\n\n    // Shift ranges based on any drag or zoom interactions currently underway\n    if (this.parent.interaction.panel_id && (this.parent.interaction.panel_id === this.id || this.parent.interaction.linked_panel_ids.indexOf(this.id) !== -1)){\n        var anchor, scalar = null;\n        if (this.parent.interaction.zooming && typeof this.x_scale == \"function\"){\n            var current_extent_size = Math.abs(this.x_extent[1] - this.x_extent[0]);\n            var current_scaled_extent_size = Math.round(this.x_scale.invert(ranges.x_shifted[1])) - Math.round(this.x_scale.invert(ranges.x_shifted[0]));\n            var zoom_factor = this.parent.interaction.zooming.scale;\n            var potential_extent_size = Math.floor(current_scaled_extent_size * (1 / zoom_factor));\n            if (zoom_factor < 1 && !isNaN(this.parent.layout.max_region_scale)){\n                zoom_factor = 1 /(Math.min(potential_extent_size, this.parent.layout.max_region_scale) / current_scaled_extent_size);\n            } else if (zoom_factor > 1 && !isNaN(this.parent.layout.min_region_scale)){\n                zoom_factor = 1 / (Math.max(potential_extent_size, this.parent.layout.min_region_scale) / current_scaled_extent_size);\n            }\n            var new_extent_size = Math.floor(current_extent_size * zoom_factor);\n            anchor = this.parent.interaction.zooming.center - this.layout.margin.left - this.layout.origin.x;\n            var offset_ratio = anchor / this.layout.cliparea.width;\n            var new_x_extent_start = Math.max(Math.floor(this.x_scale.invert(ranges.x_shifted[0]) - ((new_extent_size - current_scaled_extent_size) * offset_ratio)), 1);\n            ranges.x_shifted = [ this.x_scale(new_x_extent_start), this.x_scale(new_x_extent_start + new_extent_size) ];\n        } else if (this.parent.interaction.dragging){\n            switch (this.parent.interaction.dragging.method){\n            case \"background\":\n                ranges.x_shifted[0] = +this.parent.interaction.dragging.dragged_x;\n                ranges.x_shifted[1] = this.layout.cliparea.width + this.parent.interaction.dragging.dragged_x;\n                break;\n            case \"x_tick\":\n                if (d3.event && d3.event.shiftKey){\n                    ranges.x_shifted[0] = +this.parent.interaction.dragging.dragged_x;\n                    ranges.x_shifted[1] = this.layout.cliparea.width + this.parent.interaction.dragging.dragged_x;\n                } else {\n                    anchor = this.parent.interaction.dragging.start_x - this.layout.margin.left - this.layout.origin.x;\n                    scalar = constrain(anchor / (anchor + this.parent.interaction.dragging.dragged_x), 3);\n                    ranges.x_shifted[0] = 0;\n                    ranges.x_shifted[1] = Math.max(this.layout.cliparea.width * (1 / scalar), 1);\n                }\n                break;\n            case \"y1_tick\":\n            case \"y2_tick\":\n                var y_shifted = \"y\" + this.parent.interaction.dragging.method[1] + \"_shifted\";\n                if (d3.event && d3.event.shiftKey){\n                    ranges[y_shifted][0] = this.layout.cliparea.height + this.parent.interaction.dragging.dragged_y;\n                    ranges[y_shifted][1] = +this.parent.interaction.dragging.dragged_y;\n                } else {\n                    anchor = this.layout.cliparea.height - (this.parent.interaction.dragging.start_y - this.layout.margin.top - this.layout.origin.y);\n                    scalar = constrain(anchor / (anchor - this.parent.interaction.dragging.dragged_y), 3);\n                    ranges[y_shifted][0] = this.layout.cliparea.height;\n                    ranges[y_shifted][1] = this.layout.cliparea.height - (this.layout.cliparea.height * (1 / scalar));\n                }\n            }\n        }\n    }\n\n    // Generate scales and ticks for all axes, then render them\n    [\"x\", \"y1\", \"y2\"].forEach(function(axis){\n        if (!this[axis + \"_extent\"]){ return; }\n\n        // Base Scale\n        this[axis + \"_scale\"] = d3.scale.linear()\n            .domain(this[axis + \"_extent\"])\n            .range(ranges[axis + \"_shifted\"]);\n\n        // Shift the extent\n        this[axis + \"_extent\"] = [\n            this[axis + \"_scale\"].invert(ranges[axis][0]),\n            this[axis + \"_scale\"].invert(ranges[axis][1])\n        ];\n\n        // Finalize Scale\n        this[axis + \"_scale\"] = d3.scale.linear()\n            .domain(this[axis + \"_extent\"]).range(ranges[axis]);\n\n        // Render axis (and generate ticks as needed)\n        this.renderAxis(axis);\n    }.bind(this));\n\n    // Establish mousewheel zoom event handers on the panel (namespacing not passed through by d3, so not used here)\n    if (this.layout.interaction.scroll_to_zoom){\n        var zoom_handler = function(){\n            // Look for a shift key press while scrolling to execute.\n            // If not present, gracefully raise a notification and allow conventional scrolling\n            if (!d3.event.shiftKey){\n                if (this.parent.canInteract(this.id)){\n                    this.loader.show(\"Press <tt>[SHIFT]</tt> while scrolling to zoom\").hide(1000);\n                }\n                return;\n            }\n            d3.event.preventDefault();\n            if (!this.parent.canInteract(this.id)){ return; }\n            var coords = d3.mouse(this.svg.container.node());\n            var delta = Math.max(-1, Math.min(1, (d3.event.wheelDelta || -d3.event.detail || -d3.event.deltaY)));\n            if (delta === 0){ return; }\n            this.parent.interaction = {\n                panel_id: this.id,\n                linked_panel_ids: this.getLinkedPanelIds(\"x\"),\n                zooming: {\n                    scale: (delta < 1) ? 0.9 : 1.1,\n                    center: coords[0]\n                }\n            };\n            this.render();\n            this.parent.interaction.linked_panel_ids.forEach(function(panel_id){\n                this.parent.panels[panel_id].render();\n            }.bind(this));\n            if (this.zoom_timeout !== null){ clearTimeout(this.zoom_timeout); }\n            this.zoom_timeout = setTimeout(function(){\n                this.parent.interaction = {};\n                this.parent.applyState({ start: this.x_extent[0], end: this.x_extent[1] });\n            }.bind(this), 500);\n        }.bind(this);\n        this.zoom_listener = d3.behavior.zoom();\n        this.svg.container.call(this.zoom_listener)\n            .on(\"wheel.zoom\", zoom_handler)\n            .on(\"mousewheel.zoom\", zoom_handler)\n            .on(\"DOMMouseScroll.zoom\", zoom_handler);\n    }\n\n    // Render data layers in order by z-index\n    this.data_layer_ids_by_z_index.forEach(function(data_layer_id){\n        this.data_layers[data_layer_id].draw().render();\n    }.bind(this));\n\n    return this;\n};\n\n\n/**\n * Render ticks for a particular axis\n * @param {('x'|'y1'|'y2')} axis The identifier of the axes\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.renderAxis = function(axis){\n\n    if ([\"x\", \"y1\", \"y2\"].indexOf(axis) === -1){\n        throw(\"Unable to render axis; invalid axis identifier: \" + axis);\n    }\n\n    var canRender = this.layout.axes[axis].render\n        && typeof this[axis + \"_scale\"] == \"function\"\n        && !isNaN(this[axis + \"_scale\"](0));\n\n    // If the axis has already been rendered then check if we can/can't render it\n    // Make sure the axis element is shown/hidden to suit\n    if (this[axis+\"_axis\"]){\n        this.svg.container.select(\"g.lz-axis.lz-\"+axis).style(\"display\", canRender ? null : \"none\");\n    }\n\n    if (!canRender){ return this; }\n\n    // Axis-specific values to plug in where needed\n    var axis_params = {\n        x: {\n            position: \"translate(\" + this.layout.margin.left + \",\" + (this.layout.height - this.layout.margin.bottom) + \")\",\n            orientation: \"bottom\",\n            label_x: this.layout.cliparea.width / 2,\n            label_y: (this.layout.axes[axis].label_offset || 0),\n            label_rotate: null\n        },\n        y1: {\n            position: \"translate(\" + this.layout.margin.left + \",\" + this.layout.margin.top + \")\",\n            orientation: \"left\",\n            label_x: -1 * (this.layout.axes[axis].label_offset || 0),\n            label_y: this.layout.cliparea.height / 2,\n            label_rotate: -90\n        },\n        y2: {\n            position: \"translate(\" + (this.layout.width - this.layout.margin.right) + \",\" + this.layout.margin.top + \")\",\n            orientation: \"right\",\n            label_x: (this.layout.axes[axis].label_offset || 0),\n            label_y: this.layout.cliparea.height / 2,\n            label_rotate: -90\n        }\n    };\n\n    // Generate Ticks\n    this[axis + \"_ticks\"] = this.generateTicks(axis);\n\n    // Determine if the ticks are all numbers (d3-automated tick rendering) or not (manual tick rendering)\n    var ticksAreAllNumbers = (function(ticks){\n        for (var i = 0; i < ticks.length; i++){\n            if (isNaN(ticks[i])){\n                return false;\n            }\n        }\n        return true;\n    })(this[axis+\"_ticks\"]);\n\n    // Initialize the axis; set scale and orientation\n    this[axis+\"_axis\"] = d3.svg.axis().scale(this[axis+\"_scale\"]).orient(axis_params[axis].orientation).tickPadding(3);\n\n    // Set tick values and format\n    if (ticksAreAllNumbers){\n        this[axis+\"_axis\"].tickValues(this[axis+\"_ticks\"]);\n        if (this.layout.axes[axis].tick_format === \"region\"){\n            this[axis+\"_axis\"].tickFormat(function(d) { return LocusZoom.positionIntToString(d, 6); });\n        }\n    } else {\n        var ticks = this[axis+\"_ticks\"].map(function(t){\n            return(t[axis.substr(0,1)]);\n        });\n        this[axis+\"_axis\"].tickValues(ticks)\n            .tickFormat(function(t, i) { return this[axis+\"_ticks\"][i].text; }.bind(this));\n    }\n\n    // Position the axis in the SVG and apply the axis construct\n    this.svg[axis+\"_axis\"]\n        .attr(\"transform\", axis_params[axis].position)\n        .call(this[axis+\"_axis\"]);\n\n    // If necessary manually apply styles and transforms to ticks as specified by the layout\n    if (!ticksAreAllNumbers){\n        var tick_selector = d3.selectAll(\"g#\" + this.getBaseId().replace(\".\",\"\\\\.\") + \"\\\\.\" + axis + \"_axis g.tick\");\n        var panel = this;\n        tick_selector.each(function(d, i){\n            var selector = d3.select(this).select(\"text\");\n            if (panel[axis+\"_ticks\"][i].style){\n                selector.style(panel[axis+\"_ticks\"][i].style);\n            }\n            if (panel[axis+\"_ticks\"][i].transform){\n                selector.attr(\"transform\", panel[axis+\"_ticks\"][i].transform);\n            }\n        });\n    }\n\n    // Render the axis label if necessary\n    var label = this.layout.axes[axis].label || null;\n    if (label !== null){\n        this.svg[axis+\"_axis_label\"]\n            .attr(\"x\", axis_params[axis].label_x).attr(\"y\", axis_params[axis].label_y)\n            .text(LocusZoom.parseFields(this.state, label));\n        if (axis_params[axis].label_rotate !== null){\n            this.svg[axis+\"_axis_label\"]\n                .attr(\"transform\", \"rotate(\" + axis_params[axis].label_rotate + \" \" + axis_params[axis].label_x + \",\" + axis_params[axis].label_y + \")\");\n        }\n    }\n\n    // Attach interactive handlers to ticks as needed\n    [\"x\", \"y1\", \"y2\"].forEach(function(axis){\n        if (this.layout.interaction[\"drag_\" + axis + \"_ticks_to_scale\"]){\n            var namespace = \".\" + this.parent.id + \".\" + this.id + \".interaction.drag\";\n            var tick_mouseover = function(){\n                if (typeof d3.select(this).node().focus == \"function\"){ d3.select(this).node().focus(); }\n                var cursor = (axis === \"x\") ? \"ew-resize\" : \"ns-resize\";\n                if (d3.event && d3.event.shiftKey){ cursor = \"move\"; }\n                d3.select(this)\n                    .style({\"font-weight\": \"bold\", \"cursor\": cursor})\n                    .on(\"keydown\" + namespace, tick_mouseover)\n                    .on(\"keyup\" + namespace, tick_mouseover);\n            };\n            this.svg.container.selectAll(\".lz-axis.lz-\" + axis + \" .tick text\")\n                .attr(\"tabindex\", 0) // necessary to make the tick focusable so keypress events can be captured\n                .on(\"mouseover\" + namespace, tick_mouseover)\n                .on(\"mouseout\" + namespace,  function(){\n                    d3.select(this).style({\"font-weight\": \"normal\"});\n                    d3.select(this).on(\"keydown\" + namespace, null).on(\"keyup\" + namespace, null);\n                })\n                .on(\"mousedown\" + namespace, function(){\n                    this.parent.startDrag(this, axis + \"_tick\");\n                }.bind(this));\n        }\n    }.bind(this));\n\n    return this;\n\n};\n\n/**\n * Force the height of this panel to the largest absolute height of the data in\n *   all child data layers (if not null for any child data layers)\n * @param {number} [target_height] A target height, which will be used in situations when the expected height can be\n *   pre-calculated (eg when the layers are transitioning)\n */\nLocusZoom.Panel.prototype.scaleHeightToData = function(target_height){\n    target_height = +target_height || null;\n    if (target_height === null){\n        this.data_layer_ids_by_z_index.forEach(function(id){\n            var dh = this.data_layers[id].getAbsoluteDataHeight();\n            if (+dh){\n                if (target_height === null){ target_height = +dh; }\n                else { target_height = Math.max(target_height, +dh); }\n            }\n        }.bind(this));\n    }\n    if (+target_height){\n        target_height += +this.layout.margin.top + +this.layout.margin.bottom;\n        this.setDimensions(this.layout.width, target_height);\n        this.parent.setDimensions();\n        this.parent.panel_ids_by_y_index.forEach(function(id){\n            this.parent.panels[id].layout.proportional_height = null;\n        }.bind(this));\n        this.parent.positionPanels();\n    }\n};\n\n/**\n * Methods to set/unset element statuses across all data layers\n * @param {String} status\n * @param {Boolean} toggle\n * @param {Array} filters\n * @param {Boolean} exclusive\n */\nLocusZoom.Panel.prototype.setElementStatusByFilters = function(status, toggle, filters, exclusive){\n    this.data_layer_ids_by_z_index.forEach(function(id){\n        this.data_layers[id].setElementStatusByFilters(status, toggle, filters, exclusive);\n    }.bind(this));\n};\n/**\n * Set/unset element statuses across all data layers\n * @param {String} status\n * @param {Boolean} toggle\n */\nLocusZoom.Panel.prototype.setAllElementStatus = function(status, toggle){\n    this.data_layer_ids_by_z_index.forEach(function(id){\n        this.data_layers[id].setAllElementStatus(status, toggle);\n    }.bind(this));\n};\n// TODO: Capture documentation for dynamically generated methods\nLocusZoom.DataLayer.Statuses.verbs.forEach(function(verb, idx){\n    var adjective = LocusZoom.DataLayer.Statuses.adjectives[idx];\n    var antiverb = \"un\" + verb;\n    // Set/unset status for arbitrarily many elements given a set of filters\n    LocusZoom.Panel.prototype[verb + \"ElementsByFilters\"] = function(filters, exclusive){\n        if (typeof exclusive == \"undefined\"){ exclusive = false; } else { exclusive = !!exclusive; }\n        return this.setElementStatusByFilters(adjective, true, filters, exclusive);\n    };\n    LocusZoom.Panel.prototype[antiverb + \"ElementsByFilters\"] = function(filters, exclusive){\n        if (typeof exclusive == \"undefined\"){ exclusive = false; } else { exclusive = !!exclusive; }\n        return this.setElementStatusByFilters(adjective, false, filters, exclusive);\n    };\n    // Set/unset status for all elements\n    LocusZoom.Panel.prototype[verb + \"AllElements\"] = function(){\n        this.setAllElementStatus(adjective, true);\n        return this;\n    };\n    LocusZoom.Panel.prototype[antiverb + \"AllElements\"] = function(){\n        this.setAllElementStatus(adjective, false);\n        return this;\n    };\n});\n\n\n/**\n * Add a \"basic\" loader to a panel\n * This method is just a shortcut for adding the most commonly used type of loading indicator, which appears when\n *   data is requested, animates (e.g. shows an infinitely cycling progress bar as opposed to one that loads from\n *   0-100% based on actual load progress), and disappears when new data is loaded and rendered.\n *\n *\n * @param {Boolean} show_immediately\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.addBasicLoader = function(show_immediately){\n    if (typeof show_immediately != \"undefined\"){ show_immediately = true; }\n    if (show_immediately){\n        this.loader.show(\"Loading...\").animate();\n    }\n    this.on(\"data_requested\", function(){\n        this.loader.show(\"Loading...\").animate();\n    }.bind(this));\n    this.on(\"data_rendered\", function(){\n        this.loader.hide();\n    }.bind(this));\n    return this;\n};\n"]}